// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedRemoteAccessInitParameters struct {

	// (String) Request reason description, cannot be changed once created
	// Request reason description, cannot be changed once created
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	// (Number) For how many days access is requested, cannot be changed once created
	// For how many days access is requested, cannot be changed once created
	RequestedDays *float64 `json:"requestedDays,omitempty" tf:"requested_days,omitempty"`

	// (String) Requested role, cannot be changed once created
	// Requested role, cannot be changed once created
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) Access request state. Automatically set as ACCEPTED on create, state can be changed in subsequent updates.
	// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) User id, cannot be changed once created
	// User id, cannot be changed once created
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type ManagedRemoteAccessObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Request reason description, cannot be changed once created
	// Request reason description, cannot be changed once created
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	// (Number) For how many days access is requested, cannot be changed once created
	// For how many days access is requested, cannot be changed once created
	RequestedDays *float64 `json:"requestedDays,omitempty" tf:"requested_days,omitempty"`

	// (String) Requested role, cannot be changed once created
	// Requested role, cannot be changed once created
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) Access request state. Automatically set as ACCEPTED on create, state can be changed in subsequent updates.
	// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) User id, cannot be changed once created
	// User id, cannot be changed once created
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type ManagedRemoteAccessParameters struct {

	// (String) Request reason description, cannot be changed once created
	// Request reason description, cannot be changed once created
	// +kubebuilder:validation:Optional
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	// (Number) For how many days access is requested, cannot be changed once created
	// For how many days access is requested, cannot be changed once created
	// +kubebuilder:validation:Optional
	RequestedDays *float64 `json:"requestedDays,omitempty" tf:"requested_days,omitempty"`

	// (String) Requested role, cannot be changed once created
	// Requested role, cannot be changed once created
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) Access request state. Automatically set as ACCEPTED on create, state can be changed in subsequent updates.
	// Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) User id, cannot be changed once created
	// User id, cannot be changed once created
	// +kubebuilder:validation:Optional
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

// ManagedRemoteAccessSpec defines the desired state of ManagedRemoteAccess
type ManagedRemoteAccessSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedRemoteAccessParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedRemoteAccessInitParameters `json:"initProvider,omitempty"`
}

// ManagedRemoteAccessStatus defines the observed state of ManagedRemoteAccess.
type ManagedRemoteAccessStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedRemoteAccessObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedRemoteAccess is the Schema for the ManagedRemoteAccesss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ManagedRemoteAccess struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reason) || (has(self.initProvider) && has(self.initProvider.reason))",message="spec.forProvider.reason is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.requestedDays) || (has(self.initProvider) && has(self.initProvider.requestedDays))",message="spec.forProvider.requestedDays is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userId) || (has(self.initProvider) && has(self.initProvider.userId))",message="spec.forProvider.userId is a required parameter"
	Spec   ManagedRemoteAccessSpec   `json:"spec"`
	Status ManagedRemoteAccessStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedRemoteAccessList contains a list of ManagedRemoteAccesss
type ManagedRemoteAccessList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedRemoteAccess `json:"items"`
}

// Repository type metadata.
var (
	ManagedRemoteAccess_Kind             = "ManagedRemoteAccess"
	ManagedRemoteAccess_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedRemoteAccess_Kind}.String()
	ManagedRemoteAccess_KindAPIVersion   = ManagedRemoteAccess_Kind + "." + CRDGroupVersion.String()
	ManagedRemoteAccess_GroupVersionKind = CRDGroupVersion.WithKind(ManagedRemoteAccess_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedRemoteAccess{}, &ManagedRemoteAccessList{})
}
