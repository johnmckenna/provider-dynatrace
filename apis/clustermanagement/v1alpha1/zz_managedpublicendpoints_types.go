// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedPublicEndpointsInitParameters struct {

	// (Set of String) Additional web UI addresses
	// Additional web UI addresses
	// +listType=set
	AdditionalWebUIAddresses []*string `json:"additionalWebUiAddresses,omitempty" tf:"additional_web_ui_addresses,omitempty"`

	// (String) Beacon forwarder address
	// Beacon forwarder address
	BeaconForwarderAddress *string `json:"beaconForwarderAddress,omitempty" tf:"beacon_forwarder_address,omitempty"`

	// (String) CDN address
	// CDN address
	CdnAddress *string `json:"cdnAddress,omitempty" tf:"cdn_address,omitempty"`

	// (String) Web UI address
	// Web UI address
	WebUIAddress *string `json:"webUiAddress,omitempty" tf:"web_ui_address,omitempty"`
}

type ManagedPublicEndpointsObservation struct {

	// (Set of String) Additional web UI addresses
	// Additional web UI addresses
	// +listType=set
	AdditionalWebUIAddresses []*string `json:"additionalWebUiAddresses,omitempty" tf:"additional_web_ui_addresses,omitempty"`

	// (String) Beacon forwarder address
	// Beacon forwarder address
	BeaconForwarderAddress *string `json:"beaconForwarderAddress,omitempty" tf:"beacon_forwarder_address,omitempty"`

	// (String) CDN address
	// CDN address
	CdnAddress *string `json:"cdnAddress,omitempty" tf:"cdn_address,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Web UI address
	// Web UI address
	WebUIAddress *string `json:"webUiAddress,omitempty" tf:"web_ui_address,omitempty"`
}

type ManagedPublicEndpointsParameters struct {

	// (Set of String) Additional web UI addresses
	// Additional web UI addresses
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalWebUIAddresses []*string `json:"additionalWebUiAddresses,omitempty" tf:"additional_web_ui_addresses,omitempty"`

	// (String) Beacon forwarder address
	// Beacon forwarder address
	// +kubebuilder:validation:Optional
	BeaconForwarderAddress *string `json:"beaconForwarderAddress,omitempty" tf:"beacon_forwarder_address,omitempty"`

	// (String) CDN address
	// CDN address
	// +kubebuilder:validation:Optional
	CdnAddress *string `json:"cdnAddress,omitempty" tf:"cdn_address,omitempty"`

	// (String) Web UI address
	// Web UI address
	// +kubebuilder:validation:Optional
	WebUIAddress *string `json:"webUiAddress,omitempty" tf:"web_ui_address,omitempty"`
}

// ManagedPublicEndpointsSpec defines the desired state of ManagedPublicEndpoints
type ManagedPublicEndpointsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedPublicEndpointsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedPublicEndpointsInitParameters `json:"initProvider,omitempty"`
}

// ManagedPublicEndpointsStatus defines the observed state of ManagedPublicEndpoints.
type ManagedPublicEndpointsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedPublicEndpointsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedPublicEndpoints is the Schema for the ManagedPublicEndpointss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ManagedPublicEndpoints struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedPublicEndpointsSpec   `json:"spec"`
	Status            ManagedPublicEndpointsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedPublicEndpointsList contains a list of ManagedPublicEndpointss
type ManagedPublicEndpointsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedPublicEndpoints `json:"items"`
}

// Repository type metadata.
var (
	ManagedPublicEndpoints_Kind             = "ManagedPublicEndpoints"
	ManagedPublicEndpoints_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedPublicEndpoints_Kind}.String()
	ManagedPublicEndpoints_KindAPIVersion   = ManagedPublicEndpoints_Kind + "." + CRDGroupVersion.String()
	ManagedPublicEndpoints_GroupVersionKind = CRDGroupVersion.WithKind(ManagedPublicEndpoints_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedPublicEndpoints{}, &ManagedPublicEndpointsList{})
}
