// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedSMTPInitParameters struct {

	// mails via Mission Control in case of problems with SMTP server.
	// If true, we will send e-mails via Mission Control in case of problems with SMTP server.
	AllowFallbackViaMissionControl *bool `json:"allowFallbackViaMissionControl,omitempty" tf:"allow_fallback_via_mission_control,omitempty"`

	// (String) Connection security, possible values: NO_ENCRYPTION, OPTIONAL_STARTTLS, REQUIRE_STARTTLS, TLS. Default: NO_ENCRYPTION
	// Connection security, possible values: `NO_ENCRYPTION`, `OPTIONAL_STARTTLS`, `REQUIRE_STARTTLS`, `TLS`. Default: `NO_ENCRYPTION`
	ConnectionSecurity *string `json:"connectionSecurity,omitempty" tf:"connection_security,omitempty"`

	// (String) Host Name
	// Host Name
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// (Boolean) If true, a password has been configured. Default: false.
	// If true, a password has been configured. Default: `false`.
	IsPasswordConfigured *bool `json:"isPasswordConfigured,omitempty" tf:"is_password_configured,omitempty"`

	// (String, Sensitive) Password
	// Password
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// (Number) Integer value of port. Default: 25
	// Integer value of port. Default: `25`
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Sender email address
	// Sender email address
	SenderEmailAddress *string `json:"senderEmailAddress,omitempty" tf:"sender_email_address,omitempty"`

	// mails via SMTP server.
	// If true, we will send e-mails via SMTP server.
	UseSMTPServer *bool `json:"useSmtpServer,omitempty" tf:"use_smtp_server,omitempty"`

	// (String) User Name
	// User Name
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type ManagedSMTPObservation struct {

	// mails via Mission Control in case of problems with SMTP server.
	// If true, we will send e-mails via Mission Control in case of problems with SMTP server.
	AllowFallbackViaMissionControl *bool `json:"allowFallbackViaMissionControl,omitempty" tf:"allow_fallback_via_mission_control,omitempty"`

	// (String) Connection security, possible values: NO_ENCRYPTION, OPTIONAL_STARTTLS, REQUIRE_STARTTLS, TLS. Default: NO_ENCRYPTION
	// Connection security, possible values: `NO_ENCRYPTION`, `OPTIONAL_STARTTLS`, `REQUIRE_STARTTLS`, `TLS`. Default: `NO_ENCRYPTION`
	ConnectionSecurity *string `json:"connectionSecurity,omitempty" tf:"connection_security,omitempty"`

	// (String) Host Name
	// Host Name
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) If true, a password has been configured. Default: false.
	// If true, a password has been configured. Default: `false`.
	IsPasswordConfigured *bool `json:"isPasswordConfigured,omitempty" tf:"is_password_configured,omitempty"`

	// (Number) Integer value of port. Default: 25
	// Integer value of port. Default: `25`
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Sender email address
	// Sender email address
	SenderEmailAddress *string `json:"senderEmailAddress,omitempty" tf:"sender_email_address,omitempty"`

	// mails via SMTP server.
	// If true, we will send e-mails via SMTP server.
	UseSMTPServer *bool `json:"useSmtpServer,omitempty" tf:"use_smtp_server,omitempty"`

	// (String) User Name
	// User Name
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

type ManagedSMTPParameters struct {

	// mails via Mission Control in case of problems with SMTP server.
	// If true, we will send e-mails via Mission Control in case of problems with SMTP server.
	// +kubebuilder:validation:Optional
	AllowFallbackViaMissionControl *bool `json:"allowFallbackViaMissionControl,omitempty" tf:"allow_fallback_via_mission_control,omitempty"`

	// (String) Connection security, possible values: NO_ENCRYPTION, OPTIONAL_STARTTLS, REQUIRE_STARTTLS, TLS. Default: NO_ENCRYPTION
	// Connection security, possible values: `NO_ENCRYPTION`, `OPTIONAL_STARTTLS`, `REQUIRE_STARTTLS`, `TLS`. Default: `NO_ENCRYPTION`
	// +kubebuilder:validation:Optional
	ConnectionSecurity *string `json:"connectionSecurity,omitempty" tf:"connection_security,omitempty"`

	// (String) Host Name
	// Host Name
	// +kubebuilder:validation:Optional
	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	// (Boolean) If true, a password has been configured. Default: false.
	// If true, a password has been configured. Default: `false`.
	// +kubebuilder:validation:Optional
	IsPasswordConfigured *bool `json:"isPasswordConfigured,omitempty" tf:"is_password_configured,omitempty"`

	// (String, Sensitive) Password
	// Password
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// (Number) Integer value of port. Default: 25
	// Integer value of port. Default: `25`
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Sender email address
	// Sender email address
	// +kubebuilder:validation:Optional
	SenderEmailAddress *string `json:"senderEmailAddress,omitempty" tf:"sender_email_address,omitempty"`

	// mails via SMTP server.
	// If true, we will send e-mails via SMTP server.
	// +kubebuilder:validation:Optional
	UseSMTPServer *bool `json:"useSmtpServer,omitempty" tf:"use_smtp_server,omitempty"`

	// (String) User Name
	// User Name
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`
}

// ManagedSMTPSpec defines the desired state of ManagedSMTP
type ManagedSMTPSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedSMTPParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedSMTPInitParameters `json:"initProvider,omitempty"`
}

// ManagedSMTPStatus defines the observed state of ManagedSMTP.
type ManagedSMTPStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedSMTPObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedSMTP is the Schema for the ManagedSMTPs API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ManagedSMTP struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostName) || (has(self.initProvider) && has(self.initProvider.hostName))",message="spec.forProvider.hostName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.passwordSecretRef)",message="spec.forProvider.passwordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.senderEmailAddress) || (has(self.initProvider) && has(self.initProvider.senderEmailAddress))",message="spec.forProvider.senderEmailAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userName) || (has(self.initProvider) && has(self.initProvider.userName))",message="spec.forProvider.userName is a required parameter"
	Spec   ManagedSMTPSpec   `json:"spec"`
	Status ManagedSMTPStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedSMTPList contains a list of ManagedSMTPs
type ManagedSMTPList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedSMTP `json:"items"`
}

// Repository type metadata.
var (
	ManagedSMTP_Kind             = "ManagedSMTP"
	ManagedSMTP_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedSMTP_Kind}.String()
	ManagedSMTP_KindAPIVersion   = ManagedSMTP_Kind + "." + CRDGroupVersion.String()
	ManagedSMTP_GroupVersionKind = CRDGroupVersion.WithKind(ManagedSMTP_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedSMTP{}, &ManagedSMTPList{})
}
