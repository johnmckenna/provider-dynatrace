// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedInternetProxyInitParameters struct {

	// (Set of String) Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	// Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	// +listType=set
	NonProxyHosts []*string `json:"nonProxyHosts,omitempty" tf:"non_proxy_hosts,omitempty"`

	// (String, Sensitive) Password of proxy server, null means do not change previous value
	// Password of proxy server, null means do not change previous value
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Number) Port of proxy server
	// Port of proxy server
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Protocol which proxy server uses
	// Protocol which proxy server uses
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// (String) Address (either IP or Hostname) of proxy server
	// Address (either IP or Hostname) of proxy server
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// (String) User of proxy server, null means do not change previous value
	// User of proxy server, null means do not change previous value
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ManagedInternetProxyObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	// Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	// +listType=set
	NonProxyHosts []*string `json:"nonProxyHosts,omitempty" tf:"non_proxy_hosts,omitempty"`

	// (Number) Port of proxy server
	// Port of proxy server
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Protocol which proxy server uses
	// Protocol which proxy server uses
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// (String) Address (either IP or Hostname) of proxy server
	// Address (either IP or Hostname) of proxy server
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// (String) User of proxy server, null means do not change previous value
	// User of proxy server, null means do not change previous value
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ManagedInternetProxyParameters struct {

	// (Set of String) Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	// Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	// +kubebuilder:validation:Optional
	// +listType=set
	NonProxyHosts []*string `json:"nonProxyHosts,omitempty" tf:"non_proxy_hosts,omitempty"`

	// (String, Sensitive) Password of proxy server, null means do not change previous value
	// Password of proxy server, null means do not change previous value
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Number) Port of proxy server
	// Port of proxy server
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) Protocol which proxy server uses
	// Protocol which proxy server uses
	// +kubebuilder:validation:Optional
	Scheme *string `json:"scheme,omitempty" tf:"scheme,omitempty"`

	// (String) Address (either IP or Hostname) of proxy server
	// Address (either IP or Hostname) of proxy server
	// +kubebuilder:validation:Optional
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// (String) User of proxy server, null means do not change previous value
	// User of proxy server, null means do not change previous value
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

// ManagedInternetProxySpec defines the desired state of ManagedInternetProxy
type ManagedInternetProxySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedInternetProxyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagedInternetProxyInitParameters `json:"initProvider,omitempty"`
}

// ManagedInternetProxyStatus defines the observed state of ManagedInternetProxy.
type ManagedInternetProxyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedInternetProxyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagedInternetProxy is the Schema for the ManagedInternetProxys API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ManagedInternetProxy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scheme) || (has(self.initProvider) && has(self.initProvider.scheme))",message="spec.forProvider.scheme is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.server) || (has(self.initProvider) && has(self.initProvider.server))",message="spec.forProvider.server is a required parameter"
	Spec   ManagedInternetProxySpec   `json:"spec"`
	Status ManagedInternetProxyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedInternetProxyList contains a list of ManagedInternetProxys
type ManagedInternetProxyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedInternetProxy `json:"items"`
}

// Repository type metadata.
var (
	ManagedInternetProxy_Kind             = "ManagedInternetProxy"
	ManagedInternetProxy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedInternetProxy_Kind}.String()
	ManagedInternetProxy_KindAPIVersion   = ManagedInternetProxy_Kind + "." + CRDGroupVersion.String()
	ManagedInternetProxy_GroupVersionKind = CRDGroupVersion.WithKind(ManagedInternetProxy_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedInternetProxy{}, &ManagedInternetProxyList{})
}
