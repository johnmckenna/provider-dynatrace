//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoldenState) DeepCopyInto(out *GoldenState) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoldenState.
func (in *GoldenState) DeepCopy() *GoldenState {
	if in == nil {
		return nil
	}
	out := new(GoldenState)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GoldenState) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoldenStateInitParameters) DeepCopyInto(out *GoldenStateInitParameters) {
	*out = *in
	if in.DynatraceAixExtension != nil {
		in, out := &in.DynatraceAixExtension, &out.DynatraceAixExtension
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAlerting != nil {
		in, out := &in.DynatraceAlerting, &out.DynatraceAlerting
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAnsibleTowerNotification != nil {
		in, out := &in.DynatraceAnsibleTowerNotification, &out.DynatraceAnsibleTowerNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceApplicationDetectionRule != nil {
		in, out := &in.DynatraceApplicationDetectionRule, &out.DynatraceApplicationDetectionRule
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceApplicationErrorRules != nil {
		in, out := &in.DynatraceApplicationErrorRules, &out.DynatraceApplicationErrorRules
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAutotagV2 != nil {
		in, out := &in.DynatraceAutotagV2, &out.DynatraceAutotagV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAwsCredentials != nil {
		in, out := &in.DynatraceAwsCredentials, &out.DynatraceAwsCredentials
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAzureCredentials != nil {
		in, out := &in.DynatraceAzureCredentials, &out.DynatraceAzureCredentials
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceBrowserMonitor != nil {
		in, out := &in.DynatraceBrowserMonitor, &out.DynatraceBrowserMonitor
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedMobileMetric != nil {
		in, out := &in.DynatraceCalculatedMobileMetric, &out.DynatraceCalculatedMobileMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedServiceMetric != nil {
		in, out := &in.DynatraceCalculatedServiceMetric, &out.DynatraceCalculatedServiceMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedSyntheticMetric != nil {
		in, out := &in.DynatraceCalculatedSyntheticMetric, &out.DynatraceCalculatedSyntheticMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedWebMetric != nil {
		in, out := &in.DynatraceCalculatedWebMetric, &out.DynatraceCalculatedWebMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCredentials != nil {
		in, out := &in.DynatraceCredentials, &out.DynatraceCredentials
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomAppAnomalies != nil {
		in, out := &in.DynatraceCustomAppAnomalies, &out.DynatraceCustomAppAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomAppCrashRate != nil {
		in, out := &in.DynatraceCustomAppCrashRate, &out.DynatraceCustomAppCrashRate
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomAppEnablement != nil {
		in, out := &in.DynatraceCustomAppEnablement, &out.DynatraceCustomAppEnablement
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomService != nil {
		in, out := &in.DynatraceCustomService, &out.DynatraceCustomService
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDataPrivacy != nil {
		in, out := &in.DynatraceDataPrivacy, &out.DynatraceDataPrivacy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDatabaseAnomaliesV2 != nil {
		in, out := &in.DynatraceDatabaseAnomaliesV2, &out.DynatraceDatabaseAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDeclarativeGrouping != nil {
		in, out := &in.DynatraceDeclarativeGrouping, &out.DynatraceDeclarativeGrouping
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDiskAnomaliesV2 != nil {
		in, out := &in.DynatraceDiskAnomaliesV2, &out.DynatraceDiskAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDiskOptions != nil {
		in, out := &in.DynatraceDiskOptions, &out.DynatraceDiskOptions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDiskSpecificAnomaliesV2 != nil {
		in, out := &in.DynatraceDiskSpecificAnomaliesV2, &out.DynatraceDiskSpecificAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceEmailNotification != nil {
		in, out := &in.DynatraceEmailNotification, &out.DynatraceEmailNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceExtensionExecutionController != nil {
		in, out := &in.DynatraceExtensionExecutionController, &out.DynatraceExtensionExecutionController
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceGenericTypes != nil {
		in, out := &in.DynatraceGenericTypes, &out.DynatraceGenericTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHTTPMonitor != nil {
		in, out := &in.DynatraceHTTPMonitor, &out.DynatraceHTTPMonitor
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHostAnomaliesV2 != nil {
		in, out := &in.DynatraceHostAnomaliesV2, &out.DynatraceHostAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHostNaming != nil {
		in, out := &in.DynatraceHostNaming, &out.DynatraceHostNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHostProcessGroupMonitoring != nil {
		in, out := &in.DynatraceHostProcessGroupMonitoring, &out.DynatraceHostProcessGroupMonitoring
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceImsBridges != nil {
		in, out := &in.DynatraceImsBridges, &out.DynatraceImsBridges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceJiraNotification != nil {
		in, out := &in.DynatraceJiraNotification, &out.DynatraceJiraNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceK8SNamespaceAnomalies != nil {
		in, out := &in.DynatraceK8SNamespaceAnomalies, &out.DynatraceK8SNamespaceAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceKeyRequests != nil {
		in, out := &in.DynatraceKeyRequests, &out.DynatraceKeyRequests
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceLogMetrics != nil {
		in, out := &in.DynatraceLogMetrics, &out.DynatraceLogMetrics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMaintenance != nil {
		in, out := &in.DynatraceMaintenance, &out.DynatraceMaintenance
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceManagementZoneV2 != nil {
		in, out := &in.DynatraceManagementZoneV2, &out.DynatraceManagementZoneV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMetricEvents != nil {
		in, out := &in.DynatraceMetricEvents, &out.DynatraceMetricEvents
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileAppAnomalies != nil {
		in, out := &in.DynatraceMobileAppAnomalies, &out.DynatraceMobileAppAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileAppCrashRate != nil {
		in, out := &in.DynatraceMobileAppCrashRate, &out.DynatraceMobileAppCrashRate
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileAppEnablement != nil {
		in, out := &in.DynatraceMobileAppEnablement, &out.DynatraceMobileAppEnablement
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileApplication != nil {
		in, out := &in.DynatraceMobileApplication, &out.DynatraceMobileApplication
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesApache != nil {
		in, out := &in.DynatraceMonitoredTechnologiesApache, &out.DynatraceMonitoredTechnologiesApache
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesDotnet != nil {
		in, out := &in.DynatraceMonitoredTechnologiesDotnet, &out.DynatraceMonitoredTechnologiesDotnet
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesGo != nil {
		in, out := &in.DynatraceMonitoredTechnologiesGo, &out.DynatraceMonitoredTechnologiesGo
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesIis != nil {
		in, out := &in.DynatraceMonitoredTechnologiesIis, &out.DynatraceMonitoredTechnologiesIis
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesJava != nil {
		in, out := &in.DynatraceMonitoredTechnologiesJava, &out.DynatraceMonitoredTechnologiesJava
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesNginx != nil {
		in, out := &in.DynatraceMonitoredTechnologiesNginx, &out.DynatraceMonitoredTechnologiesNginx
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesNodeJS != nil {
		in, out := &in.DynatraceMonitoredTechnologiesNodeJS, &out.DynatraceMonitoredTechnologiesNodeJS
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesOpentracing != nil {
		in, out := &in.DynatraceMonitoredTechnologiesOpentracing, &out.DynatraceMonitoredTechnologiesOpentracing
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesPHP != nil {
		in, out := &in.DynatraceMonitoredTechnologiesPHP, &out.DynatraceMonitoredTechnologiesPHP
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesVarnish != nil {
		in, out := &in.DynatraceMonitoredTechnologiesVarnish, &out.DynatraceMonitoredTechnologiesVarnish
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesWsmb != nil {
		in, out := &in.DynatraceMonitoredTechnologiesWsmb, &out.DynatraceMonitoredTechnologiesWsmb
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMutedRequests != nil {
		in, out := &in.DynatraceMutedRequests, &out.DynatraceMutedRequests
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceNettracer != nil {
		in, out := &in.DynatraceNettracer, &out.DynatraceNettracer
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceOneagentFeatures != nil {
		in, out := &in.DynatraceOneagentFeatures, &out.DynatraceOneagentFeatures
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceOpsGenieNotification != nil {
		in, out := &in.DynatraceOpsGenieNotification, &out.DynatraceOpsGenieNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatracePagerDutyNotification != nil {
		in, out := &in.DynatracePagerDutyNotification, &out.DynatracePagerDutyNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatracePgAlerting != nil {
		in, out := &in.DynatracePgAlerting, &out.DynatracePgAlerting
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessAvailability != nil {
		in, out := &in.DynatraceProcessAvailability, &out.DynatraceProcessAvailability
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupDetection != nil {
		in, out := &in.DynatraceProcessGroupDetection, &out.DynatraceProcessGroupDetection
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupDetectionFlags != nil {
		in, out := &in.DynatraceProcessGroupDetectionFlags, &out.DynatraceProcessGroupDetectionFlags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupMonitoring != nil {
		in, out := &in.DynatraceProcessGroupMonitoring, &out.DynatraceProcessGroupMonitoring
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupRum != nil {
		in, out := &in.DynatraceProcessGroupRum, &out.DynatraceProcessGroupRum
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupSimpleDetection != nil {
		in, out := &in.DynatraceProcessGroupSimpleDetection, &out.DynatraceProcessGroupSimpleDetection
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessMonitoring != nil {
		in, out := &in.DynatraceProcessMonitoring, &out.DynatraceProcessMonitoring
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessMonitoringRule != nil {
		in, out := &in.DynatraceProcessMonitoringRule, &out.DynatraceProcessMonitoringRule
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessVisibility != nil {
		in, out := &in.DynatraceProcessVisibility, &out.DynatraceProcessVisibility
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessgroupNaming != nil {
		in, out := &in.DynatraceProcessgroupNaming, &out.DynatraceProcessgroupNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceQueueManager != nil {
		in, out := &in.DynatraceQueueManager, &out.DynatraceQueueManager
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceQueueSharingGroups != nil {
		in, out := &in.DynatraceQueueSharingGroups, &out.DynatraceQueueSharingGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRequestAttribute != nil {
		in, out := &in.DynatraceRequestAttribute, &out.DynatraceRequestAttribute
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRequestNaming != nil {
		in, out := &in.DynatraceRequestNaming, &out.DynatraceRequestNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRumAdvancedCorrelation != nil {
		in, out := &in.DynatraceRumAdvancedCorrelation, &out.DynatraceRumAdvancedCorrelation
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRumIPLocations != nil {
		in, out := &in.DynatraceRumIPLocations, &out.DynatraceRumIPLocations
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRumProviderBreakdown != nil {
		in, out := &in.DynatraceRumProviderBreakdown, &out.DynatraceRumProviderBreakdown
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSLOV2 != nil {
		in, out := &in.DynatraceSLOV2, &out.DynatraceSLOV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceFailure != nil {
		in, out := &in.DynatraceServiceFailure, &out.DynatraceServiceFailure
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceHTTPFailure != nil {
		in, out := &in.DynatraceServiceHTTPFailure, &out.DynatraceServiceHTTPFailure
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceNaming != nil {
		in, out := &in.DynatraceServiceNaming, &out.DynatraceServiceNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceNowNotification != nil {
		in, out := &in.DynatraceServiceNowNotification, &out.DynatraceServiceNowNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSessionReplayWebPrivacy != nil {
		in, out := &in.DynatraceSessionReplayWebPrivacy, &out.DynatraceSessionReplayWebPrivacy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSlackNotification != nil {
		in, out := &in.DynatraceSlackNotification, &out.DynatraceSlackNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSpanCaptureRule != nil {
		in, out := &in.DynatraceSpanCaptureRule, &out.DynatraceSpanCaptureRule
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSpanContextPropagation != nil {
		in, out := &in.DynatraceSpanContextPropagation, &out.DynatraceSpanContextPropagation
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSyntheticLocation != nil {
		in, out := &in.DynatraceSyntheticLocation, &out.DynatraceSyntheticLocation
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceTrelloNotification != nil {
		in, out := &in.DynatraceTrelloNotification, &out.DynatraceTrelloNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceUpdateWindows != nil {
		in, out := &in.DynatraceUpdateWindows, &out.DynatraceUpdateWindows
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceUsabilityAnalytics != nil {
		in, out := &in.DynatraceUsabilityAnalytics, &out.DynatraceUsabilityAnalytics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceVictorOpsNotification != nil {
		in, out := &in.DynatraceVictorOpsNotification, &out.DynatraceVictorOpsNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppAnomalies != nil {
		in, out := &in.DynatraceWebAppAnomalies, &out.DynatraceWebAppAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppBeaconOrigins != nil {
		in, out := &in.DynatraceWebAppBeaconOrigins, &out.DynatraceWebAppBeaconOrigins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppEnablement != nil {
		in, out := &in.DynatraceWebAppEnablement, &out.DynatraceWebAppEnablement
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppResourceCleanup != nil {
		in, out := &in.DynatraceWebAppResourceCleanup, &out.DynatraceWebAppResourceCleanup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppResourceTypes != nil {
		in, out := &in.DynatraceWebAppResourceTypes, &out.DynatraceWebAppResourceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebApplication != nil {
		in, out := &in.DynatraceWebApplication, &out.DynatraceWebApplication
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebhookNotification != nil {
		in, out := &in.DynatraceWebhookNotification, &out.DynatraceWebhookNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceXmattersNotification != nil {
		in, out := &in.DynatraceXmattersNotification, &out.DynatraceXmattersNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoldenStateInitParameters.
func (in *GoldenStateInitParameters) DeepCopy() *GoldenStateInitParameters {
	if in == nil {
		return nil
	}
	out := new(GoldenStateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoldenStateList) DeepCopyInto(out *GoldenStateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GoldenState, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoldenStateList.
func (in *GoldenStateList) DeepCopy() *GoldenStateList {
	if in == nil {
		return nil
	}
	out := new(GoldenStateList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GoldenStateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoldenStateObservation) DeepCopyInto(out *GoldenStateObservation) {
	*out = *in
	if in.DynatraceAixExtension != nil {
		in, out := &in.DynatraceAixExtension, &out.DynatraceAixExtension
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAlerting != nil {
		in, out := &in.DynatraceAlerting, &out.DynatraceAlerting
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAnsibleTowerNotification != nil {
		in, out := &in.DynatraceAnsibleTowerNotification, &out.DynatraceAnsibleTowerNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceApplicationDetectionRule != nil {
		in, out := &in.DynatraceApplicationDetectionRule, &out.DynatraceApplicationDetectionRule
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceApplicationErrorRules != nil {
		in, out := &in.DynatraceApplicationErrorRules, &out.DynatraceApplicationErrorRules
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAutotagV2 != nil {
		in, out := &in.DynatraceAutotagV2, &out.DynatraceAutotagV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAwsCredentials != nil {
		in, out := &in.DynatraceAwsCredentials, &out.DynatraceAwsCredentials
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAzureCredentials != nil {
		in, out := &in.DynatraceAzureCredentials, &out.DynatraceAzureCredentials
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceBrowserMonitor != nil {
		in, out := &in.DynatraceBrowserMonitor, &out.DynatraceBrowserMonitor
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedMobileMetric != nil {
		in, out := &in.DynatraceCalculatedMobileMetric, &out.DynatraceCalculatedMobileMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedServiceMetric != nil {
		in, out := &in.DynatraceCalculatedServiceMetric, &out.DynatraceCalculatedServiceMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedSyntheticMetric != nil {
		in, out := &in.DynatraceCalculatedSyntheticMetric, &out.DynatraceCalculatedSyntheticMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedWebMetric != nil {
		in, out := &in.DynatraceCalculatedWebMetric, &out.DynatraceCalculatedWebMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCredentials != nil {
		in, out := &in.DynatraceCredentials, &out.DynatraceCredentials
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomAppAnomalies != nil {
		in, out := &in.DynatraceCustomAppAnomalies, &out.DynatraceCustomAppAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomAppCrashRate != nil {
		in, out := &in.DynatraceCustomAppCrashRate, &out.DynatraceCustomAppCrashRate
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomAppEnablement != nil {
		in, out := &in.DynatraceCustomAppEnablement, &out.DynatraceCustomAppEnablement
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomService != nil {
		in, out := &in.DynatraceCustomService, &out.DynatraceCustomService
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDataPrivacy != nil {
		in, out := &in.DynatraceDataPrivacy, &out.DynatraceDataPrivacy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDatabaseAnomaliesV2 != nil {
		in, out := &in.DynatraceDatabaseAnomaliesV2, &out.DynatraceDatabaseAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDeclarativeGrouping != nil {
		in, out := &in.DynatraceDeclarativeGrouping, &out.DynatraceDeclarativeGrouping
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDiskAnomaliesV2 != nil {
		in, out := &in.DynatraceDiskAnomaliesV2, &out.DynatraceDiskAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDiskOptions != nil {
		in, out := &in.DynatraceDiskOptions, &out.DynatraceDiskOptions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDiskSpecificAnomaliesV2 != nil {
		in, out := &in.DynatraceDiskSpecificAnomaliesV2, &out.DynatraceDiskSpecificAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceEmailNotification != nil {
		in, out := &in.DynatraceEmailNotification, &out.DynatraceEmailNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceExtensionExecutionController != nil {
		in, out := &in.DynatraceExtensionExecutionController, &out.DynatraceExtensionExecutionController
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceGenericTypes != nil {
		in, out := &in.DynatraceGenericTypes, &out.DynatraceGenericTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHTTPMonitor != nil {
		in, out := &in.DynatraceHTTPMonitor, &out.DynatraceHTTPMonitor
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHostAnomaliesV2 != nil {
		in, out := &in.DynatraceHostAnomaliesV2, &out.DynatraceHostAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHostNaming != nil {
		in, out := &in.DynatraceHostNaming, &out.DynatraceHostNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHostProcessGroupMonitoring != nil {
		in, out := &in.DynatraceHostProcessGroupMonitoring, &out.DynatraceHostProcessGroupMonitoring
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceImsBridges != nil {
		in, out := &in.DynatraceImsBridges, &out.DynatraceImsBridges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceJiraNotification != nil {
		in, out := &in.DynatraceJiraNotification, &out.DynatraceJiraNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceK8SNamespaceAnomalies != nil {
		in, out := &in.DynatraceK8SNamespaceAnomalies, &out.DynatraceK8SNamespaceAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceKeyRequests != nil {
		in, out := &in.DynatraceKeyRequests, &out.DynatraceKeyRequests
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceLogMetrics != nil {
		in, out := &in.DynatraceLogMetrics, &out.DynatraceLogMetrics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMaintenance != nil {
		in, out := &in.DynatraceMaintenance, &out.DynatraceMaintenance
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceManagementZoneV2 != nil {
		in, out := &in.DynatraceManagementZoneV2, &out.DynatraceManagementZoneV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMetricEvents != nil {
		in, out := &in.DynatraceMetricEvents, &out.DynatraceMetricEvents
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileAppAnomalies != nil {
		in, out := &in.DynatraceMobileAppAnomalies, &out.DynatraceMobileAppAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileAppCrashRate != nil {
		in, out := &in.DynatraceMobileAppCrashRate, &out.DynatraceMobileAppCrashRate
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileAppEnablement != nil {
		in, out := &in.DynatraceMobileAppEnablement, &out.DynatraceMobileAppEnablement
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileApplication != nil {
		in, out := &in.DynatraceMobileApplication, &out.DynatraceMobileApplication
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesApache != nil {
		in, out := &in.DynatraceMonitoredTechnologiesApache, &out.DynatraceMonitoredTechnologiesApache
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesDotnet != nil {
		in, out := &in.DynatraceMonitoredTechnologiesDotnet, &out.DynatraceMonitoredTechnologiesDotnet
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesGo != nil {
		in, out := &in.DynatraceMonitoredTechnologiesGo, &out.DynatraceMonitoredTechnologiesGo
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesIis != nil {
		in, out := &in.DynatraceMonitoredTechnologiesIis, &out.DynatraceMonitoredTechnologiesIis
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesJava != nil {
		in, out := &in.DynatraceMonitoredTechnologiesJava, &out.DynatraceMonitoredTechnologiesJava
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesNginx != nil {
		in, out := &in.DynatraceMonitoredTechnologiesNginx, &out.DynatraceMonitoredTechnologiesNginx
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesNodeJS != nil {
		in, out := &in.DynatraceMonitoredTechnologiesNodeJS, &out.DynatraceMonitoredTechnologiesNodeJS
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesOpentracing != nil {
		in, out := &in.DynatraceMonitoredTechnologiesOpentracing, &out.DynatraceMonitoredTechnologiesOpentracing
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesPHP != nil {
		in, out := &in.DynatraceMonitoredTechnologiesPHP, &out.DynatraceMonitoredTechnologiesPHP
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesVarnish != nil {
		in, out := &in.DynatraceMonitoredTechnologiesVarnish, &out.DynatraceMonitoredTechnologiesVarnish
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesWsmb != nil {
		in, out := &in.DynatraceMonitoredTechnologiesWsmb, &out.DynatraceMonitoredTechnologiesWsmb
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMutedRequests != nil {
		in, out := &in.DynatraceMutedRequests, &out.DynatraceMutedRequests
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceNettracer != nil {
		in, out := &in.DynatraceNettracer, &out.DynatraceNettracer
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceOneagentFeatures != nil {
		in, out := &in.DynatraceOneagentFeatures, &out.DynatraceOneagentFeatures
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceOpsGenieNotification != nil {
		in, out := &in.DynatraceOpsGenieNotification, &out.DynatraceOpsGenieNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatracePagerDutyNotification != nil {
		in, out := &in.DynatracePagerDutyNotification, &out.DynatracePagerDutyNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatracePgAlerting != nil {
		in, out := &in.DynatracePgAlerting, &out.DynatracePgAlerting
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessAvailability != nil {
		in, out := &in.DynatraceProcessAvailability, &out.DynatraceProcessAvailability
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupDetection != nil {
		in, out := &in.DynatraceProcessGroupDetection, &out.DynatraceProcessGroupDetection
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupDetectionFlags != nil {
		in, out := &in.DynatraceProcessGroupDetectionFlags, &out.DynatraceProcessGroupDetectionFlags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupMonitoring != nil {
		in, out := &in.DynatraceProcessGroupMonitoring, &out.DynatraceProcessGroupMonitoring
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupRum != nil {
		in, out := &in.DynatraceProcessGroupRum, &out.DynatraceProcessGroupRum
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupSimpleDetection != nil {
		in, out := &in.DynatraceProcessGroupSimpleDetection, &out.DynatraceProcessGroupSimpleDetection
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessMonitoring != nil {
		in, out := &in.DynatraceProcessMonitoring, &out.DynatraceProcessMonitoring
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessMonitoringRule != nil {
		in, out := &in.DynatraceProcessMonitoringRule, &out.DynatraceProcessMonitoringRule
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessVisibility != nil {
		in, out := &in.DynatraceProcessVisibility, &out.DynatraceProcessVisibility
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessgroupNaming != nil {
		in, out := &in.DynatraceProcessgroupNaming, &out.DynatraceProcessgroupNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceQueueManager != nil {
		in, out := &in.DynatraceQueueManager, &out.DynatraceQueueManager
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceQueueSharingGroups != nil {
		in, out := &in.DynatraceQueueSharingGroups, &out.DynatraceQueueSharingGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRequestAttribute != nil {
		in, out := &in.DynatraceRequestAttribute, &out.DynatraceRequestAttribute
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRequestNaming != nil {
		in, out := &in.DynatraceRequestNaming, &out.DynatraceRequestNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRumAdvancedCorrelation != nil {
		in, out := &in.DynatraceRumAdvancedCorrelation, &out.DynatraceRumAdvancedCorrelation
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRumIPLocations != nil {
		in, out := &in.DynatraceRumIPLocations, &out.DynatraceRumIPLocations
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRumProviderBreakdown != nil {
		in, out := &in.DynatraceRumProviderBreakdown, &out.DynatraceRumProviderBreakdown
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSLOV2 != nil {
		in, out := &in.DynatraceSLOV2, &out.DynatraceSLOV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceFailure != nil {
		in, out := &in.DynatraceServiceFailure, &out.DynatraceServiceFailure
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceHTTPFailure != nil {
		in, out := &in.DynatraceServiceHTTPFailure, &out.DynatraceServiceHTTPFailure
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceNaming != nil {
		in, out := &in.DynatraceServiceNaming, &out.DynatraceServiceNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceNowNotification != nil {
		in, out := &in.DynatraceServiceNowNotification, &out.DynatraceServiceNowNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSessionReplayWebPrivacy != nil {
		in, out := &in.DynatraceSessionReplayWebPrivacy, &out.DynatraceSessionReplayWebPrivacy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSlackNotification != nil {
		in, out := &in.DynatraceSlackNotification, &out.DynatraceSlackNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSpanCaptureRule != nil {
		in, out := &in.DynatraceSpanCaptureRule, &out.DynatraceSpanCaptureRule
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSpanContextPropagation != nil {
		in, out := &in.DynatraceSpanContextPropagation, &out.DynatraceSpanContextPropagation
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSyntheticLocation != nil {
		in, out := &in.DynatraceSyntheticLocation, &out.DynatraceSyntheticLocation
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceTrelloNotification != nil {
		in, out := &in.DynatraceTrelloNotification, &out.DynatraceTrelloNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceUpdateWindows != nil {
		in, out := &in.DynatraceUpdateWindows, &out.DynatraceUpdateWindows
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceUsabilityAnalytics != nil {
		in, out := &in.DynatraceUsabilityAnalytics, &out.DynatraceUsabilityAnalytics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceVictorOpsNotification != nil {
		in, out := &in.DynatraceVictorOpsNotification, &out.DynatraceVictorOpsNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppAnomalies != nil {
		in, out := &in.DynatraceWebAppAnomalies, &out.DynatraceWebAppAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppBeaconOrigins != nil {
		in, out := &in.DynatraceWebAppBeaconOrigins, &out.DynatraceWebAppBeaconOrigins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppEnablement != nil {
		in, out := &in.DynatraceWebAppEnablement, &out.DynatraceWebAppEnablement
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppResourceCleanup != nil {
		in, out := &in.DynatraceWebAppResourceCleanup, &out.DynatraceWebAppResourceCleanup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppResourceTypes != nil {
		in, out := &in.DynatraceWebAppResourceTypes, &out.DynatraceWebAppResourceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebApplication != nil {
		in, out := &in.DynatraceWebApplication, &out.DynatraceWebApplication
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebhookNotification != nil {
		in, out := &in.DynatraceWebhookNotification, &out.DynatraceWebhookNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceXmattersNotification != nil {
		in, out := &in.DynatraceXmattersNotification, &out.DynatraceXmattersNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoldenStateObservation.
func (in *GoldenStateObservation) DeepCopy() *GoldenStateObservation {
	if in == nil {
		return nil
	}
	out := new(GoldenStateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoldenStateParameters) DeepCopyInto(out *GoldenStateParameters) {
	*out = *in
	if in.DynatraceAixExtension != nil {
		in, out := &in.DynatraceAixExtension, &out.DynatraceAixExtension
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAlerting != nil {
		in, out := &in.DynatraceAlerting, &out.DynatraceAlerting
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAnsibleTowerNotification != nil {
		in, out := &in.DynatraceAnsibleTowerNotification, &out.DynatraceAnsibleTowerNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceApplicationDetectionRule != nil {
		in, out := &in.DynatraceApplicationDetectionRule, &out.DynatraceApplicationDetectionRule
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceApplicationErrorRules != nil {
		in, out := &in.DynatraceApplicationErrorRules, &out.DynatraceApplicationErrorRules
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAutotagV2 != nil {
		in, out := &in.DynatraceAutotagV2, &out.DynatraceAutotagV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAwsCredentials != nil {
		in, out := &in.DynatraceAwsCredentials, &out.DynatraceAwsCredentials
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceAzureCredentials != nil {
		in, out := &in.DynatraceAzureCredentials, &out.DynatraceAzureCredentials
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceBrowserMonitor != nil {
		in, out := &in.DynatraceBrowserMonitor, &out.DynatraceBrowserMonitor
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedMobileMetric != nil {
		in, out := &in.DynatraceCalculatedMobileMetric, &out.DynatraceCalculatedMobileMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedServiceMetric != nil {
		in, out := &in.DynatraceCalculatedServiceMetric, &out.DynatraceCalculatedServiceMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedSyntheticMetric != nil {
		in, out := &in.DynatraceCalculatedSyntheticMetric, &out.DynatraceCalculatedSyntheticMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCalculatedWebMetric != nil {
		in, out := &in.DynatraceCalculatedWebMetric, &out.DynatraceCalculatedWebMetric
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCredentials != nil {
		in, out := &in.DynatraceCredentials, &out.DynatraceCredentials
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomAppAnomalies != nil {
		in, out := &in.DynatraceCustomAppAnomalies, &out.DynatraceCustomAppAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomAppCrashRate != nil {
		in, out := &in.DynatraceCustomAppCrashRate, &out.DynatraceCustomAppCrashRate
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomAppEnablement != nil {
		in, out := &in.DynatraceCustomAppEnablement, &out.DynatraceCustomAppEnablement
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceCustomService != nil {
		in, out := &in.DynatraceCustomService, &out.DynatraceCustomService
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDataPrivacy != nil {
		in, out := &in.DynatraceDataPrivacy, &out.DynatraceDataPrivacy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDatabaseAnomaliesV2 != nil {
		in, out := &in.DynatraceDatabaseAnomaliesV2, &out.DynatraceDatabaseAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDeclarativeGrouping != nil {
		in, out := &in.DynatraceDeclarativeGrouping, &out.DynatraceDeclarativeGrouping
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDiskAnomaliesV2 != nil {
		in, out := &in.DynatraceDiskAnomaliesV2, &out.DynatraceDiskAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDiskOptions != nil {
		in, out := &in.DynatraceDiskOptions, &out.DynatraceDiskOptions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceDiskSpecificAnomaliesV2 != nil {
		in, out := &in.DynatraceDiskSpecificAnomaliesV2, &out.DynatraceDiskSpecificAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceEmailNotification != nil {
		in, out := &in.DynatraceEmailNotification, &out.DynatraceEmailNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceExtensionExecutionController != nil {
		in, out := &in.DynatraceExtensionExecutionController, &out.DynatraceExtensionExecutionController
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceGenericTypes != nil {
		in, out := &in.DynatraceGenericTypes, &out.DynatraceGenericTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHTTPMonitor != nil {
		in, out := &in.DynatraceHTTPMonitor, &out.DynatraceHTTPMonitor
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHostAnomaliesV2 != nil {
		in, out := &in.DynatraceHostAnomaliesV2, &out.DynatraceHostAnomaliesV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHostNaming != nil {
		in, out := &in.DynatraceHostNaming, &out.DynatraceHostNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceHostProcessGroupMonitoring != nil {
		in, out := &in.DynatraceHostProcessGroupMonitoring, &out.DynatraceHostProcessGroupMonitoring
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceImsBridges != nil {
		in, out := &in.DynatraceImsBridges, &out.DynatraceImsBridges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceJiraNotification != nil {
		in, out := &in.DynatraceJiraNotification, &out.DynatraceJiraNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceK8SNamespaceAnomalies != nil {
		in, out := &in.DynatraceK8SNamespaceAnomalies, &out.DynatraceK8SNamespaceAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceKeyRequests != nil {
		in, out := &in.DynatraceKeyRequests, &out.DynatraceKeyRequests
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceLogMetrics != nil {
		in, out := &in.DynatraceLogMetrics, &out.DynatraceLogMetrics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMaintenance != nil {
		in, out := &in.DynatraceMaintenance, &out.DynatraceMaintenance
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceManagementZoneV2 != nil {
		in, out := &in.DynatraceManagementZoneV2, &out.DynatraceManagementZoneV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMetricEvents != nil {
		in, out := &in.DynatraceMetricEvents, &out.DynatraceMetricEvents
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileAppAnomalies != nil {
		in, out := &in.DynatraceMobileAppAnomalies, &out.DynatraceMobileAppAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileAppCrashRate != nil {
		in, out := &in.DynatraceMobileAppCrashRate, &out.DynatraceMobileAppCrashRate
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileAppEnablement != nil {
		in, out := &in.DynatraceMobileAppEnablement, &out.DynatraceMobileAppEnablement
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMobileApplication != nil {
		in, out := &in.DynatraceMobileApplication, &out.DynatraceMobileApplication
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesApache != nil {
		in, out := &in.DynatraceMonitoredTechnologiesApache, &out.DynatraceMonitoredTechnologiesApache
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesDotnet != nil {
		in, out := &in.DynatraceMonitoredTechnologiesDotnet, &out.DynatraceMonitoredTechnologiesDotnet
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesGo != nil {
		in, out := &in.DynatraceMonitoredTechnologiesGo, &out.DynatraceMonitoredTechnologiesGo
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesIis != nil {
		in, out := &in.DynatraceMonitoredTechnologiesIis, &out.DynatraceMonitoredTechnologiesIis
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesJava != nil {
		in, out := &in.DynatraceMonitoredTechnologiesJava, &out.DynatraceMonitoredTechnologiesJava
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesNginx != nil {
		in, out := &in.DynatraceMonitoredTechnologiesNginx, &out.DynatraceMonitoredTechnologiesNginx
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesNodeJS != nil {
		in, out := &in.DynatraceMonitoredTechnologiesNodeJS, &out.DynatraceMonitoredTechnologiesNodeJS
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesOpentracing != nil {
		in, out := &in.DynatraceMonitoredTechnologiesOpentracing, &out.DynatraceMonitoredTechnologiesOpentracing
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesPHP != nil {
		in, out := &in.DynatraceMonitoredTechnologiesPHP, &out.DynatraceMonitoredTechnologiesPHP
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesVarnish != nil {
		in, out := &in.DynatraceMonitoredTechnologiesVarnish, &out.DynatraceMonitoredTechnologiesVarnish
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMonitoredTechnologiesWsmb != nil {
		in, out := &in.DynatraceMonitoredTechnologiesWsmb, &out.DynatraceMonitoredTechnologiesWsmb
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceMutedRequests != nil {
		in, out := &in.DynatraceMutedRequests, &out.DynatraceMutedRequests
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceNettracer != nil {
		in, out := &in.DynatraceNettracer, &out.DynatraceNettracer
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceOneagentFeatures != nil {
		in, out := &in.DynatraceOneagentFeatures, &out.DynatraceOneagentFeatures
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceOpsGenieNotification != nil {
		in, out := &in.DynatraceOpsGenieNotification, &out.DynatraceOpsGenieNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatracePagerDutyNotification != nil {
		in, out := &in.DynatracePagerDutyNotification, &out.DynatracePagerDutyNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatracePgAlerting != nil {
		in, out := &in.DynatracePgAlerting, &out.DynatracePgAlerting
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessAvailability != nil {
		in, out := &in.DynatraceProcessAvailability, &out.DynatraceProcessAvailability
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupDetection != nil {
		in, out := &in.DynatraceProcessGroupDetection, &out.DynatraceProcessGroupDetection
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupDetectionFlags != nil {
		in, out := &in.DynatraceProcessGroupDetectionFlags, &out.DynatraceProcessGroupDetectionFlags
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupMonitoring != nil {
		in, out := &in.DynatraceProcessGroupMonitoring, &out.DynatraceProcessGroupMonitoring
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupRum != nil {
		in, out := &in.DynatraceProcessGroupRum, &out.DynatraceProcessGroupRum
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessGroupSimpleDetection != nil {
		in, out := &in.DynatraceProcessGroupSimpleDetection, &out.DynatraceProcessGroupSimpleDetection
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessMonitoring != nil {
		in, out := &in.DynatraceProcessMonitoring, &out.DynatraceProcessMonitoring
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessMonitoringRule != nil {
		in, out := &in.DynatraceProcessMonitoringRule, &out.DynatraceProcessMonitoringRule
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessVisibility != nil {
		in, out := &in.DynatraceProcessVisibility, &out.DynatraceProcessVisibility
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceProcessgroupNaming != nil {
		in, out := &in.DynatraceProcessgroupNaming, &out.DynatraceProcessgroupNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceQueueManager != nil {
		in, out := &in.DynatraceQueueManager, &out.DynatraceQueueManager
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceQueueSharingGroups != nil {
		in, out := &in.DynatraceQueueSharingGroups, &out.DynatraceQueueSharingGroups
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRequestAttribute != nil {
		in, out := &in.DynatraceRequestAttribute, &out.DynatraceRequestAttribute
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRequestNaming != nil {
		in, out := &in.DynatraceRequestNaming, &out.DynatraceRequestNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRumAdvancedCorrelation != nil {
		in, out := &in.DynatraceRumAdvancedCorrelation, &out.DynatraceRumAdvancedCorrelation
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRumIPLocations != nil {
		in, out := &in.DynatraceRumIPLocations, &out.DynatraceRumIPLocations
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceRumProviderBreakdown != nil {
		in, out := &in.DynatraceRumProviderBreakdown, &out.DynatraceRumProviderBreakdown
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSLOV2 != nil {
		in, out := &in.DynatraceSLOV2, &out.DynatraceSLOV2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceFailure != nil {
		in, out := &in.DynatraceServiceFailure, &out.DynatraceServiceFailure
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceHTTPFailure != nil {
		in, out := &in.DynatraceServiceHTTPFailure, &out.DynatraceServiceHTTPFailure
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceNaming != nil {
		in, out := &in.DynatraceServiceNaming, &out.DynatraceServiceNaming
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceServiceNowNotification != nil {
		in, out := &in.DynatraceServiceNowNotification, &out.DynatraceServiceNowNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSessionReplayWebPrivacy != nil {
		in, out := &in.DynatraceSessionReplayWebPrivacy, &out.DynatraceSessionReplayWebPrivacy
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSlackNotification != nil {
		in, out := &in.DynatraceSlackNotification, &out.DynatraceSlackNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSpanCaptureRule != nil {
		in, out := &in.DynatraceSpanCaptureRule, &out.DynatraceSpanCaptureRule
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSpanContextPropagation != nil {
		in, out := &in.DynatraceSpanContextPropagation, &out.DynatraceSpanContextPropagation
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceSyntheticLocation != nil {
		in, out := &in.DynatraceSyntheticLocation, &out.DynatraceSyntheticLocation
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceTrelloNotification != nil {
		in, out := &in.DynatraceTrelloNotification, &out.DynatraceTrelloNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceUpdateWindows != nil {
		in, out := &in.DynatraceUpdateWindows, &out.DynatraceUpdateWindows
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceUsabilityAnalytics != nil {
		in, out := &in.DynatraceUsabilityAnalytics, &out.DynatraceUsabilityAnalytics
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceVictorOpsNotification != nil {
		in, out := &in.DynatraceVictorOpsNotification, &out.DynatraceVictorOpsNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppAnomalies != nil {
		in, out := &in.DynatraceWebAppAnomalies, &out.DynatraceWebAppAnomalies
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppBeaconOrigins != nil {
		in, out := &in.DynatraceWebAppBeaconOrigins, &out.DynatraceWebAppBeaconOrigins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppEnablement != nil {
		in, out := &in.DynatraceWebAppEnablement, &out.DynatraceWebAppEnablement
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppResourceCleanup != nil {
		in, out := &in.DynatraceWebAppResourceCleanup, &out.DynatraceWebAppResourceCleanup
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebAppResourceTypes != nil {
		in, out := &in.DynatraceWebAppResourceTypes, &out.DynatraceWebAppResourceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebApplication != nil {
		in, out := &in.DynatraceWebApplication, &out.DynatraceWebApplication
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceWebhookNotification != nil {
		in, out := &in.DynatraceWebhookNotification, &out.DynatraceWebhookNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DynatraceXmattersNotification != nil {
		in, out := &in.DynatraceXmattersNotification, &out.DynatraceXmattersNotification
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoldenStateParameters.
func (in *GoldenStateParameters) DeepCopy() *GoldenStateParameters {
	if in == nil {
		return nil
	}
	out := new(GoldenStateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoldenStateSpec) DeepCopyInto(out *GoldenStateSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoldenStateSpec.
func (in *GoldenStateSpec) DeepCopy() *GoldenStateSpec {
	if in == nil {
		return nil
	}
	out := new(GoldenStateSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GoldenStateStatus) DeepCopyInto(out *GoldenStateStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GoldenStateStatus.
func (in *GoldenStateStatus) DeepCopy() *GoldenStateStatus {
	if in == nil {
		return nil
	}
	out := new(GoldenStateStatus)
	in.DeepCopyInto(out)
	return out
}
