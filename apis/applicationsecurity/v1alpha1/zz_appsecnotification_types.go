// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppsecNotificationInitParameters struct {

	// (String) For attack candidate alerts, select an alerting profile to control the delivery of security notifications related to this integration.
	// For attack candidate alerts, select an [alerting profile](/ui/settings/builtin:appsec.notification-attack-alerting-profile) to control the delivery of security notifications related to this integration.
	AttackCandidateBasedAlertingProfile *string `json:"attackCandidateBasedAlertingProfile,omitempty" tf:"attack_candidate_based_alerting_profile,omitempty"`

	// (Block List, Max: 1) Attack candidate based email payload, required when trigger equals ATTACK_CANDIDATE and type equals EMAIL (see below for nested schema)
	// Attack candidate based email payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `EMAIL`
	AttackCandidateBasedEmailPayload []AttackCandidateBasedEmailPayloadInitParameters `json:"attackCandidateBasedEmailPayload,omitempty" tf:"attack_candidate_based_email_payload,omitempty"`

	// (Block List, Max: 1) Attack candidate based Jira payload, required when trigger equals ATTACK_CANDIDATE and type equals JIRA (see below for nested schema)
	// Attack candidate based Jira payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `JIRA`
	AttackCandidateBasedJiraPayload []AttackCandidateBasedJiraPayloadInitParameters `json:"attackCandidateBasedJiraPayload,omitempty" tf:"attack_candidate_based_jira_payload,omitempty"`

	// (Block List, Max: 1) Attack candidate based webhook payload, required when trigger equals ATTACK_CANDIDATE and type equals WEBHOOK (see below for nested schema)
	// Attack candidate based webhook payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `WEBHOOK`
	AttackCandidateBasedWebhookPayload []AttackCandidateBasedWebhookPayloadInitParameters `json:"attackCandidateBasedWebhookPayload,omitempty" tf:"attack_candidate_based_webhook_payload,omitempty"`

	// (String) Display name of the security notification
	// Display name of the security notification
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Block List, Max: 1) Email configuration, required when type equals EMAIL (see below for nested schema)
	// Email configuration, required when `type` equals `EMAIL`
	EmailConfiguration []EmailConfigurationInitParameters `json:"emailConfiguration,omitempty" tf:"email_configuration,omitempty"`

	// (Boolean) Enable/Disable the security notification, enabled (true) or disabled (false)
	// Enable/Disable the security notification, enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Jira configuration, required when type equals JIRA (see below for nested schema)
	// Jira configuration, required when `type` equals `JIRA`
	JiraConfiguration []JiraConfigurationInitParameters `json:"jiraConfiguration,omitempty" tf:"jira_configuration,omitempty"`

	// (String) For security problem alerts, select an alerting profile to control the delivery of security notifications related to this integration.
	// For security problem alerts, select an [alerting profile](/ui/settings/builtin:appsec.notification-alerting-profile) to control the delivery of security notifications related to this integration.
	SecurityProblemBasedAlertingProfile *string `json:"securityProblemBasedAlertingProfile,omitempty" tf:"security_problem_based_alerting_profile,omitempty"`

	// (Block List, Max: 1) Security problem based email payload, required when trigger equals SECURITY_PROBLEM and type equals EMAIL (see below for nested schema)
	// Security problem based email payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `EMAIL`
	SecurityProblemBasedEmailPayload []SecurityProblemBasedEmailPayloadInitParameters `json:"securityProblemBasedEmailPayload,omitempty" tf:"security_problem_based_email_payload,omitempty"`

	// (Block List, Max: 1) Security problem based Jira payload, required when trigger equals SECURITY_PROBLEM and type equals JIRA (see below for nested schema)
	// Security problem based Jira payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `JIRA`
	SecurityProblemBasedJiraPayload []SecurityProblemBasedJiraPayloadInitParameters `json:"securityProblemBasedJiraPayload,omitempty" tf:"security_problem_based_jira_payload,omitempty"`

	// (Block List, Max: 1) Security problem based webhook payload, required when trigger equals SECURITY_PROBLEM and type equals WEBHOOK (see below for nested schema)
	// Security problem based webhook payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `WEBHOOK`
	SecurityProblemBasedWebhookPayload []SecurityProblemBasedWebhookPayloadInitParameters `json:"securityProblemBasedWebhookPayload,omitempty" tf:"security_problem_based_webhook_payload,omitempty"`

	// (String) Security alert type, possible Values: ATTACK_CANDIDATE, SECURITY_PROBLEM
	// Security alert type, possible Values: `ATTACK_CANDIDATE`, `SECURITY_PROBLEM`
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// (String) Notification type, possible Values: EMAIL, JIRA, WEBHOOK
	// Notification type, possible Values: `EMAIL`, `JIRA`, `WEBHOOK`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Block List, Max: 1) Webhook configuration, required when type equals WEBHOOK (see below for nested schema)
	// Webhook configuration, required when `type` equals `WEBHOOK`
	WebhookConfiguration []WebhookConfigurationInitParameters `json:"webhookConfiguration,omitempty" tf:"webhook_configuration,omitempty"`
}

type AppsecNotificationObservation struct {

	// (String) For attack candidate alerts, select an alerting profile to control the delivery of security notifications related to this integration.
	// For attack candidate alerts, select an [alerting profile](/ui/settings/builtin:appsec.notification-attack-alerting-profile) to control the delivery of security notifications related to this integration.
	AttackCandidateBasedAlertingProfile *string `json:"attackCandidateBasedAlertingProfile,omitempty" tf:"attack_candidate_based_alerting_profile,omitempty"`

	// (Block List, Max: 1) Attack candidate based email payload, required when trigger equals ATTACK_CANDIDATE and type equals EMAIL (see below for nested schema)
	// Attack candidate based email payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `EMAIL`
	AttackCandidateBasedEmailPayload []AttackCandidateBasedEmailPayloadObservation `json:"attackCandidateBasedEmailPayload,omitempty" tf:"attack_candidate_based_email_payload,omitempty"`

	// (Block List, Max: 1) Attack candidate based Jira payload, required when trigger equals ATTACK_CANDIDATE and type equals JIRA (see below for nested schema)
	// Attack candidate based Jira payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `JIRA`
	AttackCandidateBasedJiraPayload []AttackCandidateBasedJiraPayloadObservation `json:"attackCandidateBasedJiraPayload,omitempty" tf:"attack_candidate_based_jira_payload,omitempty"`

	// (Block List, Max: 1) Attack candidate based webhook payload, required when trigger equals ATTACK_CANDIDATE and type equals WEBHOOK (see below for nested schema)
	// Attack candidate based webhook payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `WEBHOOK`
	AttackCandidateBasedWebhookPayload []AttackCandidateBasedWebhookPayloadObservation `json:"attackCandidateBasedWebhookPayload,omitempty" tf:"attack_candidate_based_webhook_payload,omitempty"`

	// (String) Display name of the security notification
	// Display name of the security notification
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Block List, Max: 1) Email configuration, required when type equals EMAIL (see below for nested schema)
	// Email configuration, required when `type` equals `EMAIL`
	EmailConfiguration []EmailConfigurationObservation `json:"emailConfiguration,omitempty" tf:"email_configuration,omitempty"`

	// (Boolean) Enable/Disable the security notification, enabled (true) or disabled (false)
	// Enable/Disable the security notification, enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) Jira configuration, required when type equals JIRA (see below for nested schema)
	// Jira configuration, required when `type` equals `JIRA`
	JiraConfiguration []JiraConfigurationObservation `json:"jiraConfiguration,omitempty" tf:"jira_configuration,omitempty"`

	// (String) For security problem alerts, select an alerting profile to control the delivery of security notifications related to this integration.
	// For security problem alerts, select an [alerting profile](/ui/settings/builtin:appsec.notification-alerting-profile) to control the delivery of security notifications related to this integration.
	SecurityProblemBasedAlertingProfile *string `json:"securityProblemBasedAlertingProfile,omitempty" tf:"security_problem_based_alerting_profile,omitempty"`

	// (Block List, Max: 1) Security problem based email payload, required when trigger equals SECURITY_PROBLEM and type equals EMAIL (see below for nested schema)
	// Security problem based email payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `EMAIL`
	SecurityProblemBasedEmailPayload []SecurityProblemBasedEmailPayloadObservation `json:"securityProblemBasedEmailPayload,omitempty" tf:"security_problem_based_email_payload,omitempty"`

	// (Block List, Max: 1) Security problem based Jira payload, required when trigger equals SECURITY_PROBLEM and type equals JIRA (see below for nested schema)
	// Security problem based Jira payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `JIRA`
	SecurityProblemBasedJiraPayload []SecurityProblemBasedJiraPayloadObservation `json:"securityProblemBasedJiraPayload,omitempty" tf:"security_problem_based_jira_payload,omitempty"`

	// (Block List, Max: 1) Security problem based webhook payload, required when trigger equals SECURITY_PROBLEM and type equals WEBHOOK (see below for nested schema)
	// Security problem based webhook payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `WEBHOOK`
	SecurityProblemBasedWebhookPayload []SecurityProblemBasedWebhookPayloadObservation `json:"securityProblemBasedWebhookPayload,omitempty" tf:"security_problem_based_webhook_payload,omitempty"`

	// (String) Security alert type, possible Values: ATTACK_CANDIDATE, SECURITY_PROBLEM
	// Security alert type, possible Values: `ATTACK_CANDIDATE`, `SECURITY_PROBLEM`
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// (String) Notification type, possible Values: EMAIL, JIRA, WEBHOOK
	// Notification type, possible Values: `EMAIL`, `JIRA`, `WEBHOOK`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Block List, Max: 1) Webhook configuration, required when type equals WEBHOOK (see below for nested schema)
	// Webhook configuration, required when `type` equals `WEBHOOK`
	WebhookConfiguration []WebhookConfigurationObservation `json:"webhookConfiguration,omitempty" tf:"webhook_configuration,omitempty"`
}

type AppsecNotificationParameters struct {

	// (String) For attack candidate alerts, select an alerting profile to control the delivery of security notifications related to this integration.
	// For attack candidate alerts, select an [alerting profile](/ui/settings/builtin:appsec.notification-attack-alerting-profile) to control the delivery of security notifications related to this integration.
	// +kubebuilder:validation:Optional
	AttackCandidateBasedAlertingProfile *string `json:"attackCandidateBasedAlertingProfile,omitempty" tf:"attack_candidate_based_alerting_profile,omitempty"`

	// (Block List, Max: 1) Attack candidate based email payload, required when trigger equals ATTACK_CANDIDATE and type equals EMAIL (see below for nested schema)
	// Attack candidate based email payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `EMAIL`
	// +kubebuilder:validation:Optional
	AttackCandidateBasedEmailPayload []AttackCandidateBasedEmailPayloadParameters `json:"attackCandidateBasedEmailPayload,omitempty" tf:"attack_candidate_based_email_payload,omitempty"`

	// (Block List, Max: 1) Attack candidate based Jira payload, required when trigger equals ATTACK_CANDIDATE and type equals JIRA (see below for nested schema)
	// Attack candidate based Jira payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `JIRA`
	// +kubebuilder:validation:Optional
	AttackCandidateBasedJiraPayload []AttackCandidateBasedJiraPayloadParameters `json:"attackCandidateBasedJiraPayload,omitempty" tf:"attack_candidate_based_jira_payload,omitempty"`

	// (Block List, Max: 1) Attack candidate based webhook payload, required when trigger equals ATTACK_CANDIDATE and type equals WEBHOOK (see below for nested schema)
	// Attack candidate based webhook payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `WEBHOOK`
	// +kubebuilder:validation:Optional
	AttackCandidateBasedWebhookPayload []AttackCandidateBasedWebhookPayloadParameters `json:"attackCandidateBasedWebhookPayload,omitempty" tf:"attack_candidate_based_webhook_payload,omitempty"`

	// (String) Display name of the security notification
	// Display name of the security notification
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Block List, Max: 1) Email configuration, required when type equals EMAIL (see below for nested schema)
	// Email configuration, required when `type` equals `EMAIL`
	// +kubebuilder:validation:Optional
	EmailConfiguration []EmailConfigurationParameters `json:"emailConfiguration,omitempty" tf:"email_configuration,omitempty"`

	// (Boolean) Enable/Disable the security notification, enabled (true) or disabled (false)
	// Enable/Disable the security notification, enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Jira configuration, required when type equals JIRA (see below for nested schema)
	// Jira configuration, required when `type` equals `JIRA`
	// +kubebuilder:validation:Optional
	JiraConfiguration []JiraConfigurationParameters `json:"jiraConfiguration,omitempty" tf:"jira_configuration,omitempty"`

	// (String) For security problem alerts, select an alerting profile to control the delivery of security notifications related to this integration.
	// For security problem alerts, select an [alerting profile](/ui/settings/builtin:appsec.notification-alerting-profile) to control the delivery of security notifications related to this integration.
	// +kubebuilder:validation:Optional
	SecurityProblemBasedAlertingProfile *string `json:"securityProblemBasedAlertingProfile,omitempty" tf:"security_problem_based_alerting_profile,omitempty"`

	// (Block List, Max: 1) Security problem based email payload, required when trigger equals SECURITY_PROBLEM and type equals EMAIL (see below for nested schema)
	// Security problem based email payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `EMAIL`
	// +kubebuilder:validation:Optional
	SecurityProblemBasedEmailPayload []SecurityProblemBasedEmailPayloadParameters `json:"securityProblemBasedEmailPayload,omitempty" tf:"security_problem_based_email_payload,omitempty"`

	// (Block List, Max: 1) Security problem based Jira payload, required when trigger equals SECURITY_PROBLEM and type equals JIRA (see below for nested schema)
	// Security problem based Jira payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `JIRA`
	// +kubebuilder:validation:Optional
	SecurityProblemBasedJiraPayload []SecurityProblemBasedJiraPayloadParameters `json:"securityProblemBasedJiraPayload,omitempty" tf:"security_problem_based_jira_payload,omitempty"`

	// (Block List, Max: 1) Security problem based webhook payload, required when trigger equals SECURITY_PROBLEM and type equals WEBHOOK (see below for nested schema)
	// Security problem based webhook payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `WEBHOOK`
	// +kubebuilder:validation:Optional
	SecurityProblemBasedWebhookPayload []SecurityProblemBasedWebhookPayloadParameters `json:"securityProblemBasedWebhookPayload,omitempty" tf:"security_problem_based_webhook_payload,omitempty"`

	// (String) Security alert type, possible Values: ATTACK_CANDIDATE, SECURITY_PROBLEM
	// Security alert type, possible Values: `ATTACK_CANDIDATE`, `SECURITY_PROBLEM`
	// +kubebuilder:validation:Optional
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// (String) Notification type, possible Values: EMAIL, JIRA, WEBHOOK
	// Notification type, possible Values: `EMAIL`, `JIRA`, `WEBHOOK`
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Block List, Max: 1) Webhook configuration, required when type equals WEBHOOK (see below for nested schema)
	// Webhook configuration, required when `type` equals `WEBHOOK`
	// +kubebuilder:validation:Optional
	WebhookConfiguration []WebhookConfigurationParameters `json:"webhookConfiguration,omitempty" tf:"webhook_configuration,omitempty"`
}

type AttackCandidateBasedEmailPayloadInitParameters struct {

	// (String) The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the body might leak information to untrusted parties.
	// The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the body might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// 1234".
	// {Title}: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// {Type}: The type of attack, for example: "SQL Injection".
	// {AttackUrl}: URL of the attack in Dynatrace.
	// {ProcessGroupId}: Details about the process group attacked.
	// {EntryPoint}: The entry point of the attack into the process, for example: "/login". Can be empty.
	// {Status}: The status of the attack, for example: "Exploited"
	// {Timestamp}: When the attack happened.
	// {VulnerabilityName}: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// The subject of the email notifications.. Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example, "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type AttackCandidateBasedEmailPayloadObservation struct {

	// (String) The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the body might leak information to untrusted parties.
	// The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the body might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// 1234".
	// {Title}: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// {Type}: The type of attack, for example: "SQL Injection".
	// {AttackUrl}: URL of the attack in Dynatrace.
	// {ProcessGroupId}: Details about the process group attacked.
	// {EntryPoint}: The entry point of the attack into the process, for example: "/login". Can be empty.
	// {Status}: The status of the attack, for example: "Exploited"
	// {Timestamp}: When the attack happened.
	// {VulnerabilityName}: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// The subject of the email notifications.. Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example, "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type AttackCandidateBasedEmailPayloadParameters struct {

	// (String) The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the body might leak information to untrusted parties.
	// The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the body might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// +kubebuilder:validation:Optional
	Body *string `json:"body" tf:"body,omitempty"`

	// 1234".
	// {Title}: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// {Type}: The type of attack, for example: "SQL Injection".
	// {AttackUrl}: URL of the attack in Dynatrace.
	// {ProcessGroupId}: Details about the process group attacked.
	// {EntryPoint}: The entry point of the attack into the process, for example: "/login". Can be empty.
	// {Status}: The status of the attack, for example: "Exploited"
	// {Timestamp}: When the attack happened.
	// {VulnerabilityName}: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// The subject of the email notifications.. Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example, "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// +kubebuilder:validation:Optional
	Subject *string `json:"subject" tf:"subject,omitempty"`
}

type AttackCandidateBasedJiraPayloadInitParameters struct {

	// (String) The description of the Jira issue to be created by this notification.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	// The description of the Jira issue to be created by this notification.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The summary of the Jira issue to be created by this notification.. Note: The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	// The summary of the Jira issue to be created by this notification.. **Note:** The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example, "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`
}

type AttackCandidateBasedJiraPayloadObservation struct {

	// (String) The description of the Jira issue to be created by this notification.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	// The description of the Jira issue to be created by this notification.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The summary of the Jira issue to be created by this notification.. Note: The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	// The summary of the Jira issue to be created by this notification.. **Note:** The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example, "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`
}

type AttackCandidateBasedJiraPayloadParameters struct {

	// (String) The description of the Jira issue to be created by this notification.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	// The description of the Jira issue to be created by this notification.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// +kubebuilder:validation:Optional
	Description *string `json:"description" tf:"description,omitempty"`

	// (String) The summary of the Jira issue to be created by this notification.. Note: The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	// The summary of the Jira issue to be created by this notification.. **Note:** The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example, "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// +kubebuilder:validation:Optional
	Summary *string `json:"summary" tf:"summary,omitempty"`
}

type AttackCandidateBasedWebhookPayloadInitParameters struct {

	// (String) This is the content your notification message will include when users view it.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	// This is the content your notification message will include when users view it.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`
}

type AttackCandidateBasedWebhookPayloadObservation struct {

	// (String) This is the content your notification message will include when users view it.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	// This is the content your notification message will include when users view it.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`
}

type AttackCandidateBasedWebhookPayloadParameters struct {

	// (String) This is the content your notification message will include when users view it.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	// This is the content your notification message will include when users view it.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{AttackDisplayId}**: The unique identifier assigned by Dynatrace, for example: "A-1234".
	// **{Title}**: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// **{Type}**: The type of attack, for example: "SQL Injection".
	// **{AttackUrl}**: URL of the attack in Dynatrace.
	// **{ProcessGroupId}**: Details about the process group attacked.
	// **{EntryPoint}**: The entry point of the attack into the process, for example: "/login". Can be empty.
	// **{Status}**: The status of the attack, for example: "Exploited"
	// **{Timestamp}**: When the attack happened.
	// **{VulnerabilityName}**: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// +kubebuilder:validation:Optional
	Payload *string `json:"payload" tf:"payload,omitempty"`
}

type EmailConfigurationInitParameters struct {

	// (Set of String) BCC
	// BCC
	// +listType=set
	BccRecipients []*string `json:"bccRecipients,omitempty" tf:"bcc_recipients,omitempty"`

	// (Set of String) CC
	// CC
	// +listType=set
	CcRecipients []*string `json:"ccRecipients,omitempty" tf:"cc_recipients,omitempty"`

	// (Set of String) To
	// To
	// +listType=set
	Recipients []*string `json:"recipients,omitempty" tf:"recipients,omitempty"`
}

type EmailConfigurationObservation struct {

	// (Set of String) BCC
	// BCC
	// +listType=set
	BccRecipients []*string `json:"bccRecipients,omitempty" tf:"bcc_recipients,omitempty"`

	// (Set of String) CC
	// CC
	// +listType=set
	CcRecipients []*string `json:"ccRecipients,omitempty" tf:"cc_recipients,omitempty"`

	// (Set of String) To
	// To
	// +listType=set
	Recipients []*string `json:"recipients,omitempty" tf:"recipients,omitempty"`
}

type EmailConfigurationParameters struct {

	// (Set of String) BCC
	// BCC
	// +kubebuilder:validation:Optional
	// +listType=set
	BccRecipients []*string `json:"bccRecipients,omitempty" tf:"bcc_recipients,omitempty"`

	// (Set of String) CC
	// CC
	// +kubebuilder:validation:Optional
	// +listType=set
	CcRecipients []*string `json:"ccRecipients,omitempty" tf:"cc_recipients,omitempty"`

	// (Set of String) To
	// To
	// +kubebuilder:validation:Optional
	// +listType=set
	Recipients []*string `json:"recipients" tf:"recipients,omitempty"`
}

type HeaderInitParameters struct {

	// (String) no documentation available
	// no documentation available
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Secret HTTP header value
	// Secret HTTP header value
	Secret *bool `json:"secret,omitempty" tf:"secret,omitempty"`

	// (String, Sensitive) The secret value of the HTTP header. May contain an empty value.
	// The secret value of the HTTP header. May contain an empty value.
	SecretValueSecretRef *v1.SecretKeySelector `json:"secretValueSecretRef,omitempty" tf:"-"`

	// (String) The value of the HTTP header. May contain an empty value.
	// The value of the HTTP header. May contain an empty value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderObservation struct {

	// (String) no documentation available
	// no documentation available
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Secret HTTP header value
	// Secret HTTP header value
	Secret *bool `json:"secret,omitempty" tf:"secret,omitempty"`

	// (String) The value of the HTTP header. May contain an empty value.
	// The value of the HTTP header. May contain an empty value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderParameters struct {

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Boolean) Secret HTTP header value
	// Secret HTTP header value
	// +kubebuilder:validation:Optional
	Secret *bool `json:"secret" tf:"secret,omitempty"`

	// (String, Sensitive) The secret value of the HTTP header. May contain an empty value.
	// The secret value of the HTTP header. May contain an empty value.
	// +kubebuilder:validation:Optional
	SecretValueSecretRef *v1.SecretKeySelector `json:"secretValueSecretRef,omitempty" tf:"-"`

	// (String) The value of the HTTP header. May contain an empty value.
	// The value of the HTTP header. May contain an empty value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeadersInitParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Header []HeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`
}

type HeadersObservation struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Header []HeaderObservation `json:"header,omitempty" tf:"header,omitempty"`
}

type HeadersParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Header []HeaderParameters `json:"header" tf:"header,omitempty"`
}

type JiraConfigurationInitParameters struct {

	// (String, Sensitive) The API token for the Jira profile. Using password authentication was deprecated by Jira
	// The API token for the Jira profile. Using password authentication [was deprecated by Jira](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-basic-auth-and-cookie-based-auth/)
	APITokenSecretRef v1.SecretKeySelector `json:"apiTokenSecretRef" tf:"-"`

	// (String) The type of the Jira issue to be created by this notification.
	// The type of the Jira issue to be created by this notification.
	//
	// To find all available issue types or create your own, in Jira, go to Project settings > Issue types.
	IssueType *string `json:"issueType,omitempty" tf:"issue_type,omitempty"`

	// (String) The project key of the Jira issue to be created by this notification.
	// The project key of the Jira issue to be created by this notification.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) The URL of the Jira API endpoint.
	// The URL of the Jira API endpoint.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) The username of the Jira profile.
	// The username of the Jira profile.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type JiraConfigurationObservation struct {

	// (String) The type of the Jira issue to be created by this notification.
	// The type of the Jira issue to be created by this notification.
	//
	// To find all available issue types or create your own, in Jira, go to Project settings > Issue types.
	IssueType *string `json:"issueType,omitempty" tf:"issue_type,omitempty"`

	// (String) The project key of the Jira issue to be created by this notification.
	// The project key of the Jira issue to be created by this notification.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (String) The URL of the Jira API endpoint.
	// The URL of the Jira API endpoint.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) The username of the Jira profile.
	// The username of the Jira profile.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type JiraConfigurationParameters struct {

	// (String, Sensitive) The API token for the Jira profile. Using password authentication was deprecated by Jira
	// The API token for the Jira profile. Using password authentication [was deprecated by Jira](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-basic-auth-and-cookie-based-auth/)
	// +kubebuilder:validation:Optional
	APITokenSecretRef v1.SecretKeySelector `json:"apiTokenSecretRef" tf:"-"`

	// (String) The type of the Jira issue to be created by this notification.
	// The type of the Jira issue to be created by this notification.
	//
	// To find all available issue types or create your own, in Jira, go to Project settings > Issue types.
	// +kubebuilder:validation:Optional
	IssueType *string `json:"issueType" tf:"issue_type,omitempty"`

	// (String) The project key of the Jira issue to be created by this notification.
	// The project key of the Jira issue to be created by this notification.
	// +kubebuilder:validation:Optional
	ProjectKey *string `json:"projectKey" tf:"project_key,omitempty"`

	// (String) The URL of the Jira API endpoint.
	// The URL of the Jira API endpoint.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// (String) The username of the Jira profile.
	// The username of the Jira profile.
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`
}

type SecurityProblemBasedEmailPayloadInitParameters struct {

	// (String) The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the body might leak information to untrusted parties.
	// The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{Description}**: A more detailed description of the vulnerability.
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.
	// **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.
	// **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// 1234".
	// {Title}: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// {Type}: The type of attack, for example: "SQL Injection".
	// {AttackUrl}: URL of the attack in Dynatrace.
	// {ProcessGroupId}: Details about the process group attacked.
	// {EntryPoint}: The entry point of the attack into the process, for example: "/login". Can be empty.
	// {Status}: The status of the attack, for example: "Exploited"
	// {Timestamp}: When the attack happened.
	// {VulnerabilityName}: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// The subject of the email notifications.. Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type SecurityProblemBasedEmailPayloadObservation struct {

	// (String) The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the body might leak information to untrusted parties.
	// The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{Description}**: A more detailed description of the vulnerability.
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.
	// **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.
	// **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// 1234".
	// {Title}: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// {Type}: The type of attack, for example: "SQL Injection".
	// {AttackUrl}: URL of the attack in Dynatrace.
	// {ProcessGroupId}: Details about the process group attacked.
	// {EntryPoint}: The entry point of the attack into the process, for example: "/login". Can be empty.
	// {Status}: The status of the attack, for example: "Exploited"
	// {Timestamp}: When the attack happened.
	// {VulnerabilityName}: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// The subject of the email notifications.. Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`
}

type SecurityProblemBasedEmailPayloadParameters struct {

	// (String) The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the body might leak information to untrusted parties.
	// The template of the email notifications.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{Description}**: A more detailed description of the vulnerability.
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.
	// **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.
	// **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	// +kubebuilder:validation:Optional
	Body *string `json:"body" tf:"body,omitempty"`

	// 1234".
	// {Title}: Location of the attack, for example: "com.dynatrace.Class.method():120"
	// {Type}: The type of attack, for example: "SQL Injection".
	// {AttackUrl}: URL of the attack in Dynatrace.
	// {ProcessGroupId}: Details about the process group attacked.
	// {EntryPoint}: The entry point of the attack into the process, for example: "/login". Can be empty.
	// {Status}: The status of the attack, for example: "Exploited"
	// {Timestamp}: When the attack happened.
	// {VulnerabilityName}: Name of the associated code-level vulnerability, for example: "InMemoryDatabaseCaller.getAccountInfo():51". Can be empty.
	// The subject of the email notifications.. Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	// +kubebuilder:validation:Optional
	Subject *string `json:"subject" tf:"subject,omitempty"`
}

type SecurityProblemBasedJiraPayloadInitParameters struct {

	// (String) The description of the Jira issue to be created by this notification.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	// The description of the Jira issue to be created by this notification.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{Description}**: A more detailed description of the vulnerability.
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.
	// **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.
	// **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The summary of the Jira issue to be created by this notification.. Note: The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	// The summary of the Jira issue to be created by this notification.. **Note:** The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`
}

type SecurityProblemBasedJiraPayloadObservation struct {

	// (String) The description of the Jira issue to be created by this notification.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	// The description of the Jira issue to be created by this notification.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{Description}**: A more detailed description of the vulnerability.
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.
	// **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.
	// **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The summary of the Jira issue to be created by this notification.. Note: The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	// The summary of the Jira issue to be created by this notification.. **Note:** The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`
}

type SecurityProblemBasedJiraPayloadParameters struct {

	// (String) The description of the Jira issue to be created by this notification.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	// The description of the Jira issue to be created by this notification.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the description might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{Description}**: A more detailed description of the vulnerability.
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.
	// **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.
	// **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	// +kubebuilder:validation:Optional
	Description *string `json:"description" tf:"description,omitempty"`

	// (String) The summary of the Jira issue to be created by this notification.. Note: The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	// The summary of the Jira issue to be created by this notification.. **Note:** The Jira summary field must contain less than 255 characters. Any content exceeding this limit after evaluating the placeholders will be discarded.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	// +kubebuilder:validation:Optional
	Summary *string `json:"summary" tf:"summary,omitempty"`
}

type SecurityProblemBasedWebhookPayloadInitParameters struct {

	// (String) This is the content your notification message will include when users view it.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	// This is the content your notification message will include when users view it.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{Description}**: A more detailed description of the vulnerability.
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.
	// **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.
	// **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`
}

type SecurityProblemBasedWebhookPayloadObservation struct {

	// (String) This is the content your notification message will include when users view it.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	// This is the content your notification message will include when users view it.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{Description}**: A more detailed description of the vulnerability.
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.
	// **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.
	// **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`
}

type SecurityProblemBasedWebhookPayloadParameters struct {

	// (String) This is the content your notification message will include when users view it.
	// In case a value of an attack is not set, the placeholder will be replaced by an empty string.. Note: Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	// This is the content your notification message will include when users view it.
	// In case a value of a security problem is not set, the placeholder will be replaced by an empty string.. **Note:** Security notifications contain sensitive information. Excessive usage of placeholders in the custom payload might leak information to untrusted parties.
	//
	// Available placeholders:
	// **{SecurityProblemId}**: The unique identifier assigned by Dynatrace, for example, "S-1234".
	// **{Title}**: A short summary of the type of vulnerability that was found, for example, "Remote Code Execution".
	// **{Description}**: A more detailed description of the vulnerability.
	// **{CvssScore}**: CVSS score of the identified vulnerability, for example, "10.0". Can be empty.
	// **{DavisSecurityScore}**: [Davis Security Score](https://www.dynatrace.com/support/help/how-to-use-dynatrace/application-security/davis-security-score/) is an enhanced risk-calculation score based on the CVSS, for example, "10.0".
	// **{Severity}**: The security problem severity, for example, "Critical" or "Medium".
	// **{SecurityProblemUrl}**: URL of the security problem in Dynatrace.
	// **{AffectedEntities}**: Details about the entities affected by the security problem in a json array.
	// **{ManagementZones}**: Comma-separated list of all management zones affected by the vulnerability at the time of detection.
	// **{Tags}**: Comma-separated list of tags that are defined for a vulnerability's affected entities. For example: "PROD, owner:John". Assign the tag's key in square brackets: **{Tags[key]}** to get all associated values. For example: "{Tags[owner]}" will be resolved as "John". Tags without an assigned value will be resolved as empty string.
	// **{Exposed}**: Describes whether one or more affected process is exposed to the public Internet. Can be "true" or "false".
	// **{DataAssetsReachable}**: Describes whether one or more affected process can reach data assets. Can be "true" or "false".
	// **{ExploitAvailable}**: Describes whether there's an exploit available for the vulnerability. Can be "true" or "false".
	// +kubebuilder:validation:Optional
	Payload *string `json:"payload" tf:"payload,omitempty"`
}

type WebhookConfigurationInitParameters struct {

	// signed and invalid certificates)
	// Accept any SSL certificate (including self-signed and invalid certificates)
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// (Block List, Max: 1) Use additional HTTP headers to attach any additional information, for example, configuration, authorization, or metadata.
	// Use additional HTTP headers to attach any additional information, for example, configuration, authorization, or metadata.
	//
	// Note that JSON-based webhook endpoints require the addition of the **Content-Type: application/json** header to enable escaping of special characters and to avoid malformed JSON content.
	Headers []HeadersInitParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) The URL of the Jira API endpoint.
	// Webhook endpoint URL
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type WebhookConfigurationObservation struct {

	// signed and invalid certificates)
	// Accept any SSL certificate (including self-signed and invalid certificates)
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// (Block List, Max: 1) Use additional HTTP headers to attach any additional information, for example, configuration, authorization, or metadata.
	// Use additional HTTP headers to attach any additional information, for example, configuration, authorization, or metadata.
	//
	// Note that JSON-based webhook endpoints require the addition of the **Content-Type: application/json** header to enable escaping of special characters and to avoid malformed JSON content.
	Headers []HeadersObservation `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) The URL of the Jira API endpoint.
	// Webhook endpoint URL
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type WebhookConfigurationParameters struct {

	// signed and invalid certificates)
	// Accept any SSL certificate (including self-signed and invalid certificates)
	// +kubebuilder:validation:Optional
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate" tf:"accept_any_certificate,omitempty"`

	// (Block List, Max: 1) Use additional HTTP headers to attach any additional information, for example, configuration, authorization, or metadata.
	// Use additional HTTP headers to attach any additional information, for example, configuration, authorization, or metadata.
	//
	// Note that JSON-based webhook endpoints require the addition of the **Content-Type: application/json** header to enable escaping of special characters and to avoid malformed JSON content.
	// +kubebuilder:validation:Optional
	Headers []HeadersParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) The URL of the Jira API endpoint.
	// Webhook endpoint URL
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`
}

// AppsecNotificationSpec defines the desired state of AppsecNotification
type AppsecNotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppsecNotificationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AppsecNotificationInitParameters `json:"initProvider,omitempty"`
}

// AppsecNotificationStatus defines the observed state of AppsecNotification.
type AppsecNotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppsecNotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AppsecNotification is the Schema for the AppsecNotifications API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type AppsecNotification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.trigger) || (has(self.initProvider) && has(self.initProvider.trigger))",message="spec.forProvider.trigger is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   AppsecNotificationSpec   `json:"spec"`
	Status AppsecNotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppsecNotificationList contains a list of AppsecNotifications
type AppsecNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppsecNotification `json:"items"`
}

// Repository type metadata.
var (
	AppsecNotification_Kind             = "AppsecNotification"
	AppsecNotification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppsecNotification_Kind}.String()
	AppsecNotification_KindAPIVersion   = AppsecNotification_Kind + "." + CRDGroupVersion.String()
	AppsecNotification_GroupVersionKind = CRDGroupVersion.WithKind(AppsecNotification_Kind)
)

func init() {
	SchemeBuilder.Register(&AppsecNotification{}, &AppsecNotificationList{})
}
