// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResourceAttributeConditionsResourceAttributeConditionInitParameters struct {

	// (String) Possible Values: CONTAINS, DOES_NOT_CONTAIN, DOES_NOT_END_WITH, DOES_NOT_EXIST, DOES_NOT_START_WITH, ENDS_WITH, EQUALS, EXISTS, NOT_EQUALS, STARTS_WITH
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
	Matcher *string `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// (String) Resource attribute key
	// Resource attribute key
	ResourceAttributeKey *string `json:"resourceAttributeKey,omitempty" tf:"resource_attribute_key,omitempty"`

	// (String) Resource attribute value
	// Resource attribute value
	ResourceAttributeValue *string `json:"resourceAttributeValue,omitempty" tf:"resource_attribute_value,omitempty"`
}

type ResourceAttributeConditionsResourceAttributeConditionObservation struct {

	// (String) Possible Values: CONTAINS, DOES_NOT_CONTAIN, DOES_NOT_END_WITH, DOES_NOT_EXIST, DOES_NOT_START_WITH, ENDS_WITH, EQUALS, EXISTS, NOT_EQUALS, STARTS_WITH
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
	Matcher *string `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// (String) Resource attribute key
	// Resource attribute key
	ResourceAttributeKey *string `json:"resourceAttributeKey,omitempty" tf:"resource_attribute_key,omitempty"`

	// (String) Resource attribute value
	// Resource attribute value
	ResourceAttributeValue *string `json:"resourceAttributeValue,omitempty" tf:"resource_attribute_value,omitempty"`
}

type ResourceAttributeConditionsResourceAttributeConditionParameters struct {

	// (String) Possible Values: CONTAINS, DOES_NOT_CONTAIN, DOES_NOT_END_WITH, DOES_NOT_EXIST, DOES_NOT_START_WITH, ENDS_WITH, EQUALS, EXISTS, NOT_EQUALS, STARTS_WITH
	// Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
	// +kubebuilder:validation:Optional
	Matcher *string `json:"matcher" tf:"matcher,omitempty"`

	// (String) Resource attribute key
	// Resource attribute key
	// +kubebuilder:validation:Optional
	ResourceAttributeKey *string `json:"resourceAttributeKey" tf:"resource_attribute_key,omitempty"`

	// (String) Resource attribute value
	// Resource attribute value
	// +kubebuilder:validation:Optional
	ResourceAttributeValue *string `json:"resourceAttributeValue,omitempty" tf:"resource_attribute_value,omitempty"`
}

type VulnerabilityCodeCriteriaInitParameters struct {

	// (String) Process group
	// Process group
	ProcessGroup *string `json:"processGroup,omitempty" tf:"process_group,omitempty"`
}

type VulnerabilityCodeCriteriaObservation struct {

	// (String) Process group
	// Process group
	ProcessGroup *string `json:"processGroup,omitempty" tf:"process_group,omitempty"`
}

type VulnerabilityCodeCriteriaParameters struct {

	// (String) Process group
	// Process group
	// +kubebuilder:validation:Optional
	ProcessGroup *string `json:"processGroup,omitempty" tf:"process_group,omitempty"`
}

type VulnerabilityCodeInitParameters struct {

	// (Block List, Max: 1, Deprecated) Define criteria (see below for nested schema)
	// Define criteria
	Criteria []VulnerabilityCodeCriteriaInitParameters `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (Block List, Min: 1, Max: 1) Step 3: Leave comment  (see below for nested schema)
	// Step 3: Leave comment (optional)
	Metadata []VulnerabilityCodeMetadataInitParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Block List, Max: 1) If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
	// If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
	//
	// We provide suggestions for resource attribute keys and values based on what we currently see in your environment. You can also enter any value not currently seen in the list. Resource attributes come out of the box from the OneAgent, and you can set them up from [data enrichment](https://docs.dynatrace.com/docs/extend-dynatrace/extend-data).
	ResourceAttributeConditions []VulnerabilityCodeResourceAttributeConditionsInitParameters `json:"resourceAttributeConditions,omitempty" tf:"resource_attribute_conditions,omitempty"`

	// (String) Rule name
	// Rule name
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// level vulnerability detection behavior (see below for nested schema)
	// Step 1: Select code-level vulnerability detection behavior
	VulnerabilityDetectionControl []VulnerabilityDetectionControlInitParameters `json:"vulnerabilityDetectionControl,omitempty" tf:"vulnerability_detection_control,omitempty"`
}

type VulnerabilityCodeMetadataInitParameters struct {

	// (String) no documentation available
	// no documentation available
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`
}

type VulnerabilityCodeMetadataObservation struct {

	// (String) no documentation available
	// no documentation available
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`
}

type VulnerabilityCodeMetadataParameters struct {

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment" tf:"comment,omitempty"`
}

type VulnerabilityCodeObservation struct {

	// (Block List, Max: 1, Deprecated) Define criteria (see below for nested schema)
	// Define criteria
	Criteria []VulnerabilityCodeCriteriaObservation `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (Block List, Min: 1, Max: 1) Step 3: Leave comment  (see below for nested schema)
	// Step 3: Leave comment (optional)
	Metadata []VulnerabilityCodeMetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Block List, Max: 1) If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
	// If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
	//
	// We provide suggestions for resource attribute keys and values based on what we currently see in your environment. You can also enter any value not currently seen in the list. Resource attributes come out of the box from the OneAgent, and you can set them up from [data enrichment](https://docs.dynatrace.com/docs/extend-dynatrace/extend-data).
	ResourceAttributeConditions []VulnerabilityCodeResourceAttributeConditionsObservation `json:"resourceAttributeConditions,omitempty" tf:"resource_attribute_conditions,omitempty"`

	// (String) Rule name
	// Rule name
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// level vulnerability detection behavior (see below for nested schema)
	// Step 1: Select code-level vulnerability detection behavior
	VulnerabilityDetectionControl []VulnerabilityDetectionControlObservation `json:"vulnerabilityDetectionControl,omitempty" tf:"vulnerability_detection_control,omitempty"`
}

type VulnerabilityCodeParameters struct {

	// (Block List, Max: 1, Deprecated) Define criteria (see below for nested schema)
	// Define criteria
	// +kubebuilder:validation:Optional
	Criteria []VulnerabilityCodeCriteriaParameters `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// +kubebuilder:validation:Optional
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (Block List, Min: 1, Max: 1) Step 3: Leave comment  (see below for nested schema)
	// Step 3: Leave comment (optional)
	// +kubebuilder:validation:Optional
	Metadata []VulnerabilityCodeMetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Block List, Max: 1) If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
	// If you add more than one condition, note that all conditions must be true simultaneously for the rule to apply.
	//
	// We provide suggestions for resource attribute keys and values based on what we currently see in your environment. You can also enter any value not currently seen in the list. Resource attributes come out of the box from the OneAgent, and you can set them up from [data enrichment](https://docs.dynatrace.com/docs/extend-dynatrace/extend-data).
	// +kubebuilder:validation:Optional
	ResourceAttributeConditions []VulnerabilityCodeResourceAttributeConditionsParameters `json:"resourceAttributeConditions,omitempty" tf:"resource_attribute_conditions,omitempty"`

	// (String) Rule name
	// Rule name
	// +kubebuilder:validation:Optional
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// level vulnerability detection behavior (see below for nested schema)
	// Step 1: Select code-level vulnerability detection behavior
	// +kubebuilder:validation:Optional
	VulnerabilityDetectionControl []VulnerabilityDetectionControlParameters `json:"vulnerabilityDetectionControl,omitempty" tf:"vulnerability_detection_control,omitempty"`
}

type VulnerabilityCodeResourceAttributeConditionsInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	ResourceAttributeCondition []ResourceAttributeConditionsResourceAttributeConditionInitParameters `json:"resourceAttributeCondition,omitempty" tf:"resource_attribute_condition,omitempty"`
}

type VulnerabilityCodeResourceAttributeConditionsObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	ResourceAttributeCondition []ResourceAttributeConditionsResourceAttributeConditionObservation `json:"resourceAttributeCondition,omitempty" tf:"resource_attribute_condition,omitempty"`
}

type VulnerabilityCodeResourceAttributeConditionsParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	ResourceAttributeCondition []ResourceAttributeConditionsResourceAttributeConditionParameters `json:"resourceAttributeCondition" tf:"resource_attribute_condition,omitempty"`
}

type VulnerabilityDetectionControlInitParameters struct {

	// (String) Possible Values: MONITORING_OFF, MONITORING_ON
	// Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	MonitoringMode *string `json:"monitoringMode,omitempty" tf:"monitoring_mode,omitempty"`
}

type VulnerabilityDetectionControlObservation struct {

	// (String) Possible Values: MONITORING_OFF, MONITORING_ON
	// Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	MonitoringMode *string `json:"monitoringMode,omitempty" tf:"monitoring_mode,omitempty"`
}

type VulnerabilityDetectionControlParameters struct {

	// (String) Possible Values: MONITORING_OFF, MONITORING_ON
	// Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	// +kubebuilder:validation:Optional
	MonitoringMode *string `json:"monitoringMode" tf:"monitoring_mode,omitempty"`
}

// VulnerabilityCodeSpec defines the desired state of VulnerabilityCode
type VulnerabilityCodeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VulnerabilityCodeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VulnerabilityCodeInitParameters `json:"initProvider,omitempty"`
}

// VulnerabilityCodeStatus defines the observed state of VulnerabilityCode.
type VulnerabilityCodeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VulnerabilityCodeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VulnerabilityCode is the Schema for the VulnerabilityCodes API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type VulnerabilityCode struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metadata) || (has(self.initProvider) && has(self.initProvider.metadata))",message="spec.forProvider.metadata is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vulnerabilityDetectionControl) || (has(self.initProvider) && has(self.initProvider.vulnerabilityDetectionControl))",message="spec.forProvider.vulnerabilityDetectionControl is a required parameter"
	Spec   VulnerabilityCodeSpec   `json:"spec"`
	Status VulnerabilityCodeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VulnerabilityCodeList contains a list of VulnerabilityCodes
type VulnerabilityCodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VulnerabilityCode `json:"items"`
}

// Repository type metadata.
var (
	VulnerabilityCode_Kind             = "VulnerabilityCode"
	VulnerabilityCode_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VulnerabilityCode_Kind}.String()
	VulnerabilityCode_KindAPIVersion   = VulnerabilityCode_Kind + "." + CRDGroupVersion.String()
	VulnerabilityCode_GroupVersionKind = CRDGroupVersion.WithKind(VulnerabilityCode_Kind)
)

func init() {
	SchemeBuilder.Register(&VulnerabilityCode{}, &VulnerabilityCodeList{})
}
