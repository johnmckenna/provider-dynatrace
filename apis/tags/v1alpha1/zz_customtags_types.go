// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomTagsInitParameters struct {

	// (String) For internal use: current state of tags in JSON format
	// For internal use: current state of tags in JSON format
	CurrentState *string `json:"currentState,omitempty" tf:"current_state,omitempty"`

	// (String) Specifies the entities where you want to update tags
	// Specifies the entities where you want to update tags
	EntitySelector *string `json:"entitySelector,omitempty" tf:"entity_selector,omitempty"`

	// (Number) The number of monitored entities where the tags have been added.
	// The number of monitored entities where the tags have been added.
	MatchedEntities *float64 `json:"matchedEntities,omitempty" tf:"matched_entities,omitempty"`

	// (Block List, Min: 1, Max: 1) Specifies the entities where you want to update tags (see below for nested schema)
	// Specifies the entities where you want to update tags
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CustomTagsObservation struct {

	// (String) For internal use: current state of tags in JSON format
	// For internal use: current state of tags in JSON format
	CurrentState *string `json:"currentState,omitempty" tf:"current_state,omitempty"`

	// (String) Specifies the entities where you want to update tags
	// Specifies the entities where you want to update tags
	EntitySelector *string `json:"entitySelector,omitempty" tf:"entity_selector,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The number of monitored entities where the tags have been added.
	// The number of monitored entities where the tags have been added.
	MatchedEntities *float64 `json:"matchedEntities,omitempty" tf:"matched_entities,omitempty"`

	// (Block List, Min: 1, Max: 1) Specifies the entities where you want to update tags (see below for nested schema)
	// Specifies the entities where you want to update tags
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CustomTagsParameters struct {

	// (String) For internal use: current state of tags in JSON format
	// For internal use: current state of tags in JSON format
	// +kubebuilder:validation:Optional
	CurrentState *string `json:"currentState,omitempty" tf:"current_state,omitempty"`

	// (String) Specifies the entities where you want to update tags
	// Specifies the entities where you want to update tags
	// +kubebuilder:validation:Optional
	EntitySelector *string `json:"entitySelector,omitempty" tf:"entity_selector,omitempty"`

	// (Number) The number of monitored entities where the tags have been added.
	// The number of monitored entities where the tags have been added.
	// +kubebuilder:validation:Optional
	MatchedEntities *float64 `json:"matchedEntities,omitempty" tf:"matched_entities,omitempty"`

	// (Block List, Min: 1, Max: 1) Specifies the entities where you want to update tags (see below for nested schema)
	// Specifies the entities where you want to update tags
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type FilterInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag. Custom tags have the tag value here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The value of the tag. Not applicable to custom tags
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type FilterObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag. Custom tags have the tag value here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The value of the tag. Not applicable to custom tags
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type FilterParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (String) The key of the tag. Custom tags have the tag value here
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The value of the tag. Not applicable to custom tags
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsInitParameters struct {

	// (Block Set) A Tag Filter (see below for nested schema)
	// A Tag Filter
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

type TagsObservation struct {

	// (Block Set) A Tag Filter (see below for nested schema)
	// A Tag Filter
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`
}

type TagsParameters struct {

	// (Block Set) A Tag Filter (see below for nested schema)
	// A Tag Filter
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

// CustomTagsSpec defines the desired state of CustomTags
type CustomTagsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomTagsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CustomTagsInitParameters `json:"initProvider,omitempty"`
}

// CustomTagsStatus defines the observed state of CustomTags.
type CustomTagsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomTagsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CustomTags is the Schema for the CustomTagss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type CustomTags struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.entitySelector) || (has(self.initProvider) && has(self.initProvider.entitySelector))",message="spec.forProvider.entitySelector is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tags) || (has(self.initProvider) && has(self.initProvider.tags))",message="spec.forProvider.tags is a required parameter"
	Spec   CustomTagsSpec   `json:"spec"`
	Status CustomTagsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomTagsList contains a list of CustomTagss
type CustomTagsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomTags `json:"items"`
}

// Repository type metadata.
var (
	CustomTags_Kind             = "CustomTags"
	CustomTags_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomTags_Kind}.String()
	CustomTags_KindAPIVersion   = CustomTags_Kind + "." + CRDGroupVersion.String()
	CustomTags_GroupVersionKind = CRDGroupVersion.WithKind(CustomTags_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomTags{}, &CustomTagsList{})
}
