// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RemoteEnvironmentsInitParameters struct {

	// (String) Name
	// Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible Values: CLUSTER, EXTERNAL, INTERNAL
	// Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
	NetworkScope *string `json:"networkScope,omitempty" tf:"network_scope,omitempty"`

	// (String, Sensitive) Provide a valid token created on the remote environment.
	// Provide a valid token created on the remote environment.
	TokenSecretRef v1.SecretKeySelector `json:"tokenSecretRef" tf:"-"`

	// (String) Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
	// Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type RemoteEnvironmentsObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name
	// Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible Values: CLUSTER, EXTERNAL, INTERNAL
	// Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
	NetworkScope *string `json:"networkScope,omitempty" tf:"network_scope,omitempty"`

	// (String) Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
	// Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type RemoteEnvironmentsParameters struct {

	// (String) Name
	// Name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible Values: CLUSTER, EXTERNAL, INTERNAL
	// Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`
	// +kubebuilder:validation:Optional
	NetworkScope *string `json:"networkScope,omitempty" tf:"network_scope,omitempty"`

	// (String, Sensitive) Provide a valid token created on the remote environment.
	// Provide a valid token created on the remote environment.
	// +kubebuilder:validation:Optional
	TokenSecretRef v1.SecretKeySelector `json:"tokenSecretRef" tf:"-"`

	// (String) Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
	// Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a network level.
	// +kubebuilder:validation:Optional
	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

// RemoteEnvironmentsSpec defines the desired state of RemoteEnvironments
type RemoteEnvironmentsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RemoteEnvironmentsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RemoteEnvironmentsInitParameters `json:"initProvider,omitempty"`
}

// RemoteEnvironmentsStatus defines the observed state of RemoteEnvironments.
type RemoteEnvironmentsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RemoteEnvironmentsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RemoteEnvironments is the Schema for the RemoteEnvironmentss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type RemoteEnvironments struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkScope) || (has(self.initProvider) && has(self.initProvider.networkScope))",message="spec.forProvider.networkScope is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tokenSecretRef)",message="spec.forProvider.tokenSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.uri) || (has(self.initProvider) && has(self.initProvider.uri))",message="spec.forProvider.uri is a required parameter"
	Spec   RemoteEnvironmentsSpec   `json:"spec"`
	Status RemoteEnvironmentsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RemoteEnvironmentsList contains a list of RemoteEnvironmentss
type RemoteEnvironmentsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RemoteEnvironments `json:"items"`
}

// Repository type metadata.
var (
	RemoteEnvironments_Kind             = "RemoteEnvironments"
	RemoteEnvironments_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RemoteEnvironments_Kind}.String()
	RemoteEnvironments_KindAPIVersion   = RemoteEnvironments_Kind + "." + CRDGroupVersion.String()
	RemoteEnvironments_GroupVersionKind = CRDGroupVersion.WithKind(RemoteEnvironments_Kind)
)

func init() {
	SchemeBuilder.Register(&RemoteEnvironments{}, &RemoteEnvironmentsList{})
}
