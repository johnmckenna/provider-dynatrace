// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppMonitoringAppMonitoringAppMonitoringInitParameters struct {

	// (String) App ID
	// App ID
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (String) Possible Values: Debug, Error, Info, Off, UseDefault, Warn
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `UseDefault`, `Warn`
	CustomLogLevel *string `json:"customLogLevel,omitempty" tf:"custom_log_level,omitempty"`
}

type AppMonitoringAppMonitoringAppMonitoringObservation struct {

	// (String) App ID
	// App ID
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// (String) Possible Values: Debug, Error, Info, Off, UseDefault, Warn
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `UseDefault`, `Warn`
	CustomLogLevel *string `json:"customLogLevel,omitempty" tf:"custom_log_level,omitempty"`
}

type AppMonitoringAppMonitoringAppMonitoringParameters struct {

	// (String) App ID
	// App ID
	// +kubebuilder:validation:Optional
	AppID *string `json:"appId" tf:"app_id,omitempty"`

	// (String) Possible Values: Debug, Error, Info, Off, UseDefault, Warn
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `UseDefault`, `Warn`
	// +kubebuilder:validation:Optional
	CustomLogLevel *string `json:"customLogLevel" tf:"custom_log_level,omitempty"`
}

type AppMonitoringAppMonitoringInitParameters struct {

	// (Block List, Max: 1) You can override the default monitoring setting for each app separately (see below for nested schema)
	AppMonitoring []AppMonitoringAppMonitoringAppMonitoringInitParameters `json:"appMonitoring,omitempty" tf:"app_monitoring,omitempty"`
}

type AppMonitoringAppMonitoringObservation struct {

	// (Block List, Max: 1) You can override the default monitoring setting for each app separately (see below for nested schema)
	AppMonitoring []AppMonitoringAppMonitoringAppMonitoringObservation `json:"appMonitoring,omitempty" tf:"app_monitoring,omitempty"`
}

type AppMonitoringAppMonitoringParameters struct {

	// (Block List, Max: 1) You can override the default monitoring setting for each app separately (see below for nested schema)
	// +kubebuilder:validation:Optional
	AppMonitoring []AppMonitoringAppMonitoringAppMonitoringParameters `json:"appMonitoring" tf:"app_monitoring,omitempty"`
}

type AppMonitoringInitParameters struct {

	// (Block List, Max: 1) You can override the default monitoring setting for each app separately (see below for nested schema)
	// You can override the default monitoring setting for each app separately
	AppMonitoring []AppMonitoringAppMonitoringInitParameters `json:"appMonitoring,omitempty" tf:"app_monitoring,omitempty"`

	// (String) Possible Values: Debug, Error, Info, Off, Warn
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `Warn`
	DefaultLogLevel *string `json:"defaultLogLevel,omitempty" tf:"default_log_level,omitempty"`
}

type AppMonitoringObservation struct {

	// (Block List, Max: 1) You can override the default monitoring setting for each app separately (see below for nested schema)
	// You can override the default monitoring setting for each app separately
	AppMonitoring []AppMonitoringAppMonitoringObservation `json:"appMonitoring,omitempty" tf:"app_monitoring,omitempty"`

	// (String) Possible Values: Debug, Error, Info, Off, Warn
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `Warn`
	DefaultLogLevel *string `json:"defaultLogLevel,omitempty" tf:"default_log_level,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AppMonitoringParameters struct {

	// (Block List, Max: 1) You can override the default monitoring setting for each app separately (see below for nested schema)
	// You can override the default monitoring setting for each app separately
	// +kubebuilder:validation:Optional
	AppMonitoring []AppMonitoringAppMonitoringParameters `json:"appMonitoring,omitempty" tf:"app_monitoring,omitempty"`

	// (String) Possible Values: Debug, Error, Info, Off, Warn
	// Possible Values: `Debug`, `Error`, `Info`, `Off`, `Warn`
	// +kubebuilder:validation:Optional
	DefaultLogLevel *string `json:"defaultLogLevel,omitempty" tf:"default_log_level,omitempty"`
}

// AppMonitoringSpec defines the desired state of AppMonitoring
type AppMonitoringSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppMonitoringParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AppMonitoringInitParameters `json:"initProvider,omitempty"`
}

// AppMonitoringStatus defines the observed state of AppMonitoring.
type AppMonitoringStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppMonitoringObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AppMonitoring is the Schema for the AppMonitorings API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type AppMonitoring struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.defaultLogLevel) || (has(self.initProvider) && has(self.initProvider.defaultLogLevel))",message="spec.forProvider.defaultLogLevel is a required parameter"
	Spec   AppMonitoringSpec   `json:"spec"`
	Status AppMonitoringStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppMonitoringList contains a list of AppMonitorings
type AppMonitoringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppMonitoring `json:"items"`
}

// Repository type metadata.
var (
	AppMonitoring_Kind             = "AppMonitoring"
	AppMonitoring_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppMonitoring_Kind}.String()
	AppMonitoring_KindAPIVersion   = AppMonitoring_Kind + "." + CRDGroupVersion.String()
	AppMonitoring_GroupVersionKind = CRDGroupVersion.WithKind(AppMonitoring_Kind)
)

func init() {
	SchemeBuilder.Register(&AppMonitoring{}, &AppMonitoringList{})
}
