// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskOptionsInitParameters struct {

	// (Boolean) Deactivate NFS monitoring on all supported systems
	// Deactivate NFS monitoring on all supported systems
	DisableNFSDiskMonitoring *bool `json:"disableNfsDiskMonitoring,omitempty" tf:"disable_nfs_disk_monitoring,omitempty"`

	// (Block List, Max: 1) OneAgent automatically detects and monitors all your mount points, however you can create exception rules to remove disks from the monitoring list. (see below for nested schema)
	// OneAgent automatically detects and monitors all your mount points, however you can create exception rules to remove disks from the monitoring list.
	Exclusions []ExclusionsInitParameters `json:"exclusions,omitempty" tf:"exclusions,omitempty"`

	// (Boolean) When disabled OneAgent will try to deduplicate some of nfs disks. Disabled by default, applies only to Linux hosts. Requires OneAgent 1.209 or later
	// When disabled OneAgent will try to deduplicate some of nfs disks. Disabled by default, applies only to Linux hosts. Requires OneAgent 1.209 or later
	NFSShowAll *bool `json:"nfsShowAll,omitempty" tf:"nfs_show_all,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type DiskOptionsObservation struct {

	// (Boolean) Deactivate NFS monitoring on all supported systems
	// Deactivate NFS monitoring on all supported systems
	DisableNFSDiskMonitoring *bool `json:"disableNfsDiskMonitoring,omitempty" tf:"disable_nfs_disk_monitoring,omitempty"`

	// (Block List, Max: 1) OneAgent automatically detects and monitors all your mount points, however you can create exception rules to remove disks from the monitoring list. (see below for nested schema)
	// OneAgent automatically detects and monitors all your mount points, however you can create exception rules to remove disks from the monitoring list.
	Exclusions []ExclusionsObservation `json:"exclusions,omitempty" tf:"exclusions,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) When disabled OneAgent will try to deduplicate some of nfs disks. Disabled by default, applies only to Linux hosts. Requires OneAgent 1.209 or later
	// When disabled OneAgent will try to deduplicate some of nfs disks. Disabled by default, applies only to Linux hosts. Requires OneAgent 1.209 or later
	NFSShowAll *bool `json:"nfsShowAll,omitempty" tf:"nfs_show_all,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type DiskOptionsParameters struct {

	// (Boolean) Deactivate NFS monitoring on all supported systems
	// Deactivate NFS monitoring on all supported systems
	// +kubebuilder:validation:Optional
	DisableNFSDiskMonitoring *bool `json:"disableNfsDiskMonitoring,omitempty" tf:"disable_nfs_disk_monitoring,omitempty"`

	// (Block List, Max: 1) OneAgent automatically detects and monitors all your mount points, however you can create exception rules to remove disks from the monitoring list. (see below for nested schema)
	// OneAgent automatically detects and monitors all your mount points, however you can create exception rules to remove disks from the monitoring list.
	// +kubebuilder:validation:Optional
	Exclusions []ExclusionsParameters `json:"exclusions,omitempty" tf:"exclusions,omitempty"`

	// (Boolean) When disabled OneAgent will try to deduplicate some of nfs disks. Disabled by default, applies only to Linux hosts. Requires OneAgent 1.209 or later
	// When disabled OneAgent will try to deduplicate some of nfs disks. Disabled by default, applies only to Linux hosts. Requires OneAgent 1.209 or later
	// +kubebuilder:validation:Optional
	NFSShowAll *bool `json:"nfsShowAll,omitempty" tf:"nfs_show_all,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type ExclusionInitParameters struct {

	// (String) File system type field: the type of the file system to be excluded from monitoring. Examples:
	// **File system type field:** the type of the file system to be excluded from monitoring. Examples:
	//
	// * ext4
	// * ext3
	// * btrfs
	// * ext*
	//
	// ⚠️ Starting from **OneAgent 1.299+** file system types are not case sensitive!
	//
	// The wildcard in the last example means to exclude matching file systems such as types ext4 and ext3
	Filesystem *string `json:"filesystem,omitempty" tf:"filesystem,omitempty"`

	// (String) Disk or mount point path field: the path to where the disk to be excluded from monitoring is mounted. Examples:
	// **Disk or mount point path field:** the path to where the disk to be excluded from monitoring is mounted. Examples:
	//
	// * /mnt/my_disk
	// * /staff/emp1
	// * C:\
	// * /staff/*
	// * /disk*
	//
	// ⚠️ Mount point paths are case sensitive!
	//
	// The wildcard in **/staff/*** means to exclude every child folder of /staff.
	//
	// The wildcard in **/disk*** means to exclude every mount point starting with /disk, for example /disk1, /disk99,  /diskabc
	Mountpoint *string `json:"mountpoint,omitempty" tf:"mountpoint,omitempty"`

	// (String) Possible Values: OS_TYPE_AIX, OS_TYPE_DARWIN, OS_TYPE_HPUX, OS_TYPE_LINUX, OS_TYPE_SOLARIS, OS_TYPE_UNKNOWN, OS_TYPE_WINDOWS, OS_TYPE_ZOS
	// Possible Values: `OS_TYPE_AIX`, `OS_TYPE_DARWIN`, `OS_TYPE_HPUX`, `OS_TYPE_LINUX`, `OS_TYPE_SOLARIS`, `OS_TYPE_UNKNOWN`, `OS_TYPE_WINDOWS`, `OS_TYPE_ZOS`
	Os *string `json:"os,omitempty" tf:"os,omitempty"`
}

type ExclusionObservation struct {

	// (String) File system type field: the type of the file system to be excluded from monitoring. Examples:
	// **File system type field:** the type of the file system to be excluded from monitoring. Examples:
	//
	// * ext4
	// * ext3
	// * btrfs
	// * ext*
	//
	// ⚠️ Starting from **OneAgent 1.299+** file system types are not case sensitive!
	//
	// The wildcard in the last example means to exclude matching file systems such as types ext4 and ext3
	Filesystem *string `json:"filesystem,omitempty" tf:"filesystem,omitempty"`

	// (String) Disk or mount point path field: the path to where the disk to be excluded from monitoring is mounted. Examples:
	// **Disk or mount point path field:** the path to where the disk to be excluded from monitoring is mounted. Examples:
	//
	// * /mnt/my_disk
	// * /staff/emp1
	// * C:\
	// * /staff/*
	// * /disk*
	//
	// ⚠️ Mount point paths are case sensitive!
	//
	// The wildcard in **/staff/*** means to exclude every child folder of /staff.
	//
	// The wildcard in **/disk*** means to exclude every mount point starting with /disk, for example /disk1, /disk99,  /diskabc
	Mountpoint *string `json:"mountpoint,omitempty" tf:"mountpoint,omitempty"`

	// (String) Possible Values: OS_TYPE_AIX, OS_TYPE_DARWIN, OS_TYPE_HPUX, OS_TYPE_LINUX, OS_TYPE_SOLARIS, OS_TYPE_UNKNOWN, OS_TYPE_WINDOWS, OS_TYPE_ZOS
	// Possible Values: `OS_TYPE_AIX`, `OS_TYPE_DARWIN`, `OS_TYPE_HPUX`, `OS_TYPE_LINUX`, `OS_TYPE_SOLARIS`, `OS_TYPE_UNKNOWN`, `OS_TYPE_WINDOWS`, `OS_TYPE_ZOS`
	Os *string `json:"os,omitempty" tf:"os,omitempty"`
}

type ExclusionParameters struct {

	// (String) File system type field: the type of the file system to be excluded from monitoring. Examples:
	// **File system type field:** the type of the file system to be excluded from monitoring. Examples:
	//
	// * ext4
	// * ext3
	// * btrfs
	// * ext*
	//
	// ⚠️ Starting from **OneAgent 1.299+** file system types are not case sensitive!
	//
	// The wildcard in the last example means to exclude matching file systems such as types ext4 and ext3
	// +kubebuilder:validation:Optional
	Filesystem *string `json:"filesystem,omitempty" tf:"filesystem,omitempty"`

	// (String) Disk or mount point path field: the path to where the disk to be excluded from monitoring is mounted. Examples:
	// **Disk or mount point path field:** the path to where the disk to be excluded from monitoring is mounted. Examples:
	//
	// * /mnt/my_disk
	// * /staff/emp1
	// * C:\
	// * /staff/*
	// * /disk*
	//
	// ⚠️ Mount point paths are case sensitive!
	//
	// The wildcard in **/staff/*** means to exclude every child folder of /staff.
	//
	// The wildcard in **/disk*** means to exclude every mount point starting with /disk, for example /disk1, /disk99,  /diskabc
	// +kubebuilder:validation:Optional
	Mountpoint *string `json:"mountpoint,omitempty" tf:"mountpoint,omitempty"`

	// (String) Possible Values: OS_TYPE_AIX, OS_TYPE_DARWIN, OS_TYPE_HPUX, OS_TYPE_LINUX, OS_TYPE_SOLARIS, OS_TYPE_UNKNOWN, OS_TYPE_WINDOWS, OS_TYPE_ZOS
	// Possible Values: `OS_TYPE_AIX`, `OS_TYPE_DARWIN`, `OS_TYPE_HPUX`, `OS_TYPE_LINUX`, `OS_TYPE_SOLARIS`, `OS_TYPE_UNKNOWN`, `OS_TYPE_WINDOWS`, `OS_TYPE_ZOS`
	// +kubebuilder:validation:Optional
	Os *string `json:"os" tf:"os,omitempty"`
}

type ExclusionsInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	Exclusion []ExclusionInitParameters `json:"exclusion,omitempty" tf:"exclusion,omitempty"`
}

type ExclusionsObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	Exclusion []ExclusionObservation `json:"exclusion,omitempty" tf:"exclusion,omitempty"`
}

type ExclusionsParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Exclusion []ExclusionParameters `json:"exclusion" tf:"exclusion,omitempty"`
}

// DiskOptionsSpec defines the desired state of DiskOptions
type DiskOptionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiskOptionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DiskOptionsInitParameters `json:"initProvider,omitempty"`
}

// DiskOptionsStatus defines the observed state of DiskOptions.
type DiskOptionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiskOptionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DiskOptions is the Schema for the DiskOptionss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type DiskOptions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DiskOptionsSpec   `json:"spec"`
	Status            DiskOptionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiskOptionsList contains a list of DiskOptionss
type DiskOptionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiskOptions `json:"items"`
}

// Repository type metadata.
var (
	DiskOptions_Kind             = "DiskOptions"
	DiskOptions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DiskOptions_Kind}.String()
	DiskOptions_KindAPIVersion   = DiskOptions_Kind + "." + CRDGroupVersion.String()
	DiskOptions_GroupVersionKind = CRDGroupVersion.WithKind(DiskOptions_Kind)
)

func init() {
	SchemeBuilder.Register(&DiskOptions{}, &DiskOptionsList{})
}
