// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DevobsGitOnpremInitParameters struct {

	// (String) Possible Values: AzureOnPrem, BitbucketOnPrem, GithubOnPrem, GitlabOnPrem
	// Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
	GitProvider *string `json:"gitProvider,omitempty" tf:"git_provider,omitempty"`

	// (Boolean) If turned on, requests to your Gitlab server will have the credentials option set to include. Otherwise, it will be set to omit.
	// If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
	IncludeCredentials *bool `json:"includeCredentials,omitempty" tf:"include_credentials,omitempty"`

	// (String) An HTTP/HTTPS URL of your server
	// An HTTP/HTTPS URL of your server
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type DevobsGitOnpremObservation struct {

	// (String) Possible Values: AzureOnPrem, BitbucketOnPrem, GithubOnPrem, GitlabOnPrem
	// Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
	GitProvider *string `json:"gitProvider,omitempty" tf:"git_provider,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) If turned on, requests to your Gitlab server will have the credentials option set to include. Otherwise, it will be set to omit.
	// If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
	IncludeCredentials *bool `json:"includeCredentials,omitempty" tf:"include_credentials,omitempty"`

	// (String) An HTTP/HTTPS URL of your server
	// An HTTP/HTTPS URL of your server
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type DevobsGitOnpremParameters struct {

	// (String) Possible Values: AzureOnPrem, BitbucketOnPrem, GithubOnPrem, GitlabOnPrem
	// Possible Values: `AzureOnPrem`, `BitbucketOnPrem`, `GithubOnPrem`, `GitlabOnPrem`
	// +kubebuilder:validation:Optional
	GitProvider *string `json:"gitProvider,omitempty" tf:"git_provider,omitempty"`

	// (Boolean) If turned on, requests to your Gitlab server will have the credentials option set to include. Otherwise, it will be set to omit.
	// If turned on, requests to your Gitlab server will have the `credentials` option set to `include`. Otherwise, it will be set to `omit`.
	// +kubebuilder:validation:Optional
	IncludeCredentials *bool `json:"includeCredentials,omitempty" tf:"include_credentials,omitempty"`

	// (String) An HTTP/HTTPS URL of your server
	// An HTTP/HTTPS URL of your server
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// DevobsGitOnpremSpec defines the desired state of DevobsGitOnprem
type DevobsGitOnpremSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DevobsGitOnpremParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DevobsGitOnpremInitParameters `json:"initProvider,omitempty"`
}

// DevobsGitOnpremStatus defines the observed state of DevobsGitOnprem.
type DevobsGitOnpremStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DevobsGitOnpremObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DevobsGitOnprem is the Schema for the DevobsGitOnprems API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type DevobsGitOnprem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gitProvider) || (has(self.initProvider) && has(self.initProvider.gitProvider))",message="spec.forProvider.gitProvider is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   DevobsGitOnpremSpec   `json:"spec"`
	Status DevobsGitOnpremStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevobsGitOnpremList contains a list of DevobsGitOnprems
type DevobsGitOnpremList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevobsGitOnprem `json:"items"`
}

// Repository type metadata.
var (
	DevobsGitOnprem_Kind             = "DevobsGitOnprem"
	DevobsGitOnprem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DevobsGitOnprem_Kind}.String()
	DevobsGitOnprem_KindAPIVersion   = DevobsGitOnprem_Kind + "." + CRDGroupVersion.String()
	DevobsGitOnprem_GroupVersionKind = CRDGroupVersion.WithKind(DevobsGitOnprem_Kind)
)

func init() {
	SchemeBuilder.Register(&DevobsGitOnprem{}, &DevobsGitOnpremList{})
}
