// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DirectSharesInitParameters struct {

	// Access grants. Possible values are `read` and `read-write`
	Access *string `json:"access,omitempty" tf:"access,omitempty"`

	// Document ID
	DocumentID *string `json:"documentId,omitempty" tf:"document_id,omitempty"`

	// Recipients of the direct share
	Recipients []RecipientsInitParameters `json:"recipients,omitempty" tf:"recipients,omitempty"`
}

type DirectSharesObservation struct {

	// Access grants. Possible values are `read` and `read-write`
	Access *string `json:"access,omitempty" tf:"access,omitempty"`

	// Document ID
	DocumentID *string `json:"documentId,omitempty" tf:"document_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Recipients of the direct share
	Recipients []RecipientsObservation `json:"recipients,omitempty" tf:"recipients,omitempty"`
}

type DirectSharesParameters struct {

	// Access grants. Possible values are `read` and `read-write`
	// +kubebuilder:validation:Optional
	Access *string `json:"access,omitempty" tf:"access,omitempty"`

	// Document ID
	// +kubebuilder:validation:Optional
	DocumentID *string `json:"documentId,omitempty" tf:"document_id,omitempty"`

	// Recipients of the direct share
	// +kubebuilder:validation:Optional
	Recipients []RecipientsParameters `json:"recipients,omitempty" tf:"recipients,omitempty"`
}

type RecipientInitParameters struct {

	// Identifier of the recipient
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Type of the recipient. Possible values are `group' and `user'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RecipientObservation struct {

	// Identifier of the recipient
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Type of the recipient. Possible values are `group' and `user'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RecipientParameters struct {

	// Identifier of the recipient
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// Type of the recipient. Possible values are `group' and `user'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RecipientsInitParameters struct {

	// Recipient of the direct share
	Recipient []RecipientInitParameters `json:"recipient,omitempty" tf:"recipient,omitempty"`
}

type RecipientsObservation struct {

	// Recipient of the direct share
	Recipient []RecipientObservation `json:"recipient,omitempty" tf:"recipient,omitempty"`
}

type RecipientsParameters struct {

	// Recipient of the direct share
	// +kubebuilder:validation:Optional
	Recipient []RecipientParameters `json:"recipient,omitempty" tf:"recipient,omitempty"`
}

// DirectSharesSpec defines the desired state of DirectShares
type DirectSharesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DirectSharesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DirectSharesInitParameters `json:"initProvider,omitempty"`
}

// DirectSharesStatus defines the observed state of DirectShares.
type DirectSharesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DirectSharesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DirectShares is the Schema for the DirectSharess API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type DirectShares struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.documentId) || (has(self.initProvider) && has(self.initProvider.documentId))",message="spec.forProvider.documentId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.recipients) || (has(self.initProvider) && has(self.initProvider.recipients))",message="spec.forProvider.recipients is a required parameter"
	Spec   DirectSharesSpec   `json:"spec"`
	Status DirectSharesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DirectSharesList contains a list of DirectSharess
type DirectSharesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DirectShares `json:"items"`
}

// Repository type metadata.
var (
	DirectShares_Kind             = "DirectShares"
	DirectShares_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DirectShares_Kind}.String()
	DirectShares_KindAPIVersion   = DirectShares_Kind + "." + CRDGroupVersion.String()
	DirectShares_GroupVersionKind = CRDGroupVersion.WithKind(DirectShares_Kind)
)

func init() {
	SchemeBuilder.Register(&DirectShares{}, &DirectSharesList{})
}
