// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InfraopsAppFeatureFlagsInitParameters struct {

	// (Boolean) State of boolean feature
	// State of boolean feature
	BooleanValue *bool `json:"booleanValue,omitempty" tf:"boolean_value,omitempty"`

	// (String) Name of the feature
	// Name of the feature
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) State of numeric feature
	// State of numeric feature
	NumberValue *float64 `json:"numberValue,omitempty" tf:"number_value,omitempty"`

	// (String) State of textual feature
	// State of textual feature
	StringValue *string `json:"stringValue,omitempty" tf:"string_value,omitempty"`

	// (String) Possible Values: Boolean, Number, String
	// Possible Values: `Boolean`, `Number`, `String`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type InfraopsAppFeatureFlagsObservation struct {

	// (Boolean) State of boolean feature
	// State of boolean feature
	BooleanValue *bool `json:"booleanValue,omitempty" tf:"boolean_value,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of the feature
	// Name of the feature
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) State of numeric feature
	// State of numeric feature
	NumberValue *float64 `json:"numberValue,omitempty" tf:"number_value,omitempty"`

	// (String) State of textual feature
	// State of textual feature
	StringValue *string `json:"stringValue,omitempty" tf:"string_value,omitempty"`

	// (String) Possible Values: Boolean, Number, String
	// Possible Values: `Boolean`, `Number`, `String`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type InfraopsAppFeatureFlagsParameters struct {

	// (Boolean) State of boolean feature
	// State of boolean feature
	// +kubebuilder:validation:Optional
	BooleanValue *bool `json:"booleanValue,omitempty" tf:"boolean_value,omitempty"`

	// (String) Name of the feature
	// Name of the feature
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) State of numeric feature
	// State of numeric feature
	// +kubebuilder:validation:Optional
	NumberValue *float64 `json:"numberValue,omitempty" tf:"number_value,omitempty"`

	// (String) State of textual feature
	// State of textual feature
	// +kubebuilder:validation:Optional
	StringValue *string `json:"stringValue,omitempty" tf:"string_value,omitempty"`

	// (String) Possible Values: Boolean, Number, String
	// Possible Values: `Boolean`, `Number`, `String`
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// InfraopsAppFeatureFlagsSpec defines the desired state of InfraopsAppFeatureFlags
type InfraopsAppFeatureFlagsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InfraopsAppFeatureFlagsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InfraopsAppFeatureFlagsInitParameters `json:"initProvider,omitempty"`
}

// InfraopsAppFeatureFlagsStatus defines the observed state of InfraopsAppFeatureFlags.
type InfraopsAppFeatureFlagsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InfraopsAppFeatureFlagsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// InfraopsAppFeatureFlags is the Schema for the InfraopsAppFeatureFlagss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type InfraopsAppFeatureFlags struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   InfraopsAppFeatureFlagsSpec   `json:"spec"`
	Status InfraopsAppFeatureFlagsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InfraopsAppFeatureFlagsList contains a list of InfraopsAppFeatureFlagss
type InfraopsAppFeatureFlagsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InfraopsAppFeatureFlags `json:"items"`
}

// Repository type metadata.
var (
	InfraopsAppFeatureFlags_Kind             = "InfraopsAppFeatureFlags"
	InfraopsAppFeatureFlags_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InfraopsAppFeatureFlags_Kind}.String()
	InfraopsAppFeatureFlags_KindAPIVersion   = InfraopsAppFeatureFlags_Kind + "." + CRDGroupVersion.String()
	InfraopsAppFeatureFlags_GroupVersionKind = CRDGroupVersion.WithKind(InfraopsAppFeatureFlags_Kind)
)

func init() {
	SchemeBuilder.Register(&InfraopsAppFeatureFlags{}, &InfraopsAppFeatureFlagsList{})
}
