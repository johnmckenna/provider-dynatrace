// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FallbackThresholdsInitParameters struct {

	// (Number) If User action duration is above this value, the action is assigned to the Frustrated performance zone.
	// If **User action duration** is above this value, the action is assigned to the Frustrated performance zone.
	FrustratingFallbackThresholdSeconds *float64 `json:"frustratingFallbackThresholdSeconds,omitempty" tf:"frustrating_fallback_threshold_seconds,omitempty"`

	// (Number) If User action duration is below this value, the action is assigned to the Satisfied performance zone.
	// If **User action duration** is below this value, the action is assigned to the Satisfied performance zone.
	ToleratedFallbackThresholdSeconds *float64 `json:"toleratedFallbackThresholdSeconds,omitempty" tf:"tolerated_fallback_threshold_seconds,omitempty"`
}

type FallbackThresholdsObservation struct {

	// (Number) If User action duration is above this value, the action is assigned to the Frustrated performance zone.
	// If **User action duration** is above this value, the action is assigned to the Frustrated performance zone.
	FrustratingFallbackThresholdSeconds *float64 `json:"frustratingFallbackThresholdSeconds,omitempty" tf:"frustrating_fallback_threshold_seconds,omitempty"`

	// (Number) If User action duration is below this value, the action is assigned to the Satisfied performance zone.
	// If **User action duration** is below this value, the action is assigned to the Satisfied performance zone.
	ToleratedFallbackThresholdSeconds *float64 `json:"toleratedFallbackThresholdSeconds,omitempty" tf:"tolerated_fallback_threshold_seconds,omitempty"`
}

type FallbackThresholdsParameters struct {

	// (Number) If User action duration is above this value, the action is assigned to the Frustrated performance zone.
	// If **User action duration** is above this value, the action is assigned to the Frustrated performance zone.
	// +kubebuilder:validation:Optional
	FrustratingFallbackThresholdSeconds *float64 `json:"frustratingFallbackThresholdSeconds" tf:"frustrating_fallback_threshold_seconds,omitempty"`

	// (Number) If User action duration is below this value, the action is assigned to the Satisfied performance zone.
	// If **User action duration** is below this value, the action is assigned to the Satisfied performance zone.
	// +kubebuilder:validation:Optional
	ToleratedFallbackThresholdSeconds *float64 `json:"toleratedFallbackThresholdSeconds" tf:"tolerated_fallback_threshold_seconds,omitempty"`
}

type WebAppKeyPerformanceLoadInitParameters struct {

	// (Block List, Max: 1) If the selected key performance metric is not detected, the User action duration metric is used instead. (see below for nested schema)
	// If the selected key performance metric is not detected, the **User action duration** metric is used instead.
	FallbackThresholds []FallbackThresholdsInitParameters `json:"fallbackThresholds,omitempty" tf:"fallback_thresholds,omitempty"`

	// (String) Possible Values: CUMULATIVE_LAYOUT_SHIFT, DOM_INTERACTIVE, FIRST_INPUT_DELAY, LARGEST_CONTENTFUL_PAINT, LOAD_EVENT_END, LOAD_EVENT_START, RESPONSE_END, RESPONSE_START, SPEED_INDEX, USER_ACTION_DURATION, VISUALLY_COMPLETE
	// Possible Values: `CUMULATIVE_LAYOUT_SHIFT`, `DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`, `LOAD_EVENT_END`, `LOAD_EVENT_START`, `RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `VISUALLY_COMPLETE`
	Kpm *string `json:"kpm,omitempty" tf:"kpm,omitempty"`

	// (String) The scope of this setting (APPLICATION_METHOD, APPLICATION)
	// The scope of this setting (APPLICATION_METHOD, APPLICATION)
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Block List, Min: 1, Max: 1) Set the Tolerating and Frustrated performance thresholds for this action type. (see below for nested schema)
	// Set the Tolerating and Frustrated performance thresholds for this action type.
	Thresholds []WebAppKeyPerformanceLoadThresholdsInitParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type WebAppKeyPerformanceLoadObservation struct {

	// (Block List, Max: 1) If the selected key performance metric is not detected, the User action duration metric is used instead. (see below for nested schema)
	// If the selected key performance metric is not detected, the **User action duration** metric is used instead.
	FallbackThresholds []FallbackThresholdsObservation `json:"fallbackThresholds,omitempty" tf:"fallback_thresholds,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Possible Values: CUMULATIVE_LAYOUT_SHIFT, DOM_INTERACTIVE, FIRST_INPUT_DELAY, LARGEST_CONTENTFUL_PAINT, LOAD_EVENT_END, LOAD_EVENT_START, RESPONSE_END, RESPONSE_START, SPEED_INDEX, USER_ACTION_DURATION, VISUALLY_COMPLETE
	// Possible Values: `CUMULATIVE_LAYOUT_SHIFT`, `DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`, `LOAD_EVENT_END`, `LOAD_EVENT_START`, `RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `VISUALLY_COMPLETE`
	Kpm *string `json:"kpm,omitempty" tf:"kpm,omitempty"`

	// (String) The scope of this setting (APPLICATION_METHOD, APPLICATION)
	// The scope of this setting (APPLICATION_METHOD, APPLICATION)
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Block List, Min: 1, Max: 1) Set the Tolerating and Frustrated performance thresholds for this action type. (see below for nested schema)
	// Set the Tolerating and Frustrated performance thresholds for this action type.
	Thresholds []WebAppKeyPerformanceLoadThresholdsObservation `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type WebAppKeyPerformanceLoadParameters struct {

	// (Block List, Max: 1) If the selected key performance metric is not detected, the User action duration metric is used instead. (see below for nested schema)
	// If the selected key performance metric is not detected, the **User action duration** metric is used instead.
	// +kubebuilder:validation:Optional
	FallbackThresholds []FallbackThresholdsParameters `json:"fallbackThresholds,omitempty" tf:"fallback_thresholds,omitempty"`

	// (String) Possible Values: CUMULATIVE_LAYOUT_SHIFT, DOM_INTERACTIVE, FIRST_INPUT_DELAY, LARGEST_CONTENTFUL_PAINT, LOAD_EVENT_END, LOAD_EVENT_START, RESPONSE_END, RESPONSE_START, SPEED_INDEX, USER_ACTION_DURATION, VISUALLY_COMPLETE
	// Possible Values: `CUMULATIVE_LAYOUT_SHIFT`, `DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`, `LOAD_EVENT_END`, `LOAD_EVENT_START`, `RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `VISUALLY_COMPLETE`
	// +kubebuilder:validation:Optional
	Kpm *string `json:"kpm,omitempty" tf:"kpm,omitempty"`

	// (String) The scope of this setting (APPLICATION_METHOD, APPLICATION)
	// The scope of this setting (APPLICATION_METHOD, APPLICATION)
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Block List, Min: 1, Max: 1) Set the Tolerating and Frustrated performance thresholds for this action type. (see below for nested schema)
	// Set the Tolerating and Frustrated performance thresholds for this action type.
	// +kubebuilder:validation:Optional
	Thresholds []WebAppKeyPerformanceLoadThresholdsParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type WebAppKeyPerformanceLoadThresholdsInitParameters struct {

	// (Number) If the key performance metric is above this value, the action is assigned to the Frustrated performance zone.
	// If the key performance metric is above this value, the action is assigned to the Frustrated performance zone.
	FrustratingThresholdSeconds *float64 `json:"frustratingThresholdSeconds,omitempty" tf:"frustrating_threshold_seconds,omitempty"`

	// (Number) If the key performance metric is below this value, the action is assigned to the Satisfied performance zone.
	// If the key performance metric is below this value, the action is assigned to the Satisfied performance zone.
	ToleratedThresholdSeconds *float64 `json:"toleratedThresholdSeconds,omitempty" tf:"tolerated_threshold_seconds,omitempty"`
}

type WebAppKeyPerformanceLoadThresholdsObservation struct {

	// (Number) If the key performance metric is above this value, the action is assigned to the Frustrated performance zone.
	// If the key performance metric is above this value, the action is assigned to the Frustrated performance zone.
	FrustratingThresholdSeconds *float64 `json:"frustratingThresholdSeconds,omitempty" tf:"frustrating_threshold_seconds,omitempty"`

	// (Number) If the key performance metric is below this value, the action is assigned to the Satisfied performance zone.
	// If the key performance metric is below this value, the action is assigned to the Satisfied performance zone.
	ToleratedThresholdSeconds *float64 `json:"toleratedThresholdSeconds,omitempty" tf:"tolerated_threshold_seconds,omitempty"`
}

type WebAppKeyPerformanceLoadThresholdsParameters struct {

	// (Number) If the key performance metric is above this value, the action is assigned to the Frustrated performance zone.
	// If the key performance metric is above this value, the action is assigned to the Frustrated performance zone.
	// +kubebuilder:validation:Optional
	FrustratingThresholdSeconds *float64 `json:"frustratingThresholdSeconds" tf:"frustrating_threshold_seconds,omitempty"`

	// (Number) If the key performance metric is below this value, the action is assigned to the Satisfied performance zone.
	// If the key performance metric is below this value, the action is assigned to the Satisfied performance zone.
	// +kubebuilder:validation:Optional
	ToleratedThresholdSeconds *float64 `json:"toleratedThresholdSeconds" tf:"tolerated_threshold_seconds,omitempty"`
}

// WebAppKeyPerformanceLoadSpec defines the desired state of WebAppKeyPerformanceLoad
type WebAppKeyPerformanceLoadSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WebAppKeyPerformanceLoadParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WebAppKeyPerformanceLoadInitParameters `json:"initProvider,omitempty"`
}

// WebAppKeyPerformanceLoadStatus defines the observed state of WebAppKeyPerformanceLoad.
type WebAppKeyPerformanceLoadStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WebAppKeyPerformanceLoadObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// WebAppKeyPerformanceLoad is the Schema for the WebAppKeyPerformanceLoads API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type WebAppKeyPerformanceLoad struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.kpm) || (has(self.initProvider) && has(self.initProvider.kpm))",message="spec.forProvider.kpm is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) && has(self.initProvider.scope))",message="spec.forProvider.scope is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.thresholds) || (has(self.initProvider) && has(self.initProvider.thresholds))",message="spec.forProvider.thresholds is a required parameter"
	Spec   WebAppKeyPerformanceLoadSpec   `json:"spec"`
	Status WebAppKeyPerformanceLoadStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WebAppKeyPerformanceLoadList contains a list of WebAppKeyPerformanceLoads
type WebAppKeyPerformanceLoadList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WebAppKeyPerformanceLoad `json:"items"`
}

// Repository type metadata.
var (
	WebAppKeyPerformanceLoad_Kind             = "WebAppKeyPerformanceLoad"
	WebAppKeyPerformanceLoad_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WebAppKeyPerformanceLoad_Kind}.String()
	WebAppKeyPerformanceLoad_KindAPIVersion   = WebAppKeyPerformanceLoad_Kind + "." + CRDGroupVersion.String()
	WebAppKeyPerformanceLoad_GroupVersionKind = CRDGroupVersion.WithKind(WebAppKeyPerformanceLoad_Kind)
)

func init() {
	SchemeBuilder.Register(&WebAppKeyPerformanceLoad{}, &WebAppKeyPerformanceLoadList{})
}
