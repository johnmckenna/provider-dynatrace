// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CalculatedWebMetricInitParameters struct {

	// (String) The Dynatrace entity ID of the application to which the metric belongs.
	// The Dynatrace entity ID of the application to which the metric belongs.
	AppIdentifier *string `json:"appIdentifier,omitempty" tf:"app_identifier,omitempty"`

	// (String) Descriptor of a calculated web metric.
	// Descriptor of a calculated web metric.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List) Parameters of a definition of a calculated web metric. (see below for nested schema)
	// Parameters of a definition of a calculated web metric.
	Dimensions []DimensionsInitParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) The metric is enabled (true) or disabled (false)
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) The definition of a calculated web metric. (see below for nested schema)
	// The definition of a calculated web metric.
	MetricDefinition []MetricDefinitionInitParameters `json:"metricDefinition,omitempty" tf:"metric_definition,omitempty"`

	// (String) The unique key of the calculated web metric.
	// The unique key of the calculated web metric.
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// (String) The displayed name of the metric.
	// The displayed name of the metric.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Parameters of a definition of a calculated web metric. (see below for nested schema)
	// Parameters of a definition of a calculated web metric.
	UserActionFilter []UserActionFilterInitParameters `json:"userActionFilter,omitempty" tf:"user_action_filter,omitempty"`
}

type CalculatedWebMetricObservation struct {

	// (String) The Dynatrace entity ID of the application to which the metric belongs.
	// The Dynatrace entity ID of the application to which the metric belongs.
	AppIdentifier *string `json:"appIdentifier,omitempty" tf:"app_identifier,omitempty"`

	// (String) Descriptor of a calculated web metric.
	// Descriptor of a calculated web metric.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List) Parameters of a definition of a calculated web metric. (see below for nested schema)
	// Parameters of a definition of a calculated web metric.
	Dimensions []DimensionsObservation `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) The metric is enabled (true) or disabled (false)
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Min: 1, Max: 1) The definition of a calculated web metric. (see below for nested schema)
	// The definition of a calculated web metric.
	MetricDefinition []MetricDefinitionObservation `json:"metricDefinition,omitempty" tf:"metric_definition,omitempty"`

	// (String) The unique key of the calculated web metric.
	// The unique key of the calculated web metric.
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// (String) The displayed name of the metric.
	// The displayed name of the metric.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Parameters of a definition of a calculated web metric. (see below for nested schema)
	// Parameters of a definition of a calculated web metric.
	UserActionFilter []UserActionFilterObservation `json:"userActionFilter,omitempty" tf:"user_action_filter,omitempty"`
}

type CalculatedWebMetricParameters struct {

	// (String) The Dynatrace entity ID of the application to which the metric belongs.
	// The Dynatrace entity ID of the application to which the metric belongs.
	// +kubebuilder:validation:Optional
	AppIdentifier *string `json:"appIdentifier,omitempty" tf:"app_identifier,omitempty"`

	// (String) Descriptor of a calculated web metric.
	// Descriptor of a calculated web metric.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List) Parameters of a definition of a calculated web metric. (see below for nested schema)
	// Parameters of a definition of a calculated web metric.
	// +kubebuilder:validation:Optional
	Dimensions []DimensionsParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) The metric is enabled (true) or disabled (false)
	// The metric is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) The definition of a calculated web metric. (see below for nested schema)
	// The definition of a calculated web metric.
	// +kubebuilder:validation:Optional
	MetricDefinition []MetricDefinitionParameters `json:"metricDefinition,omitempty" tf:"metric_definition,omitempty"`

	// (String) The unique key of the calculated web metric.
	// The unique key of the calculated web metric.
	// +kubebuilder:validation:Optional
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// (String) The displayed name of the metric.
	// The displayed name of the metric.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Parameters of a definition of a calculated web metric. (see below for nested schema)
	// Parameters of a definition of a calculated web metric.
	// +kubebuilder:validation:Optional
	UserActionFilter []UserActionFilterParameters `json:"userActionFilter,omitempty" tf:"user_action_filter,omitempty"`
}

type DimensionInitParameters struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// The dimension of the metric. Possible values are `ApdexType`, `Browser`, `ErrorContext`, `ErrorOrigin`, `ErrorType`, `GeoLocation`, `StringProperty`, `UserActionType`
	Dimension *string `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// (String) The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
	// The key of the user action property. Only applicable for the StringProperty dimension.
	PropertyKey *string `json:"propertyKey,omitempty" tf:"property_key,omitempty"`

	// (Number) The number of top values to be calculated
	// The number of top values to be calculated
	TopX *float64 `json:"topX,omitempty" tf:"top_x,omitempty"`
}

type DimensionObservation struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// The dimension of the metric. Possible values are `ApdexType`, `Browser`, `ErrorContext`, `ErrorOrigin`, `ErrorType`, `GeoLocation`, `StringProperty`, `UserActionType`
	Dimension *string `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// (String) The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
	// The key of the user action property. Only applicable for the StringProperty dimension.
	PropertyKey *string `json:"propertyKey,omitempty" tf:"property_key,omitempty"`

	// (Number) The number of top values to be calculated
	// The number of top values to be calculated
	TopX *float64 `json:"topX,omitempty" tf:"top_x,omitempty"`
}

type DimensionParameters struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// The dimension of the metric. Possible values are `ApdexType`, `Browser`, `ErrorContext`, `ErrorOrigin`, `ErrorType`, `GeoLocation`, `StringProperty`, `UserActionType`
	// +kubebuilder:validation:Optional
	Dimension *string `json:"dimension" tf:"dimension,omitempty"`

	// (String) The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
	// The key of the user action property. Only applicable for the StringProperty dimension.
	// +kubebuilder:validation:Optional
	PropertyKey *string `json:"propertyKey,omitempty" tf:"property_key,omitempty"`

	// (Number) The number of top values to be calculated
	// The number of top values to be calculated
	// +kubebuilder:validation:Optional
	TopX *float64 `json:"topX" tf:"top_x,omitempty"`
}

type DimensionsInitParameters struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// A dimensions for the metric usage
	Dimension []DimensionInitParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`
}

type DimensionsObservation struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// A dimensions for the metric usage
	Dimension []DimensionObservation `json:"dimension,omitempty" tf:"dimension,omitempty"`
}

type DimensionsParameters struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// A dimensions for the metric usage
	// +kubebuilder:validation:Optional
	Dimension []DimensionParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`
}

type MetricDefinitionInitParameters struct {

	// (String) The metric to be captured. Possible values are Apdex, ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, DoubleProperty, ErrorCount, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongProperty, LongTasksTime, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, UserActionDuration, VisuallyComplete
	// The metric to be captured. Possible values are `Apdex`, `ApplicationCache`, `Callback`, `CumulativeLayoutShift`, `DNSLookup`, `DOMComplete`, `DOMContentLoaded`, `DOMInteractive`, `DoubleProperty`, `ErrorCount`, `FirstContentfulPaint`, `FirstInputDelay`, `FirstInputStart`, `FirstPaint`, `HTMLDownloaded`, `LargestContentfulPaint`, `LoadEventEnd`, `LoadEventStart`, `LongProperty`, `LongTasksTime`, `NavigationStart`, `OnDOMContentLoaded`, `OnLoad`, `Processing`, `RedirectTime`, `Request`, `RequestStart`, `Response`, `SecureConnect`, `SpeedIndex`, `TCPConnect`, `TimeToFirstByte`, `UserActionDuration`, `VisuallyComplete`
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
	// The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
	PropertyKey *string `json:"propertyKey,omitempty" tf:"property_key,omitempty"`
}

type MetricDefinitionObservation struct {

	// (String) The metric to be captured. Possible values are Apdex, ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, DoubleProperty, ErrorCount, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongProperty, LongTasksTime, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, UserActionDuration, VisuallyComplete
	// The metric to be captured. Possible values are `Apdex`, `ApplicationCache`, `Callback`, `CumulativeLayoutShift`, `DNSLookup`, `DOMComplete`, `DOMContentLoaded`, `DOMInteractive`, `DoubleProperty`, `ErrorCount`, `FirstContentfulPaint`, `FirstInputDelay`, `FirstInputStart`, `FirstPaint`, `HTMLDownloaded`, `LargestContentfulPaint`, `LoadEventEnd`, `LoadEventStart`, `LongProperty`, `LongTasksTime`, `NavigationStart`, `OnDOMContentLoaded`, `OnLoad`, `Processing`, `RedirectTime`, `Request`, `RequestStart`, `Response`, `SecureConnect`, `SpeedIndex`, `TCPConnect`, `TimeToFirstByte`, `UserActionDuration`, `VisuallyComplete`
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
	// The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
	PropertyKey *string `json:"propertyKey,omitempty" tf:"property_key,omitempty"`
}

type MetricDefinitionParameters struct {

	// (String) The metric to be captured. Possible values are Apdex, ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, DoubleProperty, ErrorCount, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongProperty, LongTasksTime, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, UserActionDuration, VisuallyComplete
	// The metric to be captured. Possible values are `Apdex`, `ApplicationCache`, `Callback`, `CumulativeLayoutShift`, `DNSLookup`, `DOMComplete`, `DOMContentLoaded`, `DOMInteractive`, `DoubleProperty`, `ErrorCount`, `FirstContentfulPaint`, `FirstInputDelay`, `FirstInputStart`, `FirstPaint`, `HTMLDownloaded`, `LargestContentfulPaint`, `LoadEventEnd`, `LoadEventStart`, `LongProperty`, `LongTasksTime`, `NavigationStart`, `OnDOMContentLoaded`, `OnLoad`, `Processing`, `RedirectTime`, `Request`, `RequestStart`, `Response`, `SecureConnect`, `SpeedIndex`, `TCPConnect`, `TimeToFirstByte`, `UserActionDuration`, `VisuallyComplete`
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// (String) The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
	// The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
	// +kubebuilder:validation:Optional
	PropertyKey *string `json:"propertyKey,omitempty" tf:"property_key,omitempty"`
}

type PropertyInitParameters struct {

	// (Number) Only actions that have a value greater than or equal to this are included in the metric calculation.
	// Only actions that have a value greater than or equal to this are included in the metric calculation.
	From *float64 `json:"from,omitempty" tf:"from,omitempty"`

	// (String) The key of the action property we're checking.
	// The key of the action property we're checking.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Specifies the match type of a string filter, e.g. using Contains or Equals.
	// Specifies the match type of a string filter, e.g. using Contains or Equals.
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`

	// (Number) Only actions that have a value less than or equal to this are included in the metric calculation.
	// Only actions that have a value less than or equal to this are included in the metric calculation.
	To *float64 `json:"to,omitempty" tf:"to,omitempty"`

	// (String) Only actions that have this value in the specified property are included in the metric calculation.
	// Only actions that have this value in the specified property are included in the metric calculation.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PropertyObservation struct {

	// (Number) Only actions that have a value greater than or equal to this are included in the metric calculation.
	// Only actions that have a value greater than or equal to this are included in the metric calculation.
	From *float64 `json:"from,omitempty" tf:"from,omitempty"`

	// (String) The key of the action property we're checking.
	// The key of the action property we're checking.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Specifies the match type of a string filter, e.g. using Contains or Equals.
	// Specifies the match type of a string filter, e.g. using Contains or Equals.
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`

	// (Number) Only actions that have a value less than or equal to this are included in the metric calculation.
	// Only actions that have a value less than or equal to this are included in the metric calculation.
	To *float64 `json:"to,omitempty" tf:"to,omitempty"`

	// (String) Only actions that have this value in the specified property are included in the metric calculation.
	// Only actions that have this value in the specified property are included in the metric calculation.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PropertyParameters struct {

	// (Number) Only actions that have a value greater than or equal to this are included in the metric calculation.
	// Only actions that have a value greater than or equal to this are included in the metric calculation.
	// +kubebuilder:validation:Optional
	From *float64 `json:"from,omitempty" tf:"from,omitempty"`

	// (String) The key of the action property we're checking.
	// The key of the action property we're checking.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Specifies the match type of a string filter, e.g. using Contains or Equals.
	// Specifies the match type of a string filter, e.g. using Contains or Equals.
	// +kubebuilder:validation:Optional
	MatchType *string `json:"matchType,omitempty" tf:"match_type,omitempty"`

	// (Number) Only actions that have a value less than or equal to this are included in the metric calculation.
	// Only actions that have a value less than or equal to this are included in the metric calculation.
	// +kubebuilder:validation:Optional
	To *float64 `json:"to,omitempty" tf:"to,omitempty"`

	// (String) Only actions that have this value in the specified property are included in the metric calculation.
	// Only actions that have this value in the specified property are included in the metric calculation.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type UserActionFilterInitParameters struct {

	// (Number) Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	// Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationFromMilliseconds *float64 `json:"actionDurationFromMilliseconds,omitempty" tf:"action_duration_from_milliseconds,omitempty"`

	// (Number) Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	// Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationToMilliseconds *float64 `json:"actionDurationToMilliseconds,omitempty" tf:"action_duration_to_milliseconds,omitempty"`

	// (String) Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
	// Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
	Apdex *string `json:"apdex,omitempty" tf:"apdex,omitempty"`

	// (String) Only user actions coming from the specified browser family are included in the metric calculation.
	// Only user actions coming from the specified browser family are included in the metric calculation.
	BrowserFamily *string `json:"browserFamily,omitempty" tf:"browser_family,omitempty"`

	// (String) Only user actions coming from the specified browser type are included in the metric calculation.
	// Only user actions coming from the specified browser type are included in the metric calculation.
	BrowserType *string `json:"browserType,omitempty" tf:"browser_type,omitempty"`

	// (String) Only user actions coming from the specified browser version are included in the metric calculation.
	// Only user actions coming from the specified browser version are included in the metric calculation.
	BrowserVersion *string `json:"browserVersion,omitempty" tf:"browser_version,omitempty"`

	// (String) Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// (String) Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
	Continent *string `json:"continent,omitempty" tf:"continent,omitempty"`

	// (String) Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// (Boolean) The status of custom actions in the metric calculation: true or false
	// The status of custom actions in the metric calculation: `true` or `false`
	CustomAction *bool `json:"customAction,omitempty" tf:"custom_action,omitempty"`

	// (String) The custom error name of the actions to be included in the metric calculation.
	// The custom error name of the actions to be included in the metric calculation.
	CustomErrorName *string `json:"customErrorName,omitempty" tf:"custom_error_name,omitempty"`

	// (String) The custom error type of the actions to be included in the metric calculation.
	// The custom error type of the actions to be included in the metric calculation.
	CustomErrorType *string `json:"customErrorType,omitempty" tf:"custom_error_type,omitempty"`

	// (String) Only user actions coming from the specified domain are included in the metric calculation.
	// Only user actions coming from the specified domain are included in the metric calculation.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (Number) The HTTP error status code of the actions to be included in the metric calculation.
	// The HTTP error status code of the actions to be included in the metric calculation.
	HTTPErrorCode *float64 `json:"httpErrorCode,omitempty" tf:"http_error_code,omitempty"`

	// (Number) Can be used in combination with httpErrorCode to define a range of error codes that will be included in the metric calculation.
	// Can be used in combination with httpErrorCode to define a range of error codes that will be included in the metric calculation.
	HTTPErrorCodeTo *float64 `json:"httpErrorCodeTo,omitempty" tf:"http_error_code_to,omitempty"`

	// (String) The request path that has been determined to be the origin of an HTTP error of the actions to be included in the metric calculation.
	// The request path that has been determined to be the origin of an HTTP error of the actions to be included in the metric calculation.
	HTTPPath *string `json:"httpPath,omitempty" tf:"http_path,omitempty"`

	// (Boolean) The error status of the actions to be included in the metric calculation: true or false
	// The error status of the actions to be included in the metric calculation: `true` or `false`
	HasAnyError *bool `json:"hasAnyError,omitempty" tf:"has_any_error,omitempty"`

	// (Boolean) The custom error status of the actions to be included in the metric calculation: true or false
	// The custom error status of the actions to be included in the metric calculation: `true` or `false`
	HasCustomErrors *bool `json:"hasCustomErrors,omitempty" tf:"has_custom_errors,omitempty"`

	// (Boolean) The request error status of the actions to be included in the metric calculation: true or false
	// The request error status of the actions to be included in the metric calculation: `true` or `false`
	HasHTTPErrors *bool `json:"hasHttpErrors,omitempty" tf:"has_http_errors,omitempty"`

	// (Boolean) The JavaScript error status of the actions to be included in the metric calculation: true or false
	// The JavaScript error status of the actions to be included in the metric calculation: `true` or `false`
	HasJavascriptErrors *bool `json:"hasJavascriptErrors,omitempty" tf:"has_javascript_errors,omitempty"`

	// (String) Only actions coming from this IP address are included in the metric calculation.
	// Only actions coming from this IP address are included in the metric calculation.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Boolean) The IPv6 status of the actions to be included in the metric calculation: true or false
	// The IPv6 status of the actions to be included in the metric calculation: `true` or `false`
	IPV6Traffic *bool `json:"ipV6Traffic,omitempty" tf:"ip_v6_traffic,omitempty"`

	// (Boolean) The status of load actions in the metric calculation: true or false
	// The status of load actions in the metric calculation: `true` or `false`
	LoadAction *bool `json:"loadAction,omitempty" tf:"load_action,omitempty"`

	// (String) Only actions coming from this OS family are included in the metric calculation.
	// Only actions coming from this OS family are included in the metric calculation.
	OsFamily *string `json:"osFamily,omitempty" tf:"os_family,omitempty"`

	// (String) Only actions coming from this OS version are included in the metric calculation.
	// Only actions coming from this OS version are included in the metric calculation.
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`

	// (Boolean) The status of actions coming from real users in the metric calculation: true or false
	// The status of actions coming from real users in the metric calculation: `true` or `false`
	RealUser *bool `json:"realUser,omitempty" tf:"real_user,omitempty"`

	// (String) Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (Boolean) The status of actions coming from robots in the metric calculation: true or false
	// The status of actions coming from robots in the metric calculation: `true` or `false`
	Robot *bool `json:"robot,omitempty" tf:"robot,omitempty"`

	// (Boolean) The status of actions coming from synthetic monitors in the metric calculation: true or false
	// The status of actions coming from synthetic monitors in the metric calculation: `true` or `false`
	Synthetic *bool `json:"synthetic,omitempty" tf:"synthetic,omitempty"`

	// (String) Only actions on the specified group of views are included in the metric calculation.
	// Only actions on the specified group of views are included in the metric calculation.
	TargetViewGroup *string `json:"targetViewGroup,omitempty" tf:"target_view_group,omitempty"`

	// (String) Specifies the match type of the view group filter, e.g. using Contains or Equals. Defaults to Equals.
	// Specifies the match type of the view group filter, e.g. using Contains or Equals. Defaults to Equals.
	TargetViewGroupNameMatchType *string `json:"targetViewGroupNameMatchType,omitempty" tf:"target_view_group_name_match_type,omitempty"`

	// (String) Only actions on the specified view are included in the metric calculation.
	// Only actions on the specified view are included in the metric calculation.
	TargetViewName *string `json:"targetViewName,omitempty" tf:"target_view_name,omitempty"`

	// (String) Specifies the match type of the view name filter, e.g. using Contains or Equals. Defaults to Equals.
	// Specifies the match type of the view name filter, e.g. using Contains or Equals. Defaults to Equals.
	TargetViewNameMatchType *string `json:"targetViewNameMatchType,omitempty" tf:"target_view_name_match_type,omitempty"`

	// (String) Only actions with this name are included in the metric calculation.
	// Only actions with this name are included in the metric calculation.
	UserActionName *string `json:"userActionName,omitempty" tf:"user_action_name,omitempty"`

	// (Block Set) The definition of a calculated web metric. (see below for nested schema)
	// The definition of a calculated web metric.
	UserActionProperties []UserActionPropertiesInitParameters `json:"userActionProperties,omitempty" tf:"user_action_properties,omitempty"`

	// (Boolean) The status of xhr actions in the metric calculation: true or false
	// The status of xhr actions in the metric calculation: `true` or `false`
	XhrAction *bool `json:"xhrAction,omitempty" tf:"xhr_action,omitempty"`

	// (Boolean) The status of route actions in the metric calculation: true or false
	// The status of route actions in the metric calculation: `true` or `false`
	XhrRouteChangeAction *bool `json:"xhrRouteChangeAction,omitempty" tf:"xhr_route_change_action,omitempty"`
}

type UserActionFilterObservation struct {

	// (Number) Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	// Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationFromMilliseconds *float64 `json:"actionDurationFromMilliseconds,omitempty" tf:"action_duration_from_milliseconds,omitempty"`

	// (Number) Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	// Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationToMilliseconds *float64 `json:"actionDurationToMilliseconds,omitempty" tf:"action_duration_to_milliseconds,omitempty"`

	// (String) Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
	// Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
	Apdex *string `json:"apdex,omitempty" tf:"apdex,omitempty"`

	// (String) Only user actions coming from the specified browser family are included in the metric calculation.
	// Only user actions coming from the specified browser family are included in the metric calculation.
	BrowserFamily *string `json:"browserFamily,omitempty" tf:"browser_family,omitempty"`

	// (String) Only user actions coming from the specified browser type are included in the metric calculation.
	// Only user actions coming from the specified browser type are included in the metric calculation.
	BrowserType *string `json:"browserType,omitempty" tf:"browser_type,omitempty"`

	// (String) Only user actions coming from the specified browser version are included in the metric calculation.
	// Only user actions coming from the specified browser version are included in the metric calculation.
	BrowserVersion *string `json:"browserVersion,omitempty" tf:"browser_version,omitempty"`

	// (String) Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// (String) Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
	Continent *string `json:"continent,omitempty" tf:"continent,omitempty"`

	// (String) Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// (Boolean) The status of custom actions in the metric calculation: true or false
	// The status of custom actions in the metric calculation: `true` or `false`
	CustomAction *bool `json:"customAction,omitempty" tf:"custom_action,omitempty"`

	// (String) The custom error name of the actions to be included in the metric calculation.
	// The custom error name of the actions to be included in the metric calculation.
	CustomErrorName *string `json:"customErrorName,omitempty" tf:"custom_error_name,omitempty"`

	// (String) The custom error type of the actions to be included in the metric calculation.
	// The custom error type of the actions to be included in the metric calculation.
	CustomErrorType *string `json:"customErrorType,omitempty" tf:"custom_error_type,omitempty"`

	// (String) Only user actions coming from the specified domain are included in the metric calculation.
	// Only user actions coming from the specified domain are included in the metric calculation.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (Number) The HTTP error status code of the actions to be included in the metric calculation.
	// The HTTP error status code of the actions to be included in the metric calculation.
	HTTPErrorCode *float64 `json:"httpErrorCode,omitempty" tf:"http_error_code,omitempty"`

	// (Number) Can be used in combination with httpErrorCode to define a range of error codes that will be included in the metric calculation.
	// Can be used in combination with httpErrorCode to define a range of error codes that will be included in the metric calculation.
	HTTPErrorCodeTo *float64 `json:"httpErrorCodeTo,omitempty" tf:"http_error_code_to,omitempty"`

	// (String) The request path that has been determined to be the origin of an HTTP error of the actions to be included in the metric calculation.
	// The request path that has been determined to be the origin of an HTTP error of the actions to be included in the metric calculation.
	HTTPPath *string `json:"httpPath,omitempty" tf:"http_path,omitempty"`

	// (Boolean) The error status of the actions to be included in the metric calculation: true or false
	// The error status of the actions to be included in the metric calculation: `true` or `false`
	HasAnyError *bool `json:"hasAnyError,omitempty" tf:"has_any_error,omitempty"`

	// (Boolean) The custom error status of the actions to be included in the metric calculation: true or false
	// The custom error status of the actions to be included in the metric calculation: `true` or `false`
	HasCustomErrors *bool `json:"hasCustomErrors,omitempty" tf:"has_custom_errors,omitempty"`

	// (Boolean) The request error status of the actions to be included in the metric calculation: true or false
	// The request error status of the actions to be included in the metric calculation: `true` or `false`
	HasHTTPErrors *bool `json:"hasHttpErrors,omitempty" tf:"has_http_errors,omitempty"`

	// (Boolean) The JavaScript error status of the actions to be included in the metric calculation: true or false
	// The JavaScript error status of the actions to be included in the metric calculation: `true` or `false`
	HasJavascriptErrors *bool `json:"hasJavascriptErrors,omitempty" tf:"has_javascript_errors,omitempty"`

	// (String) Only actions coming from this IP address are included in the metric calculation.
	// Only actions coming from this IP address are included in the metric calculation.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Boolean) The IPv6 status of the actions to be included in the metric calculation: true or false
	// The IPv6 status of the actions to be included in the metric calculation: `true` or `false`
	IPV6Traffic *bool `json:"ipV6Traffic,omitempty" tf:"ip_v6_traffic,omitempty"`

	// (Boolean) The status of load actions in the metric calculation: true or false
	// The status of load actions in the metric calculation: `true` or `false`
	LoadAction *bool `json:"loadAction,omitempty" tf:"load_action,omitempty"`

	// (String) Only actions coming from this OS family are included in the metric calculation.
	// Only actions coming from this OS family are included in the metric calculation.
	OsFamily *string `json:"osFamily,omitempty" tf:"os_family,omitempty"`

	// (String) Only actions coming from this OS version are included in the metric calculation.
	// Only actions coming from this OS version are included in the metric calculation.
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`

	// (Boolean) The status of actions coming from real users in the metric calculation: true or false
	// The status of actions coming from real users in the metric calculation: `true` or `false`
	RealUser *bool `json:"realUser,omitempty" tf:"real_user,omitempty"`

	// (String) Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (Boolean) The status of actions coming from robots in the metric calculation: true or false
	// The status of actions coming from robots in the metric calculation: `true` or `false`
	Robot *bool `json:"robot,omitempty" tf:"robot,omitempty"`

	// (Boolean) The status of actions coming from synthetic monitors in the metric calculation: true or false
	// The status of actions coming from synthetic monitors in the metric calculation: `true` or `false`
	Synthetic *bool `json:"synthetic,omitempty" tf:"synthetic,omitempty"`

	// (String) Only actions on the specified group of views are included in the metric calculation.
	// Only actions on the specified group of views are included in the metric calculation.
	TargetViewGroup *string `json:"targetViewGroup,omitempty" tf:"target_view_group,omitempty"`

	// (String) Specifies the match type of the view group filter, e.g. using Contains or Equals. Defaults to Equals.
	// Specifies the match type of the view group filter, e.g. using Contains or Equals. Defaults to Equals.
	TargetViewGroupNameMatchType *string `json:"targetViewGroupNameMatchType,omitempty" tf:"target_view_group_name_match_type,omitempty"`

	// (String) Only actions on the specified view are included in the metric calculation.
	// Only actions on the specified view are included in the metric calculation.
	TargetViewName *string `json:"targetViewName,omitempty" tf:"target_view_name,omitempty"`

	// (String) Specifies the match type of the view name filter, e.g. using Contains or Equals. Defaults to Equals.
	// Specifies the match type of the view name filter, e.g. using Contains or Equals. Defaults to Equals.
	TargetViewNameMatchType *string `json:"targetViewNameMatchType,omitempty" tf:"target_view_name_match_type,omitempty"`

	// (String) Only actions with this name are included in the metric calculation.
	// Only actions with this name are included in the metric calculation.
	UserActionName *string `json:"userActionName,omitempty" tf:"user_action_name,omitempty"`

	// (Block Set) The definition of a calculated web metric. (see below for nested schema)
	// The definition of a calculated web metric.
	UserActionProperties []UserActionPropertiesObservation `json:"userActionProperties,omitempty" tf:"user_action_properties,omitempty"`

	// (Boolean) The status of xhr actions in the metric calculation: true or false
	// The status of xhr actions in the metric calculation: `true` or `false`
	XhrAction *bool `json:"xhrAction,omitempty" tf:"xhr_action,omitempty"`

	// (Boolean) The status of route actions in the metric calculation: true or false
	// The status of route actions in the metric calculation: `true` or `false`
	XhrRouteChangeAction *bool `json:"xhrRouteChangeAction,omitempty" tf:"xhr_route_change_action,omitempty"`
}

type UserActionFilterParameters struct {

	// (Number) Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	// Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	// +kubebuilder:validation:Optional
	ActionDurationFromMilliseconds *float64 `json:"actionDurationFromMilliseconds,omitempty" tf:"action_duration_from_milliseconds,omitempty"`

	// (Number) Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	// Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	// +kubebuilder:validation:Optional
	ActionDurationToMilliseconds *float64 `json:"actionDurationToMilliseconds,omitempty" tf:"action_duration_to_milliseconds,omitempty"`

	// (String) Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
	// Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
	// +kubebuilder:validation:Optional
	Apdex *string `json:"apdex,omitempty" tf:"apdex,omitempty"`

	// (String) Only user actions coming from the specified browser family are included in the metric calculation.
	// Only user actions coming from the specified browser family are included in the metric calculation.
	// +kubebuilder:validation:Optional
	BrowserFamily *string `json:"browserFamily,omitempty" tf:"browser_family,omitempty"`

	// (String) Only user actions coming from the specified browser type are included in the metric calculation.
	// Only user actions coming from the specified browser type are included in the metric calculation.
	// +kubebuilder:validation:Optional
	BrowserType *string `json:"browserType,omitempty" tf:"browser_type,omitempty"`

	// (String) Only user actions coming from the specified browser version are included in the metric calculation.
	// Only user actions coming from the specified browser version are included in the metric calculation.
	// +kubebuilder:validation:Optional
	BrowserVersion *string `json:"browserVersion,omitempty" tf:"browser_version,omitempty"`

	// (String) Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
	// +kubebuilder:validation:Optional
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// (String) Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
	// +kubebuilder:validation:Optional
	Continent *string `json:"continent,omitempty" tf:"continent,omitempty"`

	// (String) Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// (Boolean) The status of custom actions in the metric calculation: true or false
	// The status of custom actions in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	CustomAction *bool `json:"customAction,omitempty" tf:"custom_action,omitempty"`

	// (String) The custom error name of the actions to be included in the metric calculation.
	// The custom error name of the actions to be included in the metric calculation.
	// +kubebuilder:validation:Optional
	CustomErrorName *string `json:"customErrorName,omitempty" tf:"custom_error_name,omitempty"`

	// (String) The custom error type of the actions to be included in the metric calculation.
	// The custom error type of the actions to be included in the metric calculation.
	// +kubebuilder:validation:Optional
	CustomErrorType *string `json:"customErrorType,omitempty" tf:"custom_error_type,omitempty"`

	// (String) Only user actions coming from the specified domain are included in the metric calculation.
	// Only user actions coming from the specified domain are included in the metric calculation.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (Number) The HTTP error status code of the actions to be included in the metric calculation.
	// The HTTP error status code of the actions to be included in the metric calculation.
	// +kubebuilder:validation:Optional
	HTTPErrorCode *float64 `json:"httpErrorCode,omitempty" tf:"http_error_code,omitempty"`

	// (Number) Can be used in combination with httpErrorCode to define a range of error codes that will be included in the metric calculation.
	// Can be used in combination with httpErrorCode to define a range of error codes that will be included in the metric calculation.
	// +kubebuilder:validation:Optional
	HTTPErrorCodeTo *float64 `json:"httpErrorCodeTo,omitempty" tf:"http_error_code_to,omitempty"`

	// (String) The request path that has been determined to be the origin of an HTTP error of the actions to be included in the metric calculation.
	// The request path that has been determined to be the origin of an HTTP error of the actions to be included in the metric calculation.
	// +kubebuilder:validation:Optional
	HTTPPath *string `json:"httpPath,omitempty" tf:"http_path,omitempty"`

	// (Boolean) The error status of the actions to be included in the metric calculation: true or false
	// The error status of the actions to be included in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	HasAnyError *bool `json:"hasAnyError,omitempty" tf:"has_any_error,omitempty"`

	// (Boolean) The custom error status of the actions to be included in the metric calculation: true or false
	// The custom error status of the actions to be included in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	HasCustomErrors *bool `json:"hasCustomErrors,omitempty" tf:"has_custom_errors,omitempty"`

	// (Boolean) The request error status of the actions to be included in the metric calculation: true or false
	// The request error status of the actions to be included in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	HasHTTPErrors *bool `json:"hasHttpErrors,omitempty" tf:"has_http_errors,omitempty"`

	// (Boolean) The JavaScript error status of the actions to be included in the metric calculation: true or false
	// The JavaScript error status of the actions to be included in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	HasJavascriptErrors *bool `json:"hasJavascriptErrors,omitempty" tf:"has_javascript_errors,omitempty"`

	// (String) Only actions coming from this IP address are included in the metric calculation.
	// Only actions coming from this IP address are included in the metric calculation.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// (Boolean) The IPv6 status of the actions to be included in the metric calculation: true or false
	// The IPv6 status of the actions to be included in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	IPV6Traffic *bool `json:"ipV6Traffic,omitempty" tf:"ip_v6_traffic,omitempty"`

	// (Boolean) The status of load actions in the metric calculation: true or false
	// The status of load actions in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	LoadAction *bool `json:"loadAction,omitempty" tf:"load_action,omitempty"`

	// (String) Only actions coming from this OS family are included in the metric calculation.
	// Only actions coming from this OS family are included in the metric calculation.
	// +kubebuilder:validation:Optional
	OsFamily *string `json:"osFamily,omitempty" tf:"os_family,omitempty"`

	// (String) Only actions coming from this OS version are included in the metric calculation.
	// Only actions coming from this OS version are included in the metric calculation.
	// +kubebuilder:validation:Optional
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`

	// (Boolean) The status of actions coming from real users in the metric calculation: true or false
	// The status of actions coming from real users in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	RealUser *bool `json:"realUser,omitempty" tf:"real_user,omitempty"`

	// (String) Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
	// Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (Boolean) The status of actions coming from robots in the metric calculation: true or false
	// The status of actions coming from robots in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	Robot *bool `json:"robot,omitempty" tf:"robot,omitempty"`

	// (Boolean) The status of actions coming from synthetic monitors in the metric calculation: true or false
	// The status of actions coming from synthetic monitors in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	Synthetic *bool `json:"synthetic,omitempty" tf:"synthetic,omitempty"`

	// (String) Only actions on the specified group of views are included in the metric calculation.
	// Only actions on the specified group of views are included in the metric calculation.
	// +kubebuilder:validation:Optional
	TargetViewGroup *string `json:"targetViewGroup,omitempty" tf:"target_view_group,omitempty"`

	// (String) Specifies the match type of the view group filter, e.g. using Contains or Equals. Defaults to Equals.
	// Specifies the match type of the view group filter, e.g. using Contains or Equals. Defaults to Equals.
	// +kubebuilder:validation:Optional
	TargetViewGroupNameMatchType *string `json:"targetViewGroupNameMatchType,omitempty" tf:"target_view_group_name_match_type,omitempty"`

	// (String) Only actions on the specified view are included in the metric calculation.
	// Only actions on the specified view are included in the metric calculation.
	// +kubebuilder:validation:Optional
	TargetViewName *string `json:"targetViewName,omitempty" tf:"target_view_name,omitempty"`

	// (String) Specifies the match type of the view name filter, e.g. using Contains or Equals. Defaults to Equals.
	// Specifies the match type of the view name filter, e.g. using Contains or Equals. Defaults to Equals.
	// +kubebuilder:validation:Optional
	TargetViewNameMatchType *string `json:"targetViewNameMatchType,omitempty" tf:"target_view_name_match_type,omitempty"`

	// (String) Only actions with this name are included in the metric calculation.
	// Only actions with this name are included in the metric calculation.
	// +kubebuilder:validation:Optional
	UserActionName *string `json:"userActionName,omitempty" tf:"user_action_name,omitempty"`

	// (Block Set) The definition of a calculated web metric. (see below for nested schema)
	// The definition of a calculated web metric.
	// +kubebuilder:validation:Optional
	UserActionProperties []UserActionPropertiesParameters `json:"userActionProperties,omitempty" tf:"user_action_properties,omitempty"`

	// (Boolean) The status of xhr actions in the metric calculation: true or false
	// The status of xhr actions in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	XhrAction *bool `json:"xhrAction,omitempty" tf:"xhr_action,omitempty"`

	// (Boolean) The status of route actions in the metric calculation: true or false
	// The status of route actions in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	XhrRouteChangeAction *bool `json:"xhrRouteChangeAction,omitempty" tf:"xhr_route_change_action,omitempty"`
}

type UserActionPropertiesInitParameters struct {

	// (Block Set) User Action Property (see below for nested schema)
	// User Action Property
	Property []PropertyInitParameters `json:"property,omitempty" tf:"property,omitempty"`
}

type UserActionPropertiesObservation struct {

	// (Block Set) User Action Property (see below for nested schema)
	// User Action Property
	Property []PropertyObservation `json:"property,omitempty" tf:"property,omitempty"`
}

type UserActionPropertiesParameters struct {

	// (Block Set) User Action Property (see below for nested schema)
	// User Action Property
	// +kubebuilder:validation:Optional
	Property []PropertyParameters `json:"property,omitempty" tf:"property,omitempty"`
}

// CalculatedWebMetricSpec defines the desired state of CalculatedWebMetric
type CalculatedWebMetricSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CalculatedWebMetricParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CalculatedWebMetricInitParameters `json:"initProvider,omitempty"`
}

// CalculatedWebMetricStatus defines the observed state of CalculatedWebMetric.
type CalculatedWebMetricStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CalculatedWebMetricObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CalculatedWebMetric is the Schema for the CalculatedWebMetrics API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type CalculatedWebMetric struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.appIdentifier) || (has(self.initProvider) && has(self.initProvider.appIdentifier))",message="spec.forProvider.appIdentifier is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricDefinition) || (has(self.initProvider) && has(self.initProvider.metricDefinition))",message="spec.forProvider.metricDefinition is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricKey) || (has(self.initProvider) && has(self.initProvider.metricKey))",message="spec.forProvider.metricKey is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CalculatedWebMetricSpec   `json:"spec"`
	Status CalculatedWebMetricStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CalculatedWebMetricList contains a list of CalculatedWebMetrics
type CalculatedWebMetricList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CalculatedWebMetric `json:"items"`
}

// Repository type metadata.
var (
	CalculatedWebMetric_Kind             = "CalculatedWebMetric"
	CalculatedWebMetric_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CalculatedWebMetric_Kind}.String()
	CalculatedWebMetric_KindAPIVersion   = CalculatedWebMetric_Kind + "." + CRDGroupVersion.String()
	CalculatedWebMetric_GroupVersionKind = CRDGroupVersion.WithKind(CalculatedWebMetric_Kind)
)

func init() {
	SchemeBuilder.Register(&CalculatedWebMetric{}, &CalculatedWebMetricList{})
}
