// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WebAppResourceTypesInitParameters struct {

	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`
	PrimaryResourceType *string `json:"primaryResourceType,omitempty" tf:"primary_resource_type,omitempty"`

	// The regular expression to detect the resource.
	RegularExpression *string `json:"regularExpression,omitempty" tf:"regular_expression,omitempty"`

	// The secondary type of the resource.
	SecondaryResourceType *string `json:"secondaryResourceType,omitempty" tf:"secondary_resource_type,omitempty"`
}

type WebAppResourceTypesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`
	PrimaryResourceType *string `json:"primaryResourceType,omitempty" tf:"primary_resource_type,omitempty"`

	// The regular expression to detect the resource.
	RegularExpression *string `json:"regularExpression,omitempty" tf:"regular_expression,omitempty"`

	// The secondary type of the resource.
	SecondaryResourceType *string `json:"secondaryResourceType,omitempty" tf:"secondary_resource_type,omitempty"`
}

type WebAppResourceTypesParameters struct {

	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// +kubebuilder:validation:Optional
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`
	// +kubebuilder:validation:Optional
	PrimaryResourceType *string `json:"primaryResourceType,omitempty" tf:"primary_resource_type,omitempty"`

	// The regular expression to detect the resource.
	// +kubebuilder:validation:Optional
	RegularExpression *string `json:"regularExpression,omitempty" tf:"regular_expression,omitempty"`

	// The secondary type of the resource.
	// +kubebuilder:validation:Optional
	SecondaryResourceType *string `json:"secondaryResourceType,omitempty" tf:"secondary_resource_type,omitempty"`
}

// WebAppResourceTypesSpec defines the desired state of WebAppResourceTypes
type WebAppResourceTypesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WebAppResourceTypesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WebAppResourceTypesInitParameters `json:"initProvider,omitempty"`
}

// WebAppResourceTypesStatus defines the observed state of WebAppResourceTypes.
type WebAppResourceTypesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WebAppResourceTypesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// WebAppResourceTypes is the Schema for the WebAppResourceTypess API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type WebAppResourceTypes struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.primaryResourceType) || (has(self.initProvider) && has(self.initProvider.primaryResourceType))",message="spec.forProvider.primaryResourceType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.regularExpression) || (has(self.initProvider) && has(self.initProvider.regularExpression))",message="spec.forProvider.regularExpression is a required parameter"
	Spec   WebAppResourceTypesSpec   `json:"spec"`
	Status WebAppResourceTypesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WebAppResourceTypesList contains a list of WebAppResourceTypess
type WebAppResourceTypesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WebAppResourceTypes `json:"items"`
}

// Repository type metadata.
var (
	WebAppResourceTypes_Kind             = "WebAppResourceTypes"
	WebAppResourceTypes_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WebAppResourceTypes_Kind}.String()
	WebAppResourceTypes_KindAPIVersion   = WebAppResourceTypes_Kind + "." + CRDGroupVersion.String()
	WebAppResourceTypes_GroupVersionKind = CRDGroupVersion.WithKind(WebAppResourceTypes_Kind)
)

func init() {
	SchemeBuilder.Register(&WebAppResourceTypes{}, &WebAppResourceTypesList{})
}
