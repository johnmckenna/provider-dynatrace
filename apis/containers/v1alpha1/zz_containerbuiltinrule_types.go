// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContainerBuiltinRuleInitParameters struct {

	// (Boolean) Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	// Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	IgnoreDockerPauseContainer *bool `json:"ignoreDockerPauseContainer,omitempty" tf:"ignore_docker_pause_container,omitempty"`

	// (Boolean) Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	// Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	IgnoreKubernetesPauseContainer *bool `json:"ignoreKubernetesPauseContainer,omitempty" tf:"ignore_kubernetes_pause_container,omitempty"`

	// (Boolean) Disable monitoring of intermediate containers created during image build.
	// Disable monitoring of intermediate containers created during image build.
	IgnoreOpenShiftBuildPodName *bool `json:"ignoreOpenShiftBuildPodName,omitempty" tf:"ignore_open_shift_build_pod_name,omitempty"`

	// sdn namespace.
	// Disable monitoring of platform internal containers in the openshift-sdn namespace.
	IgnoreOpenShiftSdnNamespace *bool `json:"ignoreOpenShiftSdnNamespace,omitempty" tf:"ignore_open_shift_sdn_namespace,omitempty"`
}

type ContainerBuiltinRuleObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	// Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	IgnoreDockerPauseContainer *bool `json:"ignoreDockerPauseContainer,omitempty" tf:"ignore_docker_pause_container,omitempty"`

	// (Boolean) Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	// Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	IgnoreKubernetesPauseContainer *bool `json:"ignoreKubernetesPauseContainer,omitempty" tf:"ignore_kubernetes_pause_container,omitempty"`

	// (Boolean) Disable monitoring of intermediate containers created during image build.
	// Disable monitoring of intermediate containers created during image build.
	IgnoreOpenShiftBuildPodName *bool `json:"ignoreOpenShiftBuildPodName,omitempty" tf:"ignore_open_shift_build_pod_name,omitempty"`

	// sdn namespace.
	// Disable monitoring of platform internal containers in the openshift-sdn namespace.
	IgnoreOpenShiftSdnNamespace *bool `json:"ignoreOpenShiftSdnNamespace,omitempty" tf:"ignore_open_shift_sdn_namespace,omitempty"`
}

type ContainerBuiltinRuleParameters struct {

	// (Boolean) Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	// Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	// +kubebuilder:validation:Optional
	IgnoreDockerPauseContainer *bool `json:"ignoreDockerPauseContainer,omitempty" tf:"ignore_docker_pause_container,omitempty"`

	// (Boolean) Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	// Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.
	// +kubebuilder:validation:Optional
	IgnoreKubernetesPauseContainer *bool `json:"ignoreKubernetesPauseContainer,omitempty" tf:"ignore_kubernetes_pause_container,omitempty"`

	// (Boolean) Disable monitoring of intermediate containers created during image build.
	// Disable monitoring of intermediate containers created during image build.
	// +kubebuilder:validation:Optional
	IgnoreOpenShiftBuildPodName *bool `json:"ignoreOpenShiftBuildPodName,omitempty" tf:"ignore_open_shift_build_pod_name,omitempty"`

	// sdn namespace.
	// Disable monitoring of platform internal containers in the openshift-sdn namespace.
	// +kubebuilder:validation:Optional
	IgnoreOpenShiftSdnNamespace *bool `json:"ignoreOpenShiftSdnNamespace,omitempty" tf:"ignore_open_shift_sdn_namespace,omitempty"`
}

// ContainerBuiltinRuleSpec defines the desired state of ContainerBuiltinRule
type ContainerBuiltinRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContainerBuiltinRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContainerBuiltinRuleInitParameters `json:"initProvider,omitempty"`
}

// ContainerBuiltinRuleStatus defines the observed state of ContainerBuiltinRule.
type ContainerBuiltinRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContainerBuiltinRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ContainerBuiltinRule is the Schema for the ContainerBuiltinRules API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ContainerBuiltinRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ignoreDockerPauseContainer) || (has(self.initProvider) && has(self.initProvider.ignoreDockerPauseContainer))",message="spec.forProvider.ignoreDockerPauseContainer is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ignoreKubernetesPauseContainer) || (has(self.initProvider) && has(self.initProvider.ignoreKubernetesPauseContainer))",message="spec.forProvider.ignoreKubernetesPauseContainer is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ignoreOpenShiftBuildPodName) || (has(self.initProvider) && has(self.initProvider.ignoreOpenShiftBuildPodName))",message="spec.forProvider.ignoreOpenShiftBuildPodName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ignoreOpenShiftSdnNamespace) || (has(self.initProvider) && has(self.initProvider.ignoreOpenShiftSdnNamespace))",message="spec.forProvider.ignoreOpenShiftSdnNamespace is a required parameter"
	Spec   ContainerBuiltinRuleSpec   `json:"spec"`
	Status ContainerBuiltinRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerBuiltinRuleList contains a list of ContainerBuiltinRules
type ContainerBuiltinRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerBuiltinRule `json:"items"`
}

// Repository type metadata.
var (
	ContainerBuiltinRule_Kind             = "ContainerBuiltinRule"
	ContainerBuiltinRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContainerBuiltinRule_Kind}.String()
	ContainerBuiltinRule_KindAPIVersion   = ContainerBuiltinRule_Kind + "." + CRDGroupVersion.String()
	ContainerBuiltinRule_GroupVersionKind = CRDGroupVersion.WithKind(ContainerBuiltinRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ContainerBuiltinRule{}, &ContainerBuiltinRuleList{})
}
