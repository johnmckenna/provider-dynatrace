// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContainerTechnologyInitParameters struct {

	// (Boolean) Platform: Cloud Foundry
	// Platform: Cloud Foundry
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.159
	BoshProcessManager *bool `json:"boshProcessManager,omitempty" tf:"bosh_process_manager,omitempty"`

	// (Boolean) Platform: Kubernetes
	// Platform: Kubernetes
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.169
	Containerd *bool `json:"containerd,omitempty" tf:"containerd,omitempty"`

	// (Boolean) Platform: Kubernetes
	// Platform: Kubernetes
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.163
	Crio *bool `json:"crio,omitempty" tf:"crio,omitempty"`

	// (Boolean) Platform: Docker and Kubernetes
	// Platform: Docker and Kubernetes
	//
	// Status: Released
	//
	// Operating system: Linux
	Docker *bool `json:"docker,omitempty" tf:"docker,omitempty"`

	// (Boolean) Platform: Docker
	// Platform: Docker
	//
	// Status: Early adopter
	//
	// Operating system: Windows
	//
	// Min agent version: 1.149
	DockerWindows *bool `json:"dockerWindows,omitempty" tf:"docker_windows,omitempty"`

	// (Boolean) Platform: Cloud Foundry
	// Platform: Cloud Foundry
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.133
	Garden *bool `json:"garden,omitempty" tf:"garden,omitempty"`

	// (Boolean) Platform: Podman
	// Platform: Podman
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.267
	Podman *bool `json:"podman,omitempty" tf:"podman,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Boolean) Platform: Cloud Foundry
	// Platform: Cloud Foundry
	//
	// Status: Early adopter
	//
	// Operating system: Windows
	//
	// Min agent version: 1.175
	Winc *bool `json:"winc,omitempty" tf:"winc,omitempty"`
}

type ContainerTechnologyObservation struct {

	// (Boolean) Platform: Cloud Foundry
	// Platform: Cloud Foundry
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.159
	BoshProcessManager *bool `json:"boshProcessManager,omitempty" tf:"bosh_process_manager,omitempty"`

	// (Boolean) Platform: Kubernetes
	// Platform: Kubernetes
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.169
	Containerd *bool `json:"containerd,omitempty" tf:"containerd,omitempty"`

	// (Boolean) Platform: Kubernetes
	// Platform: Kubernetes
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.163
	Crio *bool `json:"crio,omitempty" tf:"crio,omitempty"`

	// (Boolean) Platform: Docker and Kubernetes
	// Platform: Docker and Kubernetes
	//
	// Status: Released
	//
	// Operating system: Linux
	Docker *bool `json:"docker,omitempty" tf:"docker,omitempty"`

	// (Boolean) Platform: Docker
	// Platform: Docker
	//
	// Status: Early adopter
	//
	// Operating system: Windows
	//
	// Min agent version: 1.149
	DockerWindows *bool `json:"dockerWindows,omitempty" tf:"docker_windows,omitempty"`

	// (Boolean) Platform: Cloud Foundry
	// Platform: Cloud Foundry
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.133
	Garden *bool `json:"garden,omitempty" tf:"garden,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Platform: Podman
	// Platform: Podman
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.267
	Podman *bool `json:"podman,omitempty" tf:"podman,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Boolean) Platform: Cloud Foundry
	// Platform: Cloud Foundry
	//
	// Status: Early adopter
	//
	// Operating system: Windows
	//
	// Min agent version: 1.175
	Winc *bool `json:"winc,omitempty" tf:"winc,omitempty"`
}

type ContainerTechnologyParameters struct {

	// (Boolean) Platform: Cloud Foundry
	// Platform: Cloud Foundry
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.159
	// +kubebuilder:validation:Optional
	BoshProcessManager *bool `json:"boshProcessManager,omitempty" tf:"bosh_process_manager,omitempty"`

	// (Boolean) Platform: Kubernetes
	// Platform: Kubernetes
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.169
	// +kubebuilder:validation:Optional
	Containerd *bool `json:"containerd,omitempty" tf:"containerd,omitempty"`

	// (Boolean) Platform: Kubernetes
	// Platform: Kubernetes
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.163
	// +kubebuilder:validation:Optional
	Crio *bool `json:"crio,omitempty" tf:"crio,omitempty"`

	// (Boolean) Platform: Docker and Kubernetes
	// Platform: Docker and Kubernetes
	//
	// Status: Released
	//
	// Operating system: Linux
	// +kubebuilder:validation:Optional
	Docker *bool `json:"docker,omitempty" tf:"docker,omitempty"`

	// (Boolean) Platform: Docker
	// Platform: Docker
	//
	// Status: Early adopter
	//
	// Operating system: Windows
	//
	// Min agent version: 1.149
	// +kubebuilder:validation:Optional
	DockerWindows *bool `json:"dockerWindows,omitempty" tf:"docker_windows,omitempty"`

	// (Boolean) Platform: Cloud Foundry
	// Platform: Cloud Foundry
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.133
	// +kubebuilder:validation:Optional
	Garden *bool `json:"garden,omitempty" tf:"garden,omitempty"`

	// (Boolean) Platform: Podman
	// Platform: Podman
	//
	// Status: Released
	//
	// Operating system: Linux
	//
	// Min agent version: 1.267
	// +kubebuilder:validation:Optional
	Podman *bool `json:"podman,omitempty" tf:"podman,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Boolean) Platform: Cloud Foundry
	// Platform: Cloud Foundry
	//
	// Status: Early adopter
	//
	// Operating system: Windows
	//
	// Min agent version: 1.175
	// +kubebuilder:validation:Optional
	Winc *bool `json:"winc,omitempty" tf:"winc,omitempty"`
}

// ContainerTechnologySpec defines the desired state of ContainerTechnology
type ContainerTechnologySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContainerTechnologyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContainerTechnologyInitParameters `json:"initProvider,omitempty"`
}

// ContainerTechnologyStatus defines the observed state of ContainerTechnology.
type ContainerTechnologyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContainerTechnologyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ContainerTechnology is the Schema for the ContainerTechnologys API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ContainerTechnology struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.boshProcessManager) || (has(self.initProvider) && has(self.initProvider.boshProcessManager))",message="spec.forProvider.boshProcessManager is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.containerd) || (has(self.initProvider) && has(self.initProvider.containerd))",message="spec.forProvider.containerd is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.crio) || (has(self.initProvider) && has(self.initProvider.crio))",message="spec.forProvider.crio is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.docker) || (has(self.initProvider) && has(self.initProvider.docker))",message="spec.forProvider.docker is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dockerWindows) || (has(self.initProvider) && has(self.initProvider.dockerWindows))",message="spec.forProvider.dockerWindows is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.garden) || (has(self.initProvider) && has(self.initProvider.garden))",message="spec.forProvider.garden is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.podman) || (has(self.initProvider) && has(self.initProvider.podman))",message="spec.forProvider.podman is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.winc) || (has(self.initProvider) && has(self.initProvider.winc))",message="spec.forProvider.winc is a required parameter"
	Spec   ContainerTechnologySpec   `json:"spec"`
	Status ContainerTechnologyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerTechnologyList contains a list of ContainerTechnologys
type ContainerTechnologyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerTechnology `json:"items"`
}

// Repository type metadata.
var (
	ContainerTechnology_Kind             = "ContainerTechnology"
	ContainerTechnology_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContainerTechnology_Kind}.String()
	ContainerTechnology_KindAPIVersion   = ContainerTechnology_Kind + "." + CRDGroupVersion.String()
	ContainerTechnology_GroupVersionKind = CRDGroupVersion.WithKind(ContainerTechnology_Kind)
)

func init() {
	SchemeBuilder.Register(&ContainerTechnology{}, &ContainerTechnologyList{})
}
