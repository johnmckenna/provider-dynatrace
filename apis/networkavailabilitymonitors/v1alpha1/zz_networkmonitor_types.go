// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConstraintInitParameters struct {

	// (Map of String) Key/value pairs of properties which apply to all requests in the step
	// Key/value pairs of constraint properties
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Type of the monitor, possible values: MULTI_PROTOCOL
	// Constraint type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConstraintObservation struct {

	// (Map of String) Key/value pairs of properties which apply to all requests in the step
	// Key/value pairs of constraint properties
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Type of the monitor, possible values: MULTI_PROTOCOL
	// Constraint type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConstraintParameters struct {

	// (Map of String) Key/value pairs of properties which apply to all requests in the step
	// Key/value pairs of constraint properties
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties" tf:"properties,omitempty"`

	// (String) Type of the monitor, possible values: MULTI_PROTOCOL
	// Constraint type
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ConstraintsConstraintInitParameters struct {

	// (Map of String) Key/value pairs of properties which apply to all requests in the step
	// Key/value pairs of constraint properties
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Type of the monitor, possible values: MULTI_PROTOCOL
	// Constraint type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConstraintsConstraintObservation struct {

	// (Map of String) Key/value pairs of properties which apply to all requests in the step
	// Key/value pairs of constraint properties
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// (String) Type of the monitor, possible values: MULTI_PROTOCOL
	// Constraint type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConstraintsConstraintParameters struct {

	// (Map of String) Key/value pairs of properties which apply to all requests in the step
	// Key/value pairs of constraint properties
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties" tf:"properties,omitempty"`

	// (String) Type of the monitor, possible values: MULTI_PROTOCOL
	// Constraint type
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ConstraintsInitParameters struct {

	// (Block Set, Min: 1) The network availability monitor constraint (see below for nested schema)
	// The network availability monitor constraint
	Constraint []ConstraintInitParameters `json:"constraint,omitempty" tf:"constraint,omitempty"`
}

type ConstraintsObservation struct {

	// (Block Set, Min: 1) The network availability monitor constraint (see below for nested schema)
	// The network availability monitor constraint
	Constraint []ConstraintObservation `json:"constraint,omitempty" tf:"constraint,omitempty"`
}

type ConstraintsParameters struct {

	// (Block Set, Min: 1) The network availability monitor constraint (see below for nested schema)
	// The network availability monitor constraint
	// +kubebuilder:validation:Optional
	Constraint []ConstraintParameters `json:"constraint" tf:"constraint,omitempty"`
}

type NetworkMonitorInitParameters struct {

	// (String) Description of the monitor
	// Description of the monitor
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) If true, the monitor is enabled
	// If true, the monitor is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) Frequency of the monitor, in minutes
	// Frequency of the monitor, in minutes
	FrequencyMin *float64 `json:"frequencyMin,omitempty" tf:"frequency_min,omitempty"`

	// (Set of String) The locations to which the monitor is assigned
	// The locations to which the monitor is assigned
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (String) Name of the monitor
	// Name of the monitor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Outage handling configuration (see below for nested schema)
	// Outage handling configuration
	OutageHandling []OutageHandlingInitParameters `json:"outageHandling,omitempty" tf:"outage_handling,omitempty"`

	// (Block List, Max: 1) Performance thresholds configuration (see below for nested schema)
	// Performance thresholds configuration
	PerformanceThresholds []PerformanceThresholdsInitParameters `json:"performanceThresholds,omitempty" tf:"performance_thresholds,omitempty"`

	// (Block List, Min: 1) The steps of the monitor (see below for nested schema)
	// The steps of the monitor
	Steps []StepsInitParameters `json:"steps,omitempty" tf:"steps,omitempty"`

	// (Block List) A set of tags assigned to the monitor.
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the CONTEXTLESS context and source 'USER' will be added automatically. But preferred option is usage of SyntheticTagWithSourceDto model.
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Type of the monitor, possible values: MULTI_PROTOCOL
	// Type of the monitor, possible values: `MULTI_PROTOCOL`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NetworkMonitorObservation struct {

	// (String) Description of the monitor
	// Description of the monitor
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) If true, the monitor is enabled
	// If true, the monitor is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) Frequency of the monitor, in minutes
	// Frequency of the monitor, in minutes
	FrequencyMin *float64 `json:"frequencyMin,omitempty" tf:"frequency_min,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) The locations to which the monitor is assigned
	// The locations to which the monitor is assigned
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (String) Name of the monitor
	// Name of the monitor
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Outage handling configuration (see below for nested schema)
	// Outage handling configuration
	OutageHandling []OutageHandlingObservation `json:"outageHandling,omitempty" tf:"outage_handling,omitempty"`

	// (Block List, Max: 1) Performance thresholds configuration (see below for nested schema)
	// Performance thresholds configuration
	PerformanceThresholds []PerformanceThresholdsObservation `json:"performanceThresholds,omitempty" tf:"performance_thresholds,omitempty"`

	// (Block List, Min: 1) The steps of the monitor (see below for nested schema)
	// The steps of the monitor
	Steps []StepsObservation `json:"steps,omitempty" tf:"steps,omitempty"`

	// (Block List) A set of tags assigned to the monitor.
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the CONTEXTLESS context and source 'USER' will be added automatically. But preferred option is usage of SyntheticTagWithSourceDto model.
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Type of the monitor, possible values: MULTI_PROTOCOL
	// Type of the monitor, possible values: `MULTI_PROTOCOL`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NetworkMonitorParameters struct {

	// (String) Description of the monitor
	// Description of the monitor
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) If true, the monitor is enabled
	// If true, the monitor is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) Frequency of the monitor, in minutes
	// Frequency of the monitor, in minutes
	// +kubebuilder:validation:Optional
	FrequencyMin *float64 `json:"frequencyMin,omitempty" tf:"frequency_min,omitempty"`

	// (Set of String) The locations to which the monitor is assigned
	// The locations to which the monitor is assigned
	// +kubebuilder:validation:Optional
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (String) Name of the monitor
	// Name of the monitor
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Outage handling configuration (see below for nested schema)
	// Outage handling configuration
	// +kubebuilder:validation:Optional
	OutageHandling []OutageHandlingParameters `json:"outageHandling,omitempty" tf:"outage_handling,omitempty"`

	// (Block List, Max: 1) Performance thresholds configuration (see below for nested schema)
	// Performance thresholds configuration
	// +kubebuilder:validation:Optional
	PerformanceThresholds []PerformanceThresholdsParameters `json:"performanceThresholds,omitempty" tf:"performance_thresholds,omitempty"`

	// (Block List, Min: 1) The steps of the monitor (see below for nested schema)
	// The steps of the monitor
	// +kubebuilder:validation:Optional
	Steps []StepsParameters `json:"steps,omitempty" tf:"steps,omitempty"`

	// (Block List) A set of tags assigned to the monitor.
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the CONTEXTLESS context and source 'USER' will be added automatically. But preferred option is usage of SyntheticTagWithSourceDto model.
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) Type of the monitor, possible values: MULTI_PROTOCOL
	// Type of the monitor, possible values: `MULTI_PROTOCOL`
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OutageHandlingInitParameters struct {

	// (Number) Number of consecutive failures for all locations
	// Number of consecutive failures for all locations
	GlobalConsecutiveOutageCountThreshold *float64 `json:"globalConsecutiveOutageCountThreshold,omitempty" tf:"global_consecutive_outage_count_threshold,omitempty"`

	// (Boolean) Generate a problem and send an alert when the monitor is unavailable at all configured locations
	// Generate a problem and send an alert when the monitor is unavailable at all configured locations
	GlobalOutages *bool `json:"globalOutages,omitempty" tf:"global_outages,omitempty"`

	// (Number) Number of consecutive failures
	// Number of consecutive failures
	LocalConsecutiveOutageCountThreshold *float64 `json:"localConsecutiveOutageCountThreshold,omitempty" tf:"local_consecutive_outage_count_threshold,omitempty"`

	// (Number) Number of failing locations
	// Number of failing locations
	LocalLocationOutageCountThreshold *float64 `json:"localLocationOutageCountThreshold,omitempty" tf:"local_location_outage_count_threshold,omitempty"`

	// (Boolean) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	LocalOutages *bool `json:"localOutages,omitempty" tf:"local_outages,omitempty"`
}

type OutageHandlingObservation struct {

	// (Number) Number of consecutive failures for all locations
	// Number of consecutive failures for all locations
	GlobalConsecutiveOutageCountThreshold *float64 `json:"globalConsecutiveOutageCountThreshold,omitempty" tf:"global_consecutive_outage_count_threshold,omitempty"`

	// (Boolean) Generate a problem and send an alert when the monitor is unavailable at all configured locations
	// Generate a problem and send an alert when the monitor is unavailable at all configured locations
	GlobalOutages *bool `json:"globalOutages,omitempty" tf:"global_outages,omitempty"`

	// (Number) Number of consecutive failures
	// Number of consecutive failures
	LocalConsecutiveOutageCountThreshold *float64 `json:"localConsecutiveOutageCountThreshold,omitempty" tf:"local_consecutive_outage_count_threshold,omitempty"`

	// (Number) Number of failing locations
	// Number of failing locations
	LocalLocationOutageCountThreshold *float64 `json:"localLocationOutageCountThreshold,omitempty" tf:"local_location_outage_count_threshold,omitempty"`

	// (Boolean) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	LocalOutages *bool `json:"localOutages,omitempty" tf:"local_outages,omitempty"`
}

type OutageHandlingParameters struct {

	// (Number) Number of consecutive failures for all locations
	// Number of consecutive failures for all locations
	// +kubebuilder:validation:Optional
	GlobalConsecutiveOutageCountThreshold *float64 `json:"globalConsecutiveOutageCountThreshold,omitempty" tf:"global_consecutive_outage_count_threshold,omitempty"`

	// (Boolean) Generate a problem and send an alert when the monitor is unavailable at all configured locations
	// Generate a problem and send an alert when the monitor is unavailable at all configured locations
	// +kubebuilder:validation:Optional
	GlobalOutages *bool `json:"globalOutages,omitempty" tf:"global_outages,omitempty"`

	// (Number) Number of consecutive failures
	// Number of consecutive failures
	// +kubebuilder:validation:Optional
	LocalConsecutiveOutageCountThreshold *float64 `json:"localConsecutiveOutageCountThreshold,omitempty" tf:"local_consecutive_outage_count_threshold,omitempty"`

	// (Number) Number of failing locations
	// Number of failing locations
	// +kubebuilder:validation:Optional
	LocalLocationOutageCountThreshold *float64 `json:"localLocationOutageCountThreshold,omitempty" tf:"local_location_outage_count_threshold,omitempty"`

	// (Boolean) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// +kubebuilder:validation:Optional
	LocalOutages *bool `json:"localOutages,omitempty" tf:"local_outages,omitempty"`
}

type PerformanceThresholdsInitParameters struct {

	// (Boolean) If true, the monitor is enabled
	// Performance threshold is enabled (true) or disabled (false)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Thresholds []ThresholdsInitParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type PerformanceThresholdsObservation struct {

	// (Boolean) If true, the monitor is enabled
	// Performance threshold is enabled (true) or disabled (false)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Thresholds []ThresholdsObservation `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type PerformanceThresholdsParameters struct {

	// (Boolean) If true, the monitor is enabled
	// Performance threshold is enabled (true) or disabled (false)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	// +kubebuilder:validation:Optional
	Thresholds []ThresholdsParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type RequestConfigurationConstraintsInitParameters struct {

	// (Block Set, Min: 1) The network availability monitor constraint (see below for nested schema)
	// The network availability monitor constraint
	Constraint []ConstraintsConstraintInitParameters `json:"constraint,omitempty" tf:"constraint,omitempty"`
}

type RequestConfigurationConstraintsObservation struct {

	// (Block Set, Min: 1) The network availability monitor constraint (see below for nested schema)
	// The network availability monitor constraint
	Constraint []ConstraintsConstraintObservation `json:"constraint,omitempty" tf:"constraint,omitempty"`
}

type RequestConfigurationConstraintsParameters struct {

	// (Block Set, Min: 1) The network availability monitor constraint (see below for nested schema)
	// The network availability monitor constraint
	// +kubebuilder:validation:Optional
	Constraint []ConstraintsConstraintParameters `json:"constraint" tf:"constraint,omitempty"`
}

type RequestConfigurationInitParameters struct {

	// (Block List, Min: 1) The list of constraints which apply to all requests in the step (see below for nested schema)
	// Request constraints
	Constraints []RequestConfigurationConstraintsInitParameters `json:"constraints,omitempty" tf:"constraints,omitempty"`
}

type RequestConfigurationObservation struct {

	// (Block List, Min: 1) The list of constraints which apply to all requests in the step (see below for nested schema)
	// Request constraints
	Constraints []RequestConfigurationConstraintsObservation `json:"constraints,omitempty" tf:"constraints,omitempty"`
}

type RequestConfigurationParameters struct {

	// (Block List, Min: 1) The list of constraints which apply to all requests in the step (see below for nested schema)
	// Request constraints
	// +kubebuilder:validation:Optional
	Constraints []RequestConfigurationConstraintsParameters `json:"constraints,omitempty" tf:"constraints,omitempty"`
}

type RequestConfigurationsInitParameters struct {

	// (Block Set, Min: 1) The configuration of a network availability monitor request (see below for nested schema)
	// The configuration of a network availability monitor request
	RequestConfiguration []RequestConfigurationInitParameters `json:"requestConfiguration,omitempty" tf:"request_configuration,omitempty"`
}

type RequestConfigurationsObservation struct {

	// (Block Set, Min: 1) The configuration of a network availability monitor request (see below for nested schema)
	// The configuration of a network availability monitor request
	RequestConfiguration []RequestConfigurationObservation `json:"requestConfiguration,omitempty" tf:"request_configuration,omitempty"`
}

type RequestConfigurationsParameters struct {

	// (Block Set, Min: 1) The configuration of a network availability monitor request (see below for nested schema)
	// The configuration of a network availability monitor request
	// +kubebuilder:validation:Optional
	RequestConfiguration []RequestConfigurationParameters `json:"requestConfiguration" tf:"request_configuration,omitempty"`
}

type StepInitParameters struct {

	// (Block List, Min: 1) The list of constraints which apply to all requests in the step (see below for nested schema)
	// The list of constraints which apply to all requests in the step
	Constraints []ConstraintsInitParameters `json:"constraints,omitempty" tf:"constraints,omitempty"`

	// (String) Name of the monitor
	// Step name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Map of String) Key/value pairs of properties which apply to all requests in the step
	// Key/value pairs of properties which apply to all requests in the step
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// (Block List) Request configurations (see below for nested schema)
	// Request configurations
	RequestConfigurations []RequestConfigurationsInitParameters `json:"requestConfigurations,omitempty" tf:"request_configurations,omitempty"`

	// (String) Request type, possible values ICMP, TCP, DNS
	// Request type, possible values `ICMP`, `TCP`, `DNS`
	RequestType *string `json:"requestType,omitempty" tf:"request_type,omitempty"`

	// (String) Target filter
	// Target filter
	TargetFilter *string `json:"targetFilter,omitempty" tf:"target_filter,omitempty"`

	// (Set of String) Target list
	// Target list
	// +listType=set
	TargetList []*string `json:"targetList,omitempty" tf:"target_list,omitempty"`
}

type StepObservation struct {

	// (Block List, Min: 1) The list of constraints which apply to all requests in the step (see below for nested schema)
	// The list of constraints which apply to all requests in the step
	Constraints []ConstraintsObservation `json:"constraints,omitempty" tf:"constraints,omitempty"`

	// (String) Name of the monitor
	// Step name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Map of String) Key/value pairs of properties which apply to all requests in the step
	// Key/value pairs of properties which apply to all requests in the step
	// +mapType=granular
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// (Block List) Request configurations (see below for nested schema)
	// Request configurations
	RequestConfigurations []RequestConfigurationsObservation `json:"requestConfigurations,omitempty" tf:"request_configurations,omitempty"`

	// (String) Request type, possible values ICMP, TCP, DNS
	// Request type, possible values `ICMP`, `TCP`, `DNS`
	RequestType *string `json:"requestType,omitempty" tf:"request_type,omitempty"`

	// (String) Target filter
	// Target filter
	TargetFilter *string `json:"targetFilter,omitempty" tf:"target_filter,omitempty"`

	// (Set of String) Target list
	// Target list
	// +listType=set
	TargetList []*string `json:"targetList,omitempty" tf:"target_list,omitempty"`
}

type StepParameters struct {

	// (Block List, Min: 1) The list of constraints which apply to all requests in the step (see below for nested schema)
	// The list of constraints which apply to all requests in the step
	// +kubebuilder:validation:Optional
	Constraints []ConstraintsParameters `json:"constraints" tf:"constraints,omitempty"`

	// (String) Name of the monitor
	// Step name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Map of String) Key/value pairs of properties which apply to all requests in the step
	// Key/value pairs of properties which apply to all requests in the step
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Properties map[string]*string `json:"properties" tf:"properties,omitempty"`

	// (Block List) Request configurations (see below for nested schema)
	// Request configurations
	// +kubebuilder:validation:Optional
	RequestConfigurations []RequestConfigurationsParameters `json:"requestConfigurations,omitempty" tf:"request_configurations,omitempty"`

	// (String) Request type, possible values ICMP, TCP, DNS
	// Request type, possible values `ICMP`, `TCP`, `DNS`
	// +kubebuilder:validation:Optional
	RequestType *string `json:"requestType" tf:"request_type,omitempty"`

	// (String) Target filter
	// Target filter
	// +kubebuilder:validation:Optional
	TargetFilter *string `json:"targetFilter,omitempty" tf:"target_filter,omitempty"`

	// (Set of String) Target list
	// Target list
	// +kubebuilder:validation:Optional
	// +listType=set
	TargetList []*string `json:"targetList" tf:"target_list,omitempty"`
}

type StepsInitParameters struct {

	// (Block List, Min: 1) The step of a network availability monitor (see below for nested schema)
	// The step of a network availability monitor
	Step []StepInitParameters `json:"step,omitempty" tf:"step,omitempty"`
}

type StepsObservation struct {

	// (Block List, Min: 1) The step of a network availability monitor (see below for nested schema)
	// The step of a network availability monitor
	Step []StepObservation `json:"step,omitempty" tf:"step,omitempty"`
}

type StepsParameters struct {

	// (Block List, Min: 1) The step of a network availability monitor (see below for nested schema)
	// The step of a network availability monitor
	// +kubebuilder:validation:Optional
	Step []StepParameters `json:"step" tf:"step,omitempty"`
}

type TagInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry.
	// The origin of the tag, such as AWS or Cloud Foundry.
	//
	// Custom tags use the CONTEXTLESS value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag
	// The key of the tag
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the tag, possible values: AUTO, RULE_BASED or USER
	// The source of the tag, possible values: `AUTO`, `RULE_BASED` or `USER`
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The value of the tag
	// The value of the tag
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry.
	// The origin of the tag, such as AWS or Cloud Foundry.
	//
	// Custom tags use the CONTEXTLESS value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag
	// The key of the tag
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the tag, possible values: AUTO, RULE_BASED or USER
	// The source of the tag, possible values: `AUTO`, `RULE_BASED` or `USER`
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The value of the tag
	// The value of the tag
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry.
	// The origin of the tag, such as AWS or Cloud Foundry.
	//
	// Custom tags use the CONTEXTLESS value
	// +kubebuilder:validation:Optional
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag
	// The key of the tag
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the tag, possible values: AUTO, RULE_BASED or USER
	// The source of the tag, possible values: `AUTO`, `RULE_BASED` or `USER`
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The value of the tag
	// The value of the tag
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsInitParameters struct {

	// (Block Set) Tag with source of a Dynatrace entity. (see below for nested schema)
	// Tag with source of a Dynatrace entity.
	Tag []TagInitParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagsObservation struct {

	// (Block Set) Tag with source of a Dynatrace entity. (see below for nested schema)
	// Tag with source of a Dynatrace entity.
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagsParameters struct {

	// (Block Set) Tag with source of a Dynatrace entity. (see below for nested schema)
	// Tag with source of a Dynatrace entity.
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ThresholdInitParameters struct {

	// (String) Aggregation type, possible values: AVG, MAX, MIN
	// Aggregation type, possible values: `AVG`, `MAX`, `MIN`
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// violating request executions that closes the problem
	// Number of most recent non-violating request executions that closes the problem
	DealertingSamples *float64 `json:"dealertingSamples,omitempty" tf:"dealerting_samples,omitempty"`

	// (Number) Number of request executions in analyzed sliding window (sliding window size)
	// Number of request executions in analyzed sliding window (sliding window size)
	Samples *float64 `json:"samples,omitempty" tf:"samples,omitempty"`

	// (Number) Specify the step's index to which a threshold applies
	// Specify the step's index to which a threshold applies
	StepIndex *float64 `json:"stepIndex,omitempty" tf:"step_index,omitempty"`

	// (Block Set) The list of performance threshold rules (see below for nested schema)
	// Notify if monitor request takes longer than X milliseconds to execute
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// (Number) Number of violating request executions in analyzed sliding window
	// Number of violating request executions in analyzed sliding window
	ViolatingSamples *float64 `json:"violatingSamples,omitempty" tf:"violating_samples,omitempty"`
}

type ThresholdObservation struct {

	// (String) Aggregation type, possible values: AVG, MAX, MIN
	// Aggregation type, possible values: `AVG`, `MAX`, `MIN`
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// violating request executions that closes the problem
	// Number of most recent non-violating request executions that closes the problem
	DealertingSamples *float64 `json:"dealertingSamples,omitempty" tf:"dealerting_samples,omitempty"`

	// (Number) Number of request executions in analyzed sliding window (sliding window size)
	// Number of request executions in analyzed sliding window (sliding window size)
	Samples *float64 `json:"samples,omitempty" tf:"samples,omitempty"`

	// (Number) Specify the step's index to which a threshold applies
	// Specify the step's index to which a threshold applies
	StepIndex *float64 `json:"stepIndex,omitempty" tf:"step_index,omitempty"`

	// (Block Set) The list of performance threshold rules (see below for nested schema)
	// Notify if monitor request takes longer than X milliseconds to execute
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// (Number) Number of violating request executions in analyzed sliding window
	// Number of violating request executions in analyzed sliding window
	ViolatingSamples *float64 `json:"violatingSamples,omitempty" tf:"violating_samples,omitempty"`
}

type ThresholdParameters struct {

	// (String) Aggregation type, possible values: AVG, MAX, MIN
	// Aggregation type, possible values: `AVG`, `MAX`, `MIN`
	// +kubebuilder:validation:Optional
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// violating request executions that closes the problem
	// Number of most recent non-violating request executions that closes the problem
	// +kubebuilder:validation:Optional
	DealertingSamples *float64 `json:"dealertingSamples,omitempty" tf:"dealerting_samples,omitempty"`

	// (Number) Number of request executions in analyzed sliding window (sliding window size)
	// Number of request executions in analyzed sliding window (sliding window size)
	// +kubebuilder:validation:Optional
	Samples *float64 `json:"samples,omitempty" tf:"samples,omitempty"`

	// (Number) Specify the step's index to which a threshold applies
	// Specify the step's index to which a threshold applies
	// +kubebuilder:validation:Optional
	StepIndex *float64 `json:"stepIndex,omitempty" tf:"step_index,omitempty"`

	// (Block Set) The list of performance threshold rules (see below for nested schema)
	// Notify if monitor request takes longer than X milliseconds to execute
	// +kubebuilder:validation:Optional
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// (Number) Number of violating request executions in analyzed sliding window
	// Number of violating request executions in analyzed sliding window
	// +kubebuilder:validation:Optional
	ViolatingSamples *float64 `json:"violatingSamples,omitempty" tf:"violating_samples,omitempty"`
}

type ThresholdsInitParameters struct {

	// (Block Set) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Threshold []ThresholdInitParameters `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type ThresholdsObservation struct {

	// (Block Set) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Threshold []ThresholdObservation `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type ThresholdsParameters struct {

	// (Block Set) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	// +kubebuilder:validation:Optional
	Threshold []ThresholdParameters `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

// NetworkMonitorSpec defines the desired state of NetworkMonitor
type NetworkMonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkMonitorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkMonitorInitParameters `json:"initProvider,omitempty"`
}

// NetworkMonitorStatus defines the observed state of NetworkMonitor.
type NetworkMonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkMonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NetworkMonitor is the Schema for the NetworkMonitors API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type NetworkMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.locations) || (has(self.initProvider) && has(self.initProvider.locations))",message="spec.forProvider.locations is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.steps) || (has(self.initProvider) && has(self.initProvider.steps))",message="spec.forProvider.steps is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   NetworkMonitorSpec   `json:"spec"`
	Status NetworkMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkMonitorList contains a list of NetworkMonitors
type NetworkMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkMonitor `json:"items"`
}

// Repository type metadata.
var (
	NetworkMonitor_Kind             = "NetworkMonitor"
	NetworkMonitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkMonitor_Kind}.String()
	NetworkMonitor_KindAPIVersion   = NetworkMonitor_Kind + "." + CRDGroupVersion.String()
	NetworkMonitor_GroupVersionKind = CRDGroupVersion.WithKind(NetworkMonitor_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkMonitor{}, &NetworkMonitorList{})
}
