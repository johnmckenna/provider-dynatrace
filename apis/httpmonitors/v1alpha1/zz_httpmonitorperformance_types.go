// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HTTPMonitorPerformanceInitParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The scope of this setting (HTTP_CHECK)
	// The scope of this setting (HTTP_CHECK)
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Block List, Max: 1) Performance thresholds (see below for nested schema)
	// Performance thresholds
	Thresholds []HTTPMonitorPerformanceThresholdsInitParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type HTTPMonitorPerformanceObservation struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The scope of this setting (HTTP_CHECK)
	// The scope of this setting (HTTP_CHECK)
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Block List, Max: 1) Performance thresholds (see below for nested schema)
	// Performance thresholds
	Thresholds []HTTPMonitorPerformanceThresholdsObservation `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type HTTPMonitorPerformanceParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The scope of this setting (HTTP_CHECK)
	// The scope of this setting (HTTP_CHECK)
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Block List, Max: 1) Performance thresholds (see below for nested schema)
	// Performance thresholds
	// +kubebuilder:validation:Optional
	Thresholds []HTTPMonitorPerformanceThresholdsParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type HTTPMonitorPerformanceThresholdsInitParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Threshold []ThresholdsThresholdInitParameters `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type HTTPMonitorPerformanceThresholdsObservation struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Threshold []ThresholdsThresholdObservation `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type HTTPMonitorPerformanceThresholdsParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Threshold []ThresholdsThresholdParameters `json:"threshold" tf:"threshold,omitempty"`
}

type ThresholdsThresholdInitParameters struct {

	// (String) Request
	// Request
	Event *string `json:"event,omitempty" tf:"event,omitempty"`

	// (Block Set, Min: 1) (see below for nested schema)
	// Threshold (in seconds)
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type ThresholdsThresholdObservation struct {

	// (String) Request
	// Request
	Event *string `json:"event,omitempty" tf:"event,omitempty"`

	// (Block Set, Min: 1) (see below for nested schema)
	// Threshold (in seconds)
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type ThresholdsThresholdParameters struct {

	// (String) Request
	// Request
	// +kubebuilder:validation:Optional
	Event *string `json:"event" tf:"event,omitempty"`

	// (Block Set, Min: 1) (see below for nested schema)
	// Threshold (in seconds)
	// +kubebuilder:validation:Optional
	Threshold *float64 `json:"threshold" tf:"threshold,omitempty"`
}

// HTTPMonitorPerformanceSpec defines the desired state of HTTPMonitorPerformance
type HTTPMonitorPerformanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HTTPMonitorPerformanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HTTPMonitorPerformanceInitParameters `json:"initProvider,omitempty"`
}

// HTTPMonitorPerformanceStatus defines the observed state of HTTPMonitorPerformance.
type HTTPMonitorPerformanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HTTPMonitorPerformanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HTTPMonitorPerformance is the Schema for the HTTPMonitorPerformances API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type HTTPMonitorPerformance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) && has(self.initProvider.scope))",message="spec.forProvider.scope is a required parameter"
	Spec   HTTPMonitorPerformanceSpec   `json:"spec"`
	Status HTTPMonitorPerformanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPMonitorPerformanceList contains a list of HTTPMonitorPerformances
type HTTPMonitorPerformanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HTTPMonitorPerformance `json:"items"`
}

// Repository type metadata.
var (
	HTTPMonitorPerformance_Kind             = "HTTPMonitorPerformance"
	HTTPMonitorPerformance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HTTPMonitorPerformance_Kind}.String()
	HTTPMonitorPerformance_KindAPIVersion   = HTTPMonitorPerformance_Kind + "." + CRDGroupVersion.String()
	HTTPMonitorPerformance_GroupVersionKind = CRDGroupVersion.WithKind(HTTPMonitorPerformance_Kind)
)

func init() {
	SchemeBuilder.Register(&HTTPMonitorPerformance{}, &HTTPMonitorPerformanceList{})
}
