// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationHeadersInitParameters struct {

	// (Block Set, Min: 1) contains an HTTP header of the request (see below for nested schema)
	// contains an HTTP header of the request
	Header []HeadersHeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`
}

type ConfigurationHeadersObservation struct {

	// (Block Set, Min: 1) contains an HTTP header of the request (see below for nested schema)
	// contains an HTTP header of the request
	Header []HeadersHeaderObservation `json:"header,omitempty" tf:"header,omitempty"`
}

type ConfigurationHeadersParameters struct {

	// (Block Set, Min: 1) contains an HTTP header of the request (see below for nested schema)
	// contains an HTTP header of the request
	// +kubebuilder:validation:Optional
	Header []HeadersHeaderParameters `json:"header" tf:"header,omitempty"`
}

type HTTPMonitorScriptInitParameters struct {

	// (String) The ID of the HTTP monitor
	// The ID of the HTTP monitor
	HTTPID *string `json:"httpId,omitempty" tf:"http_id,omitempty"`

	// (Block List, Min: 1, Max: 1) The HTTP Script (see below for nested schema)
	// The HTTP Script
	Script []HTTPMonitorScriptScriptInitParameters `json:"script,omitempty" tf:"script,omitempty"`
}

type HTTPMonitorScriptObservation struct {

	// (String) The ID of the HTTP monitor
	// The ID of the HTTP monitor
	HTTPID *string `json:"httpId,omitempty" tf:"http_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Min: 1, Max: 1) The HTTP Script (see below for nested schema)
	// The HTTP Script
	Script []HTTPMonitorScriptScriptObservation `json:"script,omitempty" tf:"script,omitempty"`
}

type HTTPMonitorScriptParameters struct {

	// (String) The ID of the HTTP monitor
	// The ID of the HTTP monitor
	// +kubebuilder:validation:Optional
	HTTPID *string `json:"httpId,omitempty" tf:"http_id,omitempty"`

	// (Block List, Min: 1, Max: 1) The HTTP Script (see below for nested schema)
	// The HTTP Script
	// +kubebuilder:validation:Optional
	Script []HTTPMonitorScriptScriptParameters `json:"script,omitempty" tf:"script,omitempty"`
}

type HTTPMonitorScriptScriptInitParameters struct {

	// (Block List, Min: 1) A HTTP request to be performed by the monitor. (see below for nested schema)
	// A HTTP request to be performed by the monitor.
	Request []ScriptRequestInitParameters `json:"request,omitempty" tf:"request,omitempty"`
}

type HTTPMonitorScriptScriptObservation struct {

	// (Block List, Min: 1) A HTTP request to be performed by the monitor. (see below for nested schema)
	// A HTTP request to be performed by the monitor.
	Request []ScriptRequestObservation `json:"request,omitempty" tf:"request,omitempty"`
}

type HTTPMonitorScriptScriptParameters struct {

	// (Block List, Min: 1) A HTTP request to be performed by the monitor. (see below for nested schema)
	// A HTTP request to be performed by the monitor.
	// +kubebuilder:validation:Optional
	Request []ScriptRequestParameters `json:"request" tf:"request,omitempty"`
}

type HeadersHeaderInitParameters struct {

	// (String) The key of the header
	// The key of the header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the header
	// The value of the header
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeadersHeaderObservation struct {

	// (String) The key of the header
	// The key of the header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the header
	// The value of the header
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeadersHeaderParameters struct {

	// (String) The key of the header
	// The key of the header
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The value of the header
	// The value of the header
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type RequestAuthenticationInitParameters struct {

	// (String) The ID of the credentials within the Dynatrace Credentials Vault.
	// The ID of the credentials within the Dynatrace Credentials Vault.
	Credentials *string `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// (String) The KDC IP. Valid and required only if the type of authentication is KERBEROS.
	// The KDC IP. Valid and required only if the type of authentication is `KERBEROS`.
	KdcIP *string `json:"kdcIp,omitempty" tf:"kdc_ip,omitempty"`

	// (String) The Realm Name. Valid and required only if the type of authentication is KERBEROS.
	// The Realm Name. Valid and required only if the type of authentication is `KERBEROS`.
	RealmName *string `json:"realmName,omitempty" tf:"realm_name,omitempty"`

	// (String) The type of authentication. Possible values are BASIC_AUTHENTICATION, NTLM and KERBEROS.
	// The type of authentication. Possible values are `BASIC_AUTHENTICATION`, `NTLM` and `KERBEROS`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RequestAuthenticationObservation struct {

	// (String) The ID of the credentials within the Dynatrace Credentials Vault.
	// The ID of the credentials within the Dynatrace Credentials Vault.
	Credentials *string `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// (String) The KDC IP. Valid and required only if the type of authentication is KERBEROS.
	// The KDC IP. Valid and required only if the type of authentication is `KERBEROS`.
	KdcIP *string `json:"kdcIp,omitempty" tf:"kdc_ip,omitempty"`

	// (String) The Realm Name. Valid and required only if the type of authentication is KERBEROS.
	// The Realm Name. Valid and required only if the type of authentication is `KERBEROS`.
	RealmName *string `json:"realmName,omitempty" tf:"realm_name,omitempty"`

	// (String) The type of authentication. Possible values are BASIC_AUTHENTICATION, NTLM and KERBEROS.
	// The type of authentication. Possible values are `BASIC_AUTHENTICATION`, `NTLM` and `KERBEROS`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RequestAuthenticationParameters struct {

	// (String) The ID of the credentials within the Dynatrace Credentials Vault.
	// The ID of the credentials within the Dynatrace Credentials Vault.
	// +kubebuilder:validation:Optional
	Credentials *string `json:"credentials" tf:"credentials,omitempty"`

	// (String) The KDC IP. Valid and required only if the type of authentication is KERBEROS.
	// The KDC IP. Valid and required only if the type of authentication is `KERBEROS`.
	// +kubebuilder:validation:Optional
	KdcIP *string `json:"kdcIp,omitempty" tf:"kdc_ip,omitempty"`

	// (String) The Realm Name. Valid and required only if the type of authentication is KERBEROS.
	// The Realm Name. Valid and required only if the type of authentication is `KERBEROS`.
	// +kubebuilder:validation:Optional
	RealmName *string `json:"realmName,omitempty" tf:"realm_name,omitempty"`

	// (String) The type of authentication. Possible values are BASIC_AUTHENTICATION, NTLM and KERBEROS.
	// The type of authentication. Possible values are `BASIC_AUTHENTICATION`, `NTLM` and `KERBEROS`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RequestConfigurationInitParameters struct {

	// (Boolean) If set to false, then the monitor fails with invalid SSL certificates.
	// If set to `false`, then the monitor fails with invalid SSL certificates.
	//
	// If not set, the `false` option is used
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
	// The client certificate, if applicable - eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
	ClientCertificateSecretRef *v1.SecretKeySelector `json:"clientCertificateSecretRef,omitempty" tf:"-"`

	// (Boolean) If set to false, redirects are reported as successful requests with response code 3xx.
	// If set to `false`, redirects are reported as successful requests with response code 3xx.
	//
	// If not set, the `false` option is used.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	Headers []ConfigurationHeadersInitParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) Option not to store and display request and response bodies and header values in execution details, true or false. If not set, false.
	// Option not to store and display request and response bodies and header values in execution details, `true` or `false`. If not set, `false`.
	SensitiveData *bool `json:"sensitiveData,omitempty" tf:"sensitive_data,omitempty"`

	// (String) The User agent of the request
	// The User agent of the request
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type RequestConfigurationObservation struct {

	// (Boolean) If set to false, then the monitor fails with invalid SSL certificates.
	// If set to `false`, then the monitor fails with invalid SSL certificates.
	//
	// If not set, the `false` option is used
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// (Boolean) If set to false, redirects are reported as successful requests with response code 3xx.
	// If set to `false`, redirects are reported as successful requests with response code 3xx.
	//
	// If not set, the `false` option is used.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	Headers []ConfigurationHeadersObservation `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) Option not to store and display request and response bodies and header values in execution details, true or false. If not set, false.
	// Option not to store and display request and response bodies and header values in execution details, `true` or `false`. If not set, `false`.
	SensitiveData *bool `json:"sensitiveData,omitempty" tf:"sensitive_data,omitempty"`

	// (String) The User agent of the request
	// The User agent of the request
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type RequestConfigurationParameters struct {

	// (Boolean) If set to false, then the monitor fails with invalid SSL certificates.
	// If set to `false`, then the monitor fails with invalid SSL certificates.
	//
	// If not set, the `false` option is used
	// +kubebuilder:validation:Optional
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
	// The client certificate, if applicable - eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
	// +kubebuilder:validation:Optional
	ClientCertificateSecretRef *v1.SecretKeySelector `json:"clientCertificateSecretRef,omitempty" tf:"-"`

	// (Boolean) If set to false, redirects are reported as successful requests with response code 3xx.
	// If set to `false`, redirects are reported as successful requests with response code 3xx.
	//
	// If not set, the `false` option is used.
	// +kubebuilder:validation:Optional
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	// +kubebuilder:validation:Optional
	Headers []ConfigurationHeadersParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) Option not to store and display request and response bodies and header values in execution details, true or false. If not set, false.
	// Option not to store and display request and response bodies and header values in execution details, `true` or `false`. If not set, `false`.
	// +kubebuilder:validation:Optional
	SensitiveData *bool `json:"sensitiveData,omitempty" tf:"sensitive_data,omitempty"`

	// (String) The User agent of the request
	// The User agent of the request
	// +kubebuilder:validation:Optional
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type RequestValidationInitParameters struct {

	// (Block List, Min: 1) A list of validation rules (see below for nested schema)
	// A list of validation rules
	Rule []ValidationRuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type RequestValidationObservation struct {

	// (Block List, Min: 1) A list of validation rules (see below for nested schema)
	// A list of validation rules
	Rule []ValidationRuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type RequestValidationParameters struct {

	// (Block List, Min: 1) A list of validation rules (see below for nested schema)
	// A list of validation rules
	// +kubebuilder:validation:Optional
	Rule []ValidationRuleParameters `json:"rule" tf:"rule,omitempty"`
}

type ScriptRequestInitParameters struct {

	// (Block List, Max: 1) Authentication options for this request (see below for nested schema)
	// Authentication options for this request
	Authentication []RequestAuthenticationInitParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (String) The body of the HTTP request.
	// The body of the HTTP request.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	Configuration []RequestConfigurationInitParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (String) A short description of the event to appear in the web UI.
	// A short description of the event to appear in the web UI.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The HTTP method of the request.
	// The HTTP method of the request.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String) Javascript code to execute after sending the request.
	// Javascript code to execute after sending the request.
	PostProcessing *string `json:"postProcessing,omitempty" tf:"post_processing,omitempty"`

	// (String) Javascript code to execute before sending the request.
	// Javascript code to execute before sending the request.
	PreProcessing *string `json:"preProcessing,omitempty" tf:"pre_processing,omitempty"`

	// the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	// Adapt request timeout option - the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// (String) The URL to check.
	// The URL to check.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Block List, Max: 1) Validation helps you verify that your HTTP monitor loads the expected content (see below for nested schema)
	// Validation helps you verify that your HTTP monitor loads the expected content
	Validation []RequestValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ScriptRequestObservation struct {

	// (Block List, Max: 1) Authentication options for this request (see below for nested schema)
	// Authentication options for this request
	Authentication []RequestAuthenticationObservation `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (String) The body of the HTTP request.
	// The body of the HTTP request.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	Configuration []RequestConfigurationObservation `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (String) A short description of the event to appear in the web UI.
	// A short description of the event to appear in the web UI.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The HTTP method of the request.
	// The HTTP method of the request.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String) Javascript code to execute after sending the request.
	// Javascript code to execute after sending the request.
	PostProcessing *string `json:"postProcessing,omitempty" tf:"post_processing,omitempty"`

	// (String) Javascript code to execute before sending the request.
	// Javascript code to execute before sending the request.
	PreProcessing *string `json:"preProcessing,omitempty" tf:"pre_processing,omitempty"`

	// the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	// Adapt request timeout option - the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// (String) The URL to check.
	// The URL to check.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Block List, Max: 1) Validation helps you verify that your HTTP monitor loads the expected content (see below for nested schema)
	// Validation helps you verify that your HTTP monitor loads the expected content
	Validation []RequestValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ScriptRequestParameters struct {

	// (Block List, Max: 1) Authentication options for this request (see below for nested schema)
	// Authentication options for this request
	// +kubebuilder:validation:Optional
	Authentication []RequestAuthenticationParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (String) The body of the HTTP request.
	// The body of the HTTP request.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	// +kubebuilder:validation:Optional
	Configuration []RequestConfigurationParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (String) A short description of the event to appear in the web UI.
	// A short description of the event to appear in the web UI.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The HTTP method of the request.
	// The HTTP method of the request.
	// +kubebuilder:validation:Optional
	Method *string `json:"method" tf:"method,omitempty"`

	// (String) Javascript code to execute after sending the request.
	// Javascript code to execute after sending the request.
	// +kubebuilder:validation:Optional
	PostProcessing *string `json:"postProcessing,omitempty" tf:"post_processing,omitempty"`

	// (String) Javascript code to execute before sending the request.
	// Javascript code to execute before sending the request.
	// +kubebuilder:validation:Optional
	PreProcessing *string `json:"preProcessing,omitempty" tf:"pre_processing,omitempty"`

	// the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	// Adapt request timeout option - the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	// +kubebuilder:validation:Optional
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// (String) The URL to check.
	// The URL to check.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// (Block List, Max: 1) Validation helps you verify that your HTTP monitor loads the expected content (see below for nested schema)
	// Validation helps you verify that your HTTP monitor loads the expected content
	// +kubebuilder:validation:Optional
	Validation []RequestValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ValidationRuleInitParameters struct {

	// (Boolean) The validation condition. true means validation succeeds if the specified content/element is found. false means validation fails if the specified content/element is found. Always specify false for certificateExpiryDateConstraint to fail the monitor if SSL certificate expiry is within the specified number of days
	// The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
	PassIfFound *bool `json:"passIfFound,omitempty" tf:"pass_if_found,omitempty"`

	// (String) The type of authentication. Possible values are BASIC_AUTHENTICATION, NTLM and KERBEROS.
	// The type of the rule. Possible values are `patternConstraint`, `regexConstraint`, `httpStatusesList` and `certificateExpiryDateConstraint`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the header
	// The content to look for
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ValidationRuleObservation struct {

	// (Boolean) The validation condition. true means validation succeeds if the specified content/element is found. false means validation fails if the specified content/element is found. Always specify false for certificateExpiryDateConstraint to fail the monitor if SSL certificate expiry is within the specified number of days
	// The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
	PassIfFound *bool `json:"passIfFound,omitempty" tf:"pass_if_found,omitempty"`

	// (String) The type of authentication. Possible values are BASIC_AUTHENTICATION, NTLM and KERBEROS.
	// The type of the rule. Possible values are `patternConstraint`, `regexConstraint`, `httpStatusesList` and `certificateExpiryDateConstraint`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the header
	// The content to look for
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ValidationRuleParameters struct {

	// (Boolean) The validation condition. true means validation succeeds if the specified content/element is found. false means validation fails if the specified content/element is found. Always specify false for certificateExpiryDateConstraint to fail the monitor if SSL certificate expiry is within the specified number of days
	// The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
	// +kubebuilder:validation:Optional
	PassIfFound *bool `json:"passIfFound,omitempty" tf:"pass_if_found,omitempty"`

	// (String) The type of authentication. Possible values are BASIC_AUTHENTICATION, NTLM and KERBEROS.
	// The type of the rule. Possible values are `patternConstraint`, `regexConstraint`, `httpStatusesList` and `certificateExpiryDateConstraint`
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the header
	// The content to look for
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// HTTPMonitorScriptSpec defines the desired state of HTTPMonitorScript
type HTTPMonitorScriptSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HTTPMonitorScriptParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HTTPMonitorScriptInitParameters `json:"initProvider,omitempty"`
}

// HTTPMonitorScriptStatus defines the observed state of HTTPMonitorScript.
type HTTPMonitorScriptStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HTTPMonitorScriptObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HTTPMonitorScript is the Schema for the HTTPMonitorScripts API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type HTTPMonitorScript struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.httpId) || (has(self.initProvider) && has(self.initProvider.httpId))",message="spec.forProvider.httpId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.script) || (has(self.initProvider) && has(self.initProvider.script))",message="spec.forProvider.script is a required parameter"
	Spec   HTTPMonitorScriptSpec   `json:"spec"`
	Status HTTPMonitorScriptStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPMonitorScriptList contains a list of HTTPMonitorScripts
type HTTPMonitorScriptList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HTTPMonitorScript `json:"items"`
}

// Repository type metadata.
var (
	HTTPMonitorScript_Kind             = "HTTPMonitorScript"
	HTTPMonitorScript_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HTTPMonitorScript_Kind}.String()
	HTTPMonitorScript_KindAPIVersion   = HTTPMonitorScript_Kind + "." + CRDGroupVersion.String()
	HTTPMonitorScript_GroupVersionKind = CRDGroupVersion.WithKind(HTTPMonitorScript_Kind)
)

func init() {
	SchemeBuilder.Register(&HTTPMonitorScript{}, &HTTPMonitorScriptList{})
}
