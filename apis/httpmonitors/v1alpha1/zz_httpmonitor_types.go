// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnomalyDetectionInitParameters struct {

	// (Block List) Thresholds for loading times (see below for nested schema)
	// Thresholds for loading times
	LoadingTimeThresholds []LoadingTimeThresholdsInitParameters `json:"loadingTimeThresholds,omitempty" tf:"loading_time_thresholds,omitempty"`

	// (Block List) Outage handling configuration (see below for nested schema)
	// Outage handling configuration
	OutageHandling []OutageHandlingInitParameters `json:"outageHandling,omitempty" tf:"outage_handling,omitempty"`
}

type AnomalyDetectionObservation struct {

	// (Block List) Thresholds for loading times (see below for nested schema)
	// Thresholds for loading times
	LoadingTimeThresholds []LoadingTimeThresholdsObservation `json:"loadingTimeThresholds,omitempty" tf:"loading_time_thresholds,omitempty"`

	// (Block List) Outage handling configuration (see below for nested schema)
	// Outage handling configuration
	OutageHandling []OutageHandlingObservation `json:"outageHandling,omitempty" tf:"outage_handling,omitempty"`
}

type AnomalyDetectionParameters struct {

	// (Block List) Thresholds for loading times (see below for nested schema)
	// Thresholds for loading times
	// +kubebuilder:validation:Optional
	LoadingTimeThresholds []LoadingTimeThresholdsParameters `json:"loadingTimeThresholds,omitempty" tf:"loading_time_thresholds,omitempty"`

	// (Block List) Outage handling configuration (see below for nested schema)
	// Outage handling configuration
	// +kubebuilder:validation:Optional
	OutageHandling []OutageHandlingParameters `json:"outageHandling,omitempty" tf:"outage_handling,omitempty"`
}

type AuthenticationInitParameters struct {

	// (String) The ID of the credentials within the Dynatrace Credentials Vault.
	// The ID of the credentials within the Dynatrace Credentials Vault.
	Credentials *string `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// (String) The KDC IP. Valid and required only if the type of authentication is KERBEROS.
	// The KDC IP. Valid and required only if the type of authentication is `KERBEROS`.
	KdcIP *string `json:"kdcIp,omitempty" tf:"kdc_ip,omitempty"`

	// (String) The Realm Name. Valid and required only if the type of authentication is KERBEROS.
	// The Realm Name. Valid and required only if the type of authentication is `KERBEROS`.
	RealmName *string `json:"realmName,omitempty" tf:"realm_name,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of authentication. Possible values are `BASIC_AUTHENTICATION`, `NTLM` and `KERBEROS`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AuthenticationObservation struct {

	// (String) The ID of the credentials within the Dynatrace Credentials Vault.
	// The ID of the credentials within the Dynatrace Credentials Vault.
	Credentials *string `json:"credentials,omitempty" tf:"credentials,omitempty"`

	// (String) The KDC IP. Valid and required only if the type of authentication is KERBEROS.
	// The KDC IP. Valid and required only if the type of authentication is `KERBEROS`.
	KdcIP *string `json:"kdcIp,omitempty" tf:"kdc_ip,omitempty"`

	// (String) The Realm Name. Valid and required only if the type of authentication is KERBEROS.
	// The Realm Name. Valid and required only if the type of authentication is `KERBEROS`.
	RealmName *string `json:"realmName,omitempty" tf:"realm_name,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of authentication. Possible values are `BASIC_AUTHENTICATION`, `NTLM` and `KERBEROS`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AuthenticationParameters struct {

	// (String) The ID of the credentials within the Dynatrace Credentials Vault.
	// The ID of the credentials within the Dynatrace Credentials Vault.
	// +kubebuilder:validation:Optional
	Credentials *string `json:"credentials" tf:"credentials,omitempty"`

	// (String) The KDC IP. Valid and required only if the type of authentication is KERBEROS.
	// The KDC IP. Valid and required only if the type of authentication is `KERBEROS`.
	// +kubebuilder:validation:Optional
	KdcIP *string `json:"kdcIp,omitempty" tf:"kdc_ip,omitempty"`

	// (String) The Realm Name. Valid and required only if the type of authentication is KERBEROS.
	// The Realm Name. Valid and required only if the type of authentication is `KERBEROS`.
	// +kubebuilder:validation:Optional
	RealmName *string `json:"realmName,omitempty" tf:"realm_name,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of authentication. Possible values are `BASIC_AUTHENTICATION`, `NTLM` and `KERBEROS`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ConfigurationInitParameters struct {

	// (Boolean) If set to false, then the monitor fails with invalid SSL certificates.
	// If set to `false`, then the monitor fails with invalid SSL certificates.
	//
	// If not set, the `false` option is used
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
	// The client certificate, if applicable - eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
	ClientCertificateSecretRef *v1.SecretKeySelector `json:"clientCertificateSecretRef,omitempty" tf:"-"`

	// (Boolean) If set to false, redirects are reported as successful requests with response code 3xx.
	// If set to `false`, redirects are reported as successful requests with response code 3xx.
	//
	// If not set, the `false` option is used.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	Headers []HeadersInitParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) Option not to store and display request and response bodies and header values in execution details, true or false. If not set, false.
	// Option not to store and display request and response bodies and header values in execution details, `true` or `false`. If not set, `false`.
	SensitiveData *bool `json:"sensitiveData,omitempty" tf:"sensitive_data,omitempty"`

	// (String) The User agent of the request
	// The User agent of the request
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type ConfigurationObservation struct {

	// (Boolean) If set to false, then the monitor fails with invalid SSL certificates.
	// If set to `false`, then the monitor fails with invalid SSL certificates.
	//
	// If not set, the `false` option is used
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// (Boolean) If set to false, redirects are reported as successful requests with response code 3xx.
	// If set to `false`, redirects are reported as successful requests with response code 3xx.
	//
	// If not set, the `false` option is used.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	Headers []HeadersObservation `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) Option not to store and display request and response bodies and header values in execution details, true or false. If not set, false.
	// Option not to store and display request and response bodies and header values in execution details, `true` or `false`. If not set, `false`.
	SensitiveData *bool `json:"sensitiveData,omitempty" tf:"sensitive_data,omitempty"`

	// (String) The User agent of the request
	// The User agent of the request
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type ConfigurationParameters struct {

	// (Boolean) If set to false, then the monitor fails with invalid SSL certificates.
	// If set to `false`, then the monitor fails with invalid SSL certificates.
	//
	// If not set, the `false` option is used
	// +kubebuilder:validation:Optional
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
	// The client certificate, if applicable - eg. CREDENTIALS_VAULT-XXXXXXXXXXXXXXXX
	// +kubebuilder:validation:Optional
	ClientCertificateSecretRef *v1.SecretKeySelector `json:"clientCertificateSecretRef,omitempty" tf:"-"`

	// (Boolean) If set to false, redirects are reported as successful requests with response code 3xx.
	// If set to `false`, redirects are reported as successful requests with response code 3xx.
	//
	// If not set, the `false` option is used.
	// +kubebuilder:validation:Optional
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	// +kubebuilder:validation:Optional
	Headers []HeadersParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Boolean) Option not to store and display request and response bodies and header values in execution details, true or false. If not set, false.
	// Option not to store and display request and response bodies and header values in execution details, `true` or `false`. If not set, `false`.
	// +kubebuilder:validation:Optional
	SensitiveData *bool `json:"sensitiveData,omitempty" tf:"sensitive_data,omitempty"`

	// (String) The User agent of the request
	// The User agent of the request
	// +kubebuilder:validation:Optional
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type GlobalOutagePolicyInitParameters struct {

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	ConsecutiveRuns *float64 `json:"consecutiveRuns,omitempty" tf:"consecutive_runs,omitempty"`
}

type GlobalOutagePolicyObservation struct {

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	ConsecutiveRuns *float64 `json:"consecutiveRuns,omitempty" tf:"consecutive_runs,omitempty"`
}

type GlobalOutagePolicyParameters struct {

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	// +kubebuilder:validation:Optional
	ConsecutiveRuns *float64 `json:"consecutiveRuns" tf:"consecutive_runs,omitempty"`
}

type HTTPMonitorInitParameters struct {

	// (Block List) The anomaly detection configuration. (see below for nested schema)
	// The anomaly detection configuration.
	AnomalyDetection []AnomalyDetectionInitParameters `json:"anomalyDetection,omitempty" tf:"anomaly_detection,omitempty"`

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// The monitor is enabled (`true`) or disabled (`false`).
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The frequency of the monitor, in minutes.
	// The frequency of the monitor, in minutes.
	//
	// You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (Set of String) A list of locations from which the monitor is executed.
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (Set of String) A set of manually assigned applications.
	// A set of manually assigned applications.
	// +listType=set
	ManuallyAssignedApps []*string `json:"manuallyAssignedApps,omitempty" tf:"manually_assigned_apps,omitempty"`

	// (String) The name of the monitor.
	// The name of the monitor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// handle requests via dynatrace_http_monitor_script resource
	// No script block - handle requests via `dynatrace_http_monitor_script` resource
	NoScript *bool `json:"noScript,omitempty" tf:"no_script,omitempty"`

	// (Block List, Max: 1) The HTTP Script (see below for nested schema)
	// The HTTP Script
	Script []ScriptInitParameters `json:"script,omitempty" tf:"script,omitempty"`

	// (Block List) A set of tags assigned to the monitor.
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type HTTPMonitorObservation struct {

	// (Block List) The anomaly detection configuration. (see below for nested schema)
	// The anomaly detection configuration.
	AnomalyDetection []AnomalyDetectionObservation `json:"anomalyDetection,omitempty" tf:"anomaly_detection,omitempty"`

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// The monitor is enabled (`true`) or disabled (`false`).
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The frequency of the monitor, in minutes.
	// The frequency of the monitor, in minutes.
	//
	// You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) A list of locations from which the monitor is executed.
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (Set of String) A set of manually assigned applications.
	// A set of manually assigned applications.
	// +listType=set
	ManuallyAssignedApps []*string `json:"manuallyAssignedApps,omitempty" tf:"manually_assigned_apps,omitempty"`

	// (String) The name of the monitor.
	// The name of the monitor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// handle requests via dynatrace_http_monitor_script resource
	// No script block - handle requests via `dynatrace_http_monitor_script` resource
	NoScript *bool `json:"noScript,omitempty" tf:"no_script,omitempty"`

	// (Block List, Max: 1) The HTTP Script (see below for nested schema)
	// The HTTP Script
	Script []ScriptObservation `json:"script,omitempty" tf:"script,omitempty"`

	// (Block List) A set of tags assigned to the monitor.
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`
}

type HTTPMonitorParameters struct {

	// (Block List) The anomaly detection configuration. (see below for nested schema)
	// The anomaly detection configuration.
	// +kubebuilder:validation:Optional
	AnomalyDetection []AnomalyDetectionParameters `json:"anomalyDetection,omitempty" tf:"anomaly_detection,omitempty"`

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// The monitor is enabled (`true`) or disabled (`false`).
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The frequency of the monitor, in minutes.
	// The frequency of the monitor, in minutes.
	//
	// You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.
	// +kubebuilder:validation:Optional
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (Set of String) A list of locations from which the monitor is executed.
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	// +kubebuilder:validation:Optional
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (Set of String) A set of manually assigned applications.
	// A set of manually assigned applications.
	// +kubebuilder:validation:Optional
	// +listType=set
	ManuallyAssignedApps []*string `json:"manuallyAssignedApps,omitempty" tf:"manually_assigned_apps,omitempty"`

	// (String) The name of the monitor.
	// The name of the monitor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// handle requests via dynatrace_http_monitor_script resource
	// No script block - handle requests via `dynatrace_http_monitor_script` resource
	// +kubebuilder:validation:Optional
	NoScript *bool `json:"noScript,omitempty" tf:"no_script,omitempty"`

	// (Block List, Max: 1) The HTTP Script (see below for nested schema)
	// The HTTP Script
	// +kubebuilder:validation:Optional
	Script []ScriptParameters `json:"script,omitempty" tf:"script,omitempty"`

	// (Block List) A set of tags assigned to the monitor.
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type HeaderInitParameters struct {

	// (String) The name of the monitor.
	// The key of the header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the header
	// The value of the header
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderObservation struct {

	// (String) The name of the monitor.
	// The key of the header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the header
	// The value of the header
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderParameters struct {

	// (String) The name of the monitor.
	// The key of the header
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The value of the header
	// The value of the header
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type HeadersInitParameters struct {

	// (Block Set, Min: 1) contains an HTTP header of the request (see below for nested schema)
	// contains an HTTP header of the request
	Header []HeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`
}

type HeadersObservation struct {

	// (Block Set, Min: 1) contains an HTTP header of the request (see below for nested schema)
	// contains an HTTP header of the request
	Header []HeaderObservation `json:"header,omitempty" tf:"header,omitempty"`
}

type HeadersParameters struct {

	// (Block Set, Min: 1) contains an HTTP header of the request (see below for nested schema)
	// contains an HTTP header of the request
	// +kubebuilder:validation:Optional
	Header []HeaderParameters `json:"header" tf:"header,omitempty"`
}

type LoadingTimeThresholdsInitParameters struct {

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// Performance threshold is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Thresholds []ThresholdsInitParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type LoadingTimeThresholdsObservation struct {

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// Performance threshold is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Thresholds []ThresholdsObservation `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type LoadingTimeThresholdsParameters struct {

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// Performance threshold is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	// +kubebuilder:validation:Optional
	Thresholds []ThresholdsParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type LocalOutagePolicyInitParameters struct {

	// (Number) The number of affected locations to trigger an alert
	// The number of affected locations to trigger an alert
	AffectedLocations *float64 `json:"affectedLocations,omitempty" tf:"affected_locations,omitempty"`

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	ConsecutiveRuns *float64 `json:"consecutiveRuns,omitempty" tf:"consecutive_runs,omitempty"`
}

type LocalOutagePolicyObservation struct {

	// (Number) The number of affected locations to trigger an alert
	// The number of affected locations to trigger an alert
	AffectedLocations *float64 `json:"affectedLocations,omitempty" tf:"affected_locations,omitempty"`

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	ConsecutiveRuns *float64 `json:"consecutiveRuns,omitempty" tf:"consecutive_runs,omitempty"`
}

type LocalOutagePolicyParameters struct {

	// (Number) The number of affected locations to trigger an alert
	// The number of affected locations to trigger an alert
	// +kubebuilder:validation:Optional
	AffectedLocations *float64 `json:"affectedLocations" tf:"affected_locations,omitempty"`

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	// +kubebuilder:validation:Optional
	ConsecutiveRuns *float64 `json:"consecutiveRuns" tf:"consecutive_runs,omitempty"`
}

type OutageHandlingInitParameters struct {

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable at all configured locations
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
	GlobalOutage *bool `json:"globalOutage,omitempty" tf:"global_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Global outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Global outage handling configuration.
	//
	// Alert if **consecutiveRuns** times consecutively
	GlobalOutagePolicy []GlobalOutagePolicyInitParameters `json:"globalOutagePolicy,omitempty" tf:"global_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	LocalOutage *bool `json:"localOutage,omitempty" tf:"local_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Local outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Local outage handling configuration.
	//
	// Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
	LocalOutagePolicy []LocalOutagePolicyInitParameters `json:"localOutagePolicy,omitempty" tf:"local_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	RetryOnError *bool `json:"retryOnError,omitempty" tf:"retry_on_error,omitempty"`
}

type OutageHandlingObservation struct {

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable at all configured locations
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
	GlobalOutage *bool `json:"globalOutage,omitempty" tf:"global_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Global outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Global outage handling configuration.
	//
	// Alert if **consecutiveRuns** times consecutively
	GlobalOutagePolicy []GlobalOutagePolicyObservation `json:"globalOutagePolicy,omitempty" tf:"global_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	LocalOutage *bool `json:"localOutage,omitempty" tf:"local_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Local outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Local outage handling configuration.
	//
	// Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
	LocalOutagePolicy []LocalOutagePolicyObservation `json:"localOutagePolicy,omitempty" tf:"local_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	RetryOnError *bool `json:"retryOnError,omitempty" tf:"retry_on_error,omitempty"`
}

type OutageHandlingParameters struct {

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable at all configured locations
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
	// +kubebuilder:validation:Optional
	GlobalOutage *bool `json:"globalOutage,omitempty" tf:"global_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Global outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Global outage handling configuration.
	//
	// Alert if **consecutiveRuns** times consecutively
	// +kubebuilder:validation:Optional
	GlobalOutagePolicy []GlobalOutagePolicyParameters `json:"globalOutagePolicy,omitempty" tf:"global_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// +kubebuilder:validation:Optional
	LocalOutage *bool `json:"localOutage,omitempty" tf:"local_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Local outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Local outage handling configuration.
	//
	// Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
	// +kubebuilder:validation:Optional
	LocalOutagePolicy []LocalOutagePolicyParameters `json:"localOutagePolicy,omitempty" tf:"local_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	// +kubebuilder:validation:Optional
	RetryOnError *bool `json:"retryOnError,omitempty" tf:"retry_on_error,omitempty"`
}

type RequestInitParameters struct {

	// (Block List, Max: 1) Authentication options for this request (see below for nested schema)
	// Authentication options for this request
	Authentication []AuthenticationInitParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (String) The body of the HTTP request.
	// The body of the HTTP request.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	Configuration []ConfigurationInitParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (String) A short description of the event to appear in the web UI.
	// A short description of the event to appear in the web UI.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The HTTP method of the request.
	// The HTTP method of the request.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String) Javascript code to execute after sending the request.
	// Javascript code to execute after sending the request.
	PostProcessing *string `json:"postProcessing,omitempty" tf:"post_processing,omitempty"`

	// (String) Javascript code to execute before sending the request.
	// Javascript code to execute before sending the request.
	PreProcessing *string `json:"preProcessing,omitempty" tf:"pre_processing,omitempty"`

	// the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	// Adapt request timeout option - the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// (String) The URL to check.
	// The URL to check.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Block List, Max: 1) Validation helps you verify that your HTTP monitor loads the expected content (see below for nested schema)
	// Validation helps you verify that your HTTP monitor loads the expected content
	Validation []ValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type RequestObservation struct {

	// (Block List, Max: 1) Authentication options for this request (see below for nested schema)
	// Authentication options for this request
	Authentication []AuthenticationObservation `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (String) The body of the HTTP request.
	// The body of the HTTP request.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	Configuration []ConfigurationObservation `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (String) A short description of the event to appear in the web UI.
	// A short description of the event to appear in the web UI.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The HTTP method of the request.
	// The HTTP method of the request.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (String) Javascript code to execute after sending the request.
	// Javascript code to execute after sending the request.
	PostProcessing *string `json:"postProcessing,omitempty" tf:"post_processing,omitempty"`

	// (String) Javascript code to execute before sending the request.
	// Javascript code to execute before sending the request.
	PreProcessing *string `json:"preProcessing,omitempty" tf:"pre_processing,omitempty"`

	// the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	// Adapt request timeout option - the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// (String) The URL to check.
	// The URL to check.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Block List, Max: 1) Validation helps you verify that your HTTP monitor loads the expected content (see below for nested schema)
	// Validation helps you verify that your HTTP monitor loads the expected content
	Validation []ValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type RequestParameters struct {

	// (Block List, Max: 1) Authentication options for this request (see below for nested schema)
	// Authentication options for this request
	// +kubebuilder:validation:Optional
	Authentication []AuthenticationParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (String) The body of the HTTP request.
	// The body of the HTTP request.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	// +kubebuilder:validation:Optional
	Configuration []ConfigurationParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (String) A short description of the event to appear in the web UI.
	// A short description of the event to appear in the web UI.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The HTTP method of the request.
	// The HTTP method of the request.
	// +kubebuilder:validation:Optional
	Method *string `json:"method" tf:"method,omitempty"`

	// (String) Javascript code to execute after sending the request.
	// Javascript code to execute after sending the request.
	// +kubebuilder:validation:Optional
	PostProcessing *string `json:"postProcessing,omitempty" tf:"post_processing,omitempty"`

	// (String) Javascript code to execute before sending the request.
	// Javascript code to execute before sending the request.
	// +kubebuilder:validation:Optional
	PreProcessing *string `json:"preProcessing,omitempty" tf:"pre_processing,omitempty"`

	// the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	// Adapt request timeout option - the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
	// +kubebuilder:validation:Optional
	RequestTimeout *float64 `json:"requestTimeout,omitempty" tf:"request_timeout,omitempty"`

	// (String) The URL to check.
	// The URL to check.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// (Block List, Max: 1) Validation helps you verify that your HTTP monitor loads the expected content (see below for nested schema)
	// Validation helps you verify that your HTTP monitor loads the expected content
	// +kubebuilder:validation:Optional
	Validation []ValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type RuleInitParameters struct {

	// (Boolean) The validation condition. true means validation succeeds if the specified content/element is found. false means validation fails if the specified content/element is found. Always specify false for certificateExpiryDateConstraint to fail the monitor if SSL certificate expiry is within the specified number of days
	// The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
	PassIfFound *bool `json:"passIfFound,omitempty" tf:"pass_if_found,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of the rule. Possible values are `patternConstraint`, `regexConstraint`, `httpStatusesList` and `certificateExpiryDateConstraint`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the header
	// The content to look for
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RuleObservation struct {

	// (Boolean) The validation condition. true means validation succeeds if the specified content/element is found. false means validation fails if the specified content/element is found. Always specify false for certificateExpiryDateConstraint to fail the monitor if SSL certificate expiry is within the specified number of days
	// The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
	PassIfFound *bool `json:"passIfFound,omitempty" tf:"pass_if_found,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of the rule. Possible values are `patternConstraint`, `regexConstraint`, `httpStatusesList` and `certificateExpiryDateConstraint`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the header
	// The content to look for
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RuleParameters struct {

	// (Boolean) The validation condition. true means validation succeeds if the specified content/element is found. false means validation fails if the specified content/element is found. Always specify false for certificateExpiryDateConstraint to fail the monitor if SSL certificate expiry is within the specified number of days
	// The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
	// +kubebuilder:validation:Optional
	PassIfFound *bool `json:"passIfFound,omitempty" tf:"pass_if_found,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of the rule. Possible values are `patternConstraint`, `regexConstraint`, `httpStatusesList` and `certificateExpiryDateConstraint`
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the header
	// The content to look for
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ScriptInitParameters struct {

	// (Block List, Min: 1) A HTTP request to be performed by the monitor. (see below for nested schema)
	// A HTTP request to be performed by the monitor.
	Request []RequestInitParameters `json:"request,omitempty" tf:"request,omitempty"`
}

type ScriptObservation struct {

	// (Block List, Min: 1) A HTTP request to be performed by the monitor. (see below for nested schema)
	// A HTTP request to be performed by the monitor.
	Request []RequestObservation `json:"request,omitempty" tf:"request,omitempty"`
}

type ScriptParameters struct {

	// (Block List, Min: 1) A HTTP request to be performed by the monitor. (see below for nested schema)
	// A HTTP request to be performed by the monitor.
	// +kubebuilder:validation:Optional
	Request []RequestParameters `json:"request" tf:"request,omitempty"`
}

type TagInitParameters struct {

	// (String) The origin of the tag. Supported values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES.
	// The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
	//
	// Custom tags use the `CONTEXTLESS` value.
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag.
	// The key of the tag.
	//
	// Custom tags have the tag value here.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the tag. Supported values are USER, RULE_BASED and AUTO.
	// The source of the tag. Supported values are `USER`, `RULE_BASED` and `AUTO`.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The value of the header
	// The value of the tag.
	//
	// Not applicable to custom tags.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagObservation struct {

	// (String) The origin of the tag. Supported values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES.
	// The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
	//
	// Custom tags use the `CONTEXTLESS` value.
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag.
	// The key of the tag.
	//
	// Custom tags have the tag value here.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the tag. Supported values are USER, RULE_BASED and AUTO.
	// The source of the tag. Supported values are `USER`, `RULE_BASED` and `AUTO`.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The value of the header
	// The value of the tag.
	//
	// Not applicable to custom tags.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagParameters struct {

	// (String) The origin of the tag. Supported values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES.
	// The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
	//
	// Custom tags use the `CONTEXTLESS` value.
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (String) The key of the tag.
	// The key of the tag.
	//
	// Custom tags have the tag value here.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the tag. Supported values are USER, RULE_BASED and AUTO.
	// The source of the tag. Supported values are `USER`, `RULE_BASED` and `AUTO`.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The value of the header
	// The value of the tag.
	//
	// Not applicable to custom tags.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsInitParameters struct {

	// (Block Set) Tag with source of a Dynatrace entity. (see below for nested schema)
	// Tag with source of a Dynatrace entity.
	Tag []TagInitParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagsObservation struct {

	// (Block Set) Tag with source of a Dynatrace entity. (see below for nested schema)
	// Tag with source of a Dynatrace entity.
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagsParameters struct {

	// (Block Set) Tag with source of a Dynatrace entity. (see below for nested schema)
	// Tag with source of a Dynatrace entity.
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ThresholdInitParameters struct {

	// (Number) Specify the event to which an ACTION threshold applies
	// Specify the event to which an ACTION threshold applies
	EventIndex *float64 `json:"eventIndex,omitempty" tf:"event_index,omitempty"`

	// (Number) Specify the request to which an ACTION threshold applies
	// Specify the request to which an ACTION threshold applies
	RequestIndex *float64 `json:"requestIndex,omitempty" tf:"request_index,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Notify if monitor takes longer than X milliseconds to load
	// Notify if monitor takes longer than *X* milliseconds to load
	ValueMs *float64 `json:"valueMs,omitempty" tf:"value_ms,omitempty"`
}

type ThresholdObservation struct {

	// (Number) Specify the event to which an ACTION threshold applies
	// Specify the event to which an ACTION threshold applies
	EventIndex *float64 `json:"eventIndex,omitempty" tf:"event_index,omitempty"`

	// (Number) Specify the request to which an ACTION threshold applies
	// Specify the request to which an ACTION threshold applies
	RequestIndex *float64 `json:"requestIndex,omitempty" tf:"request_index,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Notify if monitor takes longer than X milliseconds to load
	// Notify if monitor takes longer than *X* milliseconds to load
	ValueMs *float64 `json:"valueMs,omitempty" tf:"value_ms,omitempty"`
}

type ThresholdParameters struct {

	// (Number) Specify the event to which an ACTION threshold applies
	// Specify the event to which an ACTION threshold applies
	// +kubebuilder:validation:Optional
	EventIndex *float64 `json:"eventIndex,omitempty" tf:"event_index,omitempty"`

	// (Number) Specify the request to which an ACTION threshold applies
	// Specify the request to which an ACTION threshold applies
	// +kubebuilder:validation:Optional
	RequestIndex *float64 `json:"requestIndex,omitempty" tf:"request_index,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Notify if monitor takes longer than X milliseconds to load
	// Notify if monitor takes longer than *X* milliseconds to load
	// +kubebuilder:validation:Optional
	ValueMs *float64 `json:"valueMs" tf:"value_ms,omitempty"`
}

type ThresholdsInitParameters struct {

	// (Block List, Min: 1) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Threshold []ThresholdInitParameters `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type ThresholdsObservation struct {

	// (Block List, Min: 1) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Threshold []ThresholdObservation `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type ThresholdsParameters struct {

	// (Block List, Min: 1) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	// +kubebuilder:validation:Optional
	Threshold []ThresholdParameters `json:"threshold" tf:"threshold,omitempty"`
}

type ValidationInitParameters struct {

	// (Block List, Min: 1) A list of validation rules (see below for nested schema)
	// A list of validation rules
	Rule []RuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type ValidationObservation struct {

	// (Block List, Min: 1) A list of validation rules (see below for nested schema)
	// A list of validation rules
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type ValidationParameters struct {

	// (Block List, Min: 1) A list of validation rules (see below for nested schema)
	// A list of validation rules
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule" tf:"rule,omitempty"`
}

// HTTPMonitorSpec defines the desired state of HTTPMonitor
type HTTPMonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HTTPMonitorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HTTPMonitorInitParameters `json:"initProvider,omitempty"`
}

// HTTPMonitorStatus defines the observed state of HTTPMonitor.
type HTTPMonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HTTPMonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HTTPMonitor is the Schema for the HTTPMonitors API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type HTTPMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frequency) || (has(self.initProvider) && has(self.initProvider.frequency))",message="spec.forProvider.frequency is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   HTTPMonitorSpec   `json:"spec"`
	Status HTTPMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPMonitorList contains a list of HTTPMonitors
type HTTPMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HTTPMonitor `json:"items"`
}

// Repository type metadata.
var (
	HTTPMonitor_Kind             = "HTTPMonitor"
	HTTPMonitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HTTPMonitor_Kind}.String()
	HTTPMonitor_KindAPIVersion   = HTTPMonitor_Kind + "." + CRDGroupVersion.String()
	HTTPMonitor_GroupVersionKind = CRDGroupVersion.WithKind(HTTPMonitor_Kind)
)

func init() {
	SchemeBuilder.Register(&HTTPMonitor{}, &HTTPMonitorList{})
}
