// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FilterInitParameters struct {

	// (String) Field name
	// Field name
	FieldName *string `json:"fieldName,omitempty" tf:"field_name,omitempty"`

	// (String) Possible Values: EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUAL_TO, IN, IS_NOT_NULL, IS_NULL, LESS_THAN, LESS_THAN_OR_EQUAL_TO, LIKE, NOT_EQUAL, NOT_LIKE, STARTS_WITH
	// Possible Values: `EQUALS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL_TO`, `IN`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL_TO`, `LIKE`, `NOT_EQUAL`, `NOT_LIKE`, `STARTS_WITH`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (Block List, Min: 1, Max: 1) Defines the type of value to be extracted from the user action. When using user action counter, the number of user actions is counted (similar to count(*) when using USQL). When using user action field value, the value of a user action field is extracted. (see below for nested schema)
	// no documentation available
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (List of String) Values
	// Values
	ValueIn []*string `json:"valueIn,omitempty" tf:"value_in,omitempty"`
}

type FilterObservation struct {

	// (String) Field name
	// Field name
	FieldName *string `json:"fieldName,omitempty" tf:"field_name,omitempty"`

	// (String) Possible Values: EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUAL_TO, IN, IS_NOT_NULL, IS_NULL, LESS_THAN, LESS_THAN_OR_EQUAL_TO, LIKE, NOT_EQUAL, NOT_LIKE, STARTS_WITH
	// Possible Values: `EQUALS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL_TO`, `IN`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL_TO`, `LIKE`, `NOT_EQUAL`, `NOT_LIKE`, `STARTS_WITH`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (Block List, Min: 1, Max: 1) Defines the type of value to be extracted from the user action. When using user action counter, the number of user actions is counted (similar to count(*) when using USQL). When using user action field value, the value of a user action field is extracted. (see below for nested schema)
	// no documentation available
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (List of String) Values
	// Values
	ValueIn []*string `json:"valueIn,omitempty" tf:"value_in,omitempty"`
}

type FilterParameters struct {

	// (String) Field name
	// Field name
	// +kubebuilder:validation:Optional
	FieldName *string `json:"fieldName" tf:"field_name,omitempty"`

	// (String) Possible Values: EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUAL_TO, IN, IS_NOT_NULL, IS_NULL, LESS_THAN, LESS_THAN_OR_EQUAL_TO, LIKE, NOT_EQUAL, NOT_LIKE, STARTS_WITH
	// Possible Values: `EQUALS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL_TO`, `IN`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL_TO`, `LIKE`, `NOT_EQUAL`, `NOT_LIKE`, `STARTS_WITH`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (Block List, Min: 1, Max: 1) Defines the type of value to be extracted from the user action. When using user action counter, the number of user actions is counted (similar to count(*) when using USQL). When using user action field value, the value of a user action field is extracted. (see below for nested schema)
	// no documentation available
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// (List of String) Values
	// Values
	// +kubebuilder:validation:Optional
	ValueIn []*string `json:"valueIn,omitempty" tf:"value_in,omitempty"`
}

type FiltersInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

type FiltersObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`
}

type FiltersParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter" tf:"filter,omitempty"`
}

type UserActionMetricsInitParameters struct {

	// (List of String) Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like "application", "type", "name". For example, using "type" as a dimension allows you to split chart data based on the user action type.
	// Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like "application", "type", "name". For example, using "type" as a dimension allows you to split chart data based on the user action type.
	Dimensions []*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using "type equals Xhr" will give you only data from xhr actions, while forcing the rest of user actions of different types to be ignored. (see below for nested schema)
	// Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using "type equals Xhr" will give you only data from xhr actions, while forcing the rest of user actions of different types to be ignored.
	Filters []FiltersInitParameters `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) Metric key
	// Metric key
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// (Block List, Min: 1, Max: 1) Defines the type of value to be extracted from the user action. When using user action counter, the number of user actions is counted (similar to count(*) when using USQL). When using user action field value, the value of a user action field is extracted. (see below for nested schema)
	// Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user actions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user action field is extracted.
	Value []ValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type UserActionMetricsObservation struct {

	// (List of String) Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like "application", "type", "name". For example, using "type" as a dimension allows you to split chart data based on the user action type.
	// Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like "application", "type", "name". For example, using "type" as a dimension allows you to split chart data based on the user action type.
	Dimensions []*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using "type equals Xhr" will give you only data from xhr actions, while forcing the rest of user actions of different types to be ignored. (see below for nested schema)
	// Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using "type equals Xhr" will give you only data from xhr actions, while forcing the rest of user actions of different types to be ignored.
	Filters []FiltersObservation `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Metric key
	// Metric key
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// (Block List, Min: 1, Max: 1) Defines the type of value to be extracted from the user action. When using user action counter, the number of user actions is counted (similar to count(*) when using USQL). When using user action field value, the value of a user action field is extracted. (see below for nested schema)
	// Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user actions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user action field is extracted.
	Value []ValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type UserActionMetricsParameters struct {

	// (List of String) Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like "application", "type", "name". For example, using "type" as a dimension allows you to split chart data based on the user action type.
	// Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data point that is of interest to your business. Dimensions are parameters like "application", "type", "name". For example, using "type" as a dimension allows you to split chart data based on the user action type.
	// +kubebuilder:validation:Optional
	Dimensions []*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using "type equals Xhr" will give you only data from xhr actions, while forcing the rest of user actions of different types to be ignored. (see below for nested schema)
	// Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that satisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters in the metric data explorer. For example, using "type equals Xhr" will give you only data from xhr actions, while forcing the rest of user actions of different types to be ignored.
	// +kubebuilder:validation:Optional
	Filters []FiltersParameters `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) Metric key
	// Metric key
	// +kubebuilder:validation:Optional
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// (Block List, Min: 1, Max: 1) Defines the type of value to be extracted from the user action. When using user action counter, the number of user actions is counted (similar to count(*) when using USQL). When using user action field value, the value of a user action field is extracted. (see below for nested schema)
	// Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user actions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user action field is extracted.
	// +kubebuilder:validation:Optional
	Value []ValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ValueInitParameters struct {

	// (String) Field name
	// Field name
	FieldName *string `json:"fieldName,omitempty" tf:"field_name,omitempty"`

	// (String) Possible Values: COUNTER, FIELD
	// Possible Values: `COUNTER`, `FIELD`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ValueObservation struct {

	// (String) Field name
	// Field name
	FieldName *string `json:"fieldName,omitempty" tf:"field_name,omitempty"`

	// (String) Possible Values: COUNTER, FIELD
	// Possible Values: `COUNTER`, `FIELD`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ValueParameters struct {

	// (String) Field name
	// Field name
	// +kubebuilder:validation:Optional
	FieldName *string `json:"fieldName,omitempty" tf:"field_name,omitempty"`

	// (String) Possible Values: COUNTER, FIELD
	// Possible Values: `COUNTER`, `FIELD`
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// UserActionMetricsSpec defines the desired state of UserActionMetrics
type UserActionMetricsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserActionMetricsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserActionMetricsInitParameters `json:"initProvider,omitempty"`
}

// UserActionMetricsStatus defines the observed state of UserActionMetrics.
type UserActionMetricsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserActionMetricsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserActionMetrics is the Schema for the UserActionMetricss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type UserActionMetrics struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricKey) || (has(self.initProvider) && has(self.initProvider.metricKey))",message="spec.forProvider.metricKey is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   UserActionMetricsSpec   `json:"spec"`
	Status UserActionMetricsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserActionMetricsList contains a list of UserActionMetricss
type UserActionMetricsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserActionMetrics `json:"items"`
}

// Repository type metadata.
var (
	UserActionMetrics_Kind             = "UserActionMetrics"
	UserActionMetrics_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserActionMetrics_Kind}.String()
	UserActionMetrics_KindAPIVersion   = UserActionMetrics_Kind + "." + CRDGroupVersion.String()
	UserActionMetrics_GroupVersionKind = CRDGroupVersion.WithKind(UserActionMetrics_Kind)
)

func init() {
	SchemeBuilder.Register(&UserActionMetrics{}, &UserActionMetricsList{})
}
