// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserExperienceScoreInitParameters struct {

	// (Boolean) If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	// If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	ConsiderLastAction *bool `json:"considerLastAction,omitempty" tf:"consider_last_action,omitempty"`

	// (Boolean) Consider rage clicks / rage taps in score calculation
	// Consider rage clicks / rage taps in score calculation
	ConsiderRageClick *bool `json:"considerRageClick,omitempty" tf:"consider_rage_click,omitempty"`

	// (Number) User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	// User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	MaxFrustratedUserActionsThreshold *float64 `json:"maxFrustratedUserActionsThreshold,omitempty" tf:"max_frustrated_user_actions_threshold,omitempty"`

	// (Number) User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	// User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	MinSatisfiedUserActionsThreshold *float64 `json:"minSatisfiedUserActionsThreshold,omitempty" tf:"min_satisfied_user_actions_threshold,omitempty"`
}

type UserExperienceScoreObservation struct {

	// (Boolean) If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	// If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	ConsiderLastAction *bool `json:"considerLastAction,omitempty" tf:"consider_last_action,omitempty"`

	// (Boolean) Consider rage clicks / rage taps in score calculation
	// Consider rage clicks / rage taps in score calculation
	ConsiderRageClick *bool `json:"considerRageClick,omitempty" tf:"consider_rage_click,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	// User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	MaxFrustratedUserActionsThreshold *float64 `json:"maxFrustratedUserActionsThreshold,omitempty" tf:"max_frustrated_user_actions_threshold,omitempty"`

	// (Number) User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	// User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	MinSatisfiedUserActionsThreshold *float64 `json:"minSatisfiedUserActionsThreshold,omitempty" tf:"min_satisfied_user_actions_threshold,omitempty"`
}

type UserExperienceScoreParameters struct {

	// (Boolean) If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	// If last user action in a session is classified as Frustrating, classify the entire session as Frustrating
	// +kubebuilder:validation:Optional
	ConsiderLastAction *bool `json:"considerLastAction,omitempty" tf:"consider_last_action,omitempty"`

	// (Boolean) Consider rage clicks / rage taps in score calculation
	// Consider rage clicks / rage taps in score calculation
	// +kubebuilder:validation:Optional
	ConsiderRageClick *bool `json:"considerRageClick,omitempty" tf:"consider_rage_click,omitempty"`

	// (Number) User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	// User experience is considered Frustrating when the selected percentage or more of the user actions in a session are rated as Frustrating.
	// +kubebuilder:validation:Optional
	MaxFrustratedUserActionsThreshold *float64 `json:"maxFrustratedUserActionsThreshold,omitempty" tf:"max_frustrated_user_actions_threshold,omitempty"`

	// (Number) User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	// User experience is considered Satisfying when at least the selected percentage of the user actions in a session are rated as Satisfying.
	// +kubebuilder:validation:Optional
	MinSatisfiedUserActionsThreshold *float64 `json:"minSatisfiedUserActionsThreshold,omitempty" tf:"min_satisfied_user_actions_threshold,omitempty"`
}

// UserExperienceScoreSpec defines the desired state of UserExperienceScore
type UserExperienceScoreSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserExperienceScoreParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserExperienceScoreInitParameters `json:"initProvider,omitempty"`
}

// UserExperienceScoreStatus defines the observed state of UserExperienceScore.
type UserExperienceScoreStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserExperienceScoreObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserExperienceScore is the Schema for the UserExperienceScores API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type UserExperienceScore struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.considerLastAction) || (has(self.initProvider) && has(self.initProvider.considerLastAction))",message="spec.forProvider.considerLastAction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.considerRageClick) || (has(self.initProvider) && has(self.initProvider.considerRageClick))",message="spec.forProvider.considerRageClick is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.maxFrustratedUserActionsThreshold) || (has(self.initProvider) && has(self.initProvider.maxFrustratedUserActionsThreshold))",message="spec.forProvider.maxFrustratedUserActionsThreshold is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.minSatisfiedUserActionsThreshold) || (has(self.initProvider) && has(self.initProvider.minSatisfiedUserActionsThreshold))",message="spec.forProvider.minSatisfiedUserActionsThreshold is a required parameter"
	Spec   UserExperienceScoreSpec   `json:"spec"`
	Status UserExperienceScoreStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserExperienceScoreList contains a list of UserExperienceScores
type UserExperienceScoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserExperienceScore `json:"items"`
}

// Repository type metadata.
var (
	UserExperienceScore_Kind             = "UserExperienceScore"
	UserExperienceScore_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserExperienceScore_Kind}.String()
	UserExperienceScore_KindAPIVersion   = UserExperienceScore_Kind + "." + CRDGroupVersion.String()
	UserExperienceScore_GroupVersionKind = CRDGroupVersion.WithKind(UserExperienceScore_Kind)
)

func init() {
	SchemeBuilder.Register(&UserExperienceScore{}, &UserExperienceScoreList{})
}
