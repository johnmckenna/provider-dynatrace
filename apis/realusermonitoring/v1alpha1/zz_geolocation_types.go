// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GeolocationInitParameters struct {

	// (Boolean) Display the world map
	// Display the world map
	DisplayWorldmap *bool `json:"displayWorldmap,omitempty" tf:"display_worldmap,omitempty"`

	// default). Omit this property if you want to cover the whole environment.
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type GeolocationObservation struct {

	// (Boolean) Display the world map
	// Display the world map
	DisplayWorldmap *bool `json:"displayWorldmap,omitempty" tf:"display_worldmap,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// default). Omit this property if you want to cover the whole environment.
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type GeolocationParameters struct {

	// (Boolean) Display the world map
	// Display the world map
	// +kubebuilder:validation:Optional
	DisplayWorldmap *bool `json:"displayWorldmap,omitempty" tf:"display_worldmap,omitempty"`

	// default). Omit this property if you want to cover the whole environment.
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

// GeolocationSpec defines the desired state of Geolocation
type GeolocationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GeolocationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GeolocationInitParameters `json:"initProvider,omitempty"`
}

// GeolocationStatus defines the observed state of Geolocation.
type GeolocationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GeolocationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Geolocation is the Schema for the Geolocations API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type Geolocation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayWorldmap) || (has(self.initProvider) && has(self.initProvider.displayWorldmap))",message="spec.forProvider.displayWorldmap is a required parameter"
	Spec   GeolocationSpec   `json:"spec"`
	Status GeolocationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GeolocationList contains a list of Geolocations
type GeolocationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Geolocation `json:"items"`
}

// Repository type metadata.
var (
	Geolocation_Kind             = "Geolocation"
	Geolocation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Geolocation_Kind}.String()
	Geolocation_KindAPIVersion   = Geolocation_Kind + "." + CRDGroupVersion.String()
	Geolocation_GroupVersionKind = CRDGroupVersion.WithKind(Geolocation_Kind)
)

func init() {
	SchemeBuilder.Register(&Geolocation{}, &GeolocationList{})
}
