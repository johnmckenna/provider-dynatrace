// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowedEntitiesInitParameters struct {

	// The set of entities allowed to use the credential.
	Entity []EntityInitParameters `json:"entity,omitempty" tf:"entity,omitempty"`
}

type AllowedEntitiesObservation struct {

	// The set of entities allowed to use the credential.
	Entity []EntityObservation `json:"entity,omitempty" tf:"entity,omitempty"`
}

type AllowedEntitiesParameters struct {

	// The set of entities allowed to use the credential.
	// +kubebuilder:validation:Optional
	Entity []EntityParameters `json:"entity" tf:"entity,omitempty"`
}

type CredentialUsageSummaryInitParameters struct {

	// The number of uses
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// Type of usage, `HTTP_MONITOR` or `BROWSER_MONITOR`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CredentialUsageSummaryObservation struct {

	// The number of uses
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// Type of usage, `HTTP_MONITOR` or `BROWSER_MONITOR`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CredentialUsageSummaryParameters struct {

	// The number of uses
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count" tf:"count,omitempty"`

	// Type of usage, `HTTP_MONITOR` or `BROWSER_MONITOR`
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type CredentialsInitParameters struct {

	// Allow ad-hoc functions to access the credential details (requires the APP_ENGINE scope).
	AllowContextlessRequests *bool `json:"allowContextlessRequests,omitempty" tf:"allow_contextless_requests,omitempty"`

	// The set of entities allowed to use the credential.
	AllowedEntities []AllowedEntitiesInitParameters `json:"allowedEntities,omitempty" tf:"allowed_entities,omitempty"`

	// The certificate in the string format.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// The list contains summary data related to the use of credentials
	CredentialUsageSummary []CredentialUsageSummaryInitParameters `json:"credentialUsageSummary,omitempty" tf:"credential_usage_summary,omitempty"`

	// A short description of the credentials set
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// External Vault Configuration
	External []ExternalInitParameters `json:"external,omitempty" tf:"external,omitempty"`

	// The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The name of the credentials set
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The credentials set is available to every user (`false`) or to owner only (`true`)
	OwnerAccessOnly *bool `json:"ownerAccessOnly,omitempty" tf:"owner_access_only,omitempty"`

	// The password of the credential. If you want to set an empty password, use the value `--empty--`.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// For certificate authentication specifies whether it's public certificate auth (`true`) or not (`false`).
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	// The scope of the credentials set. Possible values are `ALL`, `APP_ENGINE`, `EXTENSION` and `SYNTHETIC`
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The set of scopes of the credentials set. Possible values are `APP_ENGINE` and `SYNTHETIC`
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// Token in the string format. Specifying a token implies `Token Authentication`.
	TokenSecretRef *v1.SecretKeySelector `json:"tokenSecretRef,omitempty" tf:"-"`

	// The username of the credentials set.
	UsernameSecretRef *v1.SecretKeySelector `json:"usernameSecretRef,omitempty" tf:"-"`
}

type CredentialsObservation struct {

	// Allow ad-hoc functions to access the credential details (requires the APP_ENGINE scope).
	AllowContextlessRequests *bool `json:"allowContextlessRequests,omitempty" tf:"allow_contextless_requests,omitempty"`

	// The set of entities allowed to use the credential.
	AllowedEntities []AllowedEntitiesObservation `json:"allowedEntities,omitempty" tf:"allowed_entities,omitempty"`

	// The certificate in the string format.
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// The list contains summary data related to the use of credentials
	CredentialUsageSummary []CredentialUsageSummaryObservation `json:"credentialUsageSummary,omitempty" tf:"credential_usage_summary,omitempty"`

	// A short description of the credentials set
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// External Vault Configuration
	External []ExternalObservation `json:"external,omitempty" tf:"external,omitempty"`

	// The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the credentials set
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The credentials set is available to every user (`false`) or to owner only (`true`)
	OwnerAccessOnly *bool `json:"ownerAccessOnly,omitempty" tf:"owner_access_only,omitempty"`

	// For certificate authentication specifies whether it's public certificate auth (`true`) or not (`false`).
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	// The scope of the credentials set. Possible values are `ALL`, `APP_ENGINE`, `EXTENSION` and `SYNTHETIC`
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The set of scopes of the credentials set. Possible values are `APP_ENGINE` and `SYNTHETIC`
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

type CredentialsParameters struct {

	// Allow ad-hoc functions to access the credential details (requires the APP_ENGINE scope).
	// +kubebuilder:validation:Optional
	AllowContextlessRequests *bool `json:"allowContextlessRequests,omitempty" tf:"allow_contextless_requests,omitempty"`

	// The set of entities allowed to use the credential.
	// +kubebuilder:validation:Optional
	AllowedEntities []AllowedEntitiesParameters `json:"allowedEntities,omitempty" tf:"allowed_entities,omitempty"`

	// The certificate in the string format.
	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// The list contains summary data related to the use of credentials
	// +kubebuilder:validation:Optional
	CredentialUsageSummary []CredentialUsageSummaryParameters `json:"credentialUsageSummary,omitempty" tf:"credential_usage_summary,omitempty"`

	// A short description of the credentials set
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// External Vault Configuration
	// +kubebuilder:validation:Optional
	External []ExternalParameters `json:"external,omitempty" tf:"external,omitempty"`

	// The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.
	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// The name of the credentials set
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The credentials set is available to every user (`false`) or to owner only (`true`)
	// +kubebuilder:validation:Optional
	OwnerAccessOnly *bool `json:"ownerAccessOnly,omitempty" tf:"owner_access_only,omitempty"`

	// The password of the credential. If you want to set an empty password, use the value `--empty--`.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// For certificate authentication specifies whether it's public certificate auth (`true`) or not (`false`).
	// +kubebuilder:validation:Optional
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	// The scope of the credentials set. Possible values are `ALL`, `APP_ENGINE`, `EXTENSION` and `SYNTHETIC`
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The set of scopes of the credentials set. Possible values are `APP_ENGINE` and `SYNTHETIC`
	// +kubebuilder:validation:Optional
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// Token in the string format. Specifying a token implies `Token Authentication`.
	// +kubebuilder:validation:Optional
	TokenSecretRef *v1.SecretKeySelector `json:"tokenSecretRef,omitempty" tf:"-"`

	// The username of the credentials set.
	// +kubebuilder:validation:Optional
	UsernameSecretRef *v1.SecretKeySelector `json:"usernameSecretRef,omitempty" tf:"-"`
}

type EntityInitParameters struct {

	// ID of the entity
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Type of entity. Possible values: `USER`, `APPLICATION`, `UNKNOWN`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EntityObservation struct {

	// ID of the entity
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Type of entity. Possible values: `USER`, `APPLICATION`, `UNKNOWN`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EntityParameters struct {

	// ID of the entity
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Type of entity. Possible values: `USER`, `APPLICATION`, `UNKNOWN`
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ExternalInitParameters struct {

	// Required for Hashicorp Certificate. The ID of Credentials within the Certificate Vault holding the certificate
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Required for Azure Client Secret. No further documentation available
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// Required for Azure Client Secret. No further documentation available
	Clientid *string `json:"clientid,omitempty" tf:"clientid,omitempty"`

	// No documentation available
	// +listType=set
	CredentialsUsedForExternalSynchronization []*string `json:"credentialsUsedForExternalSynchronization,omitempty" tf:"credentials_used_for_external_synchronization,omitempty"`

	// No documentation available
	PasswordSecretName *string `json:"passwordSecretName,omitempty" tf:"password_secret_name,omitempty"`

	// Required for Hashicorp App Role or Hashicorp Certificate. No further documentation available
	PathToCredentials *string `json:"pathToCredentials,omitempty" tf:"path_to_credentials,omitempty"`

	// Required for Hashicorp App Role. No further documentation available
	Roleid *string `json:"roleid,omitempty" tf:"roleid,omitempty"`

	// Required for Hashicorp App Role. The ID of Credentials within the Certificate Vault holding the secret id
	Secretid *string `json:"secretid,omitempty" tf:"secretid,omitempty"`

	// Required for Azure Client Secret. No further documentation available
	Tenantid *string `json:"tenantid,omitempty" tf:"tenantid,omitempty"`

	// No documentation available
	TokenSecretName *string `json:"tokenSecretName,omitempty" tf:"token_secret_name,omitempty"`

	// No documentation available
	UsernameSecretName *string `json:"usernameSecretName,omitempty" tf:"username_secret_name,omitempty"`

	// Required for Hashicorp App Role. No further documentation available
	VaultNamespace *string `json:"vaultNamespace,omitempty" tf:"vault_namespace,omitempty"`

	// No documentation available
	VaultURL *string `json:"vaultUrl,omitempty" tf:"vault_url,omitempty"`
}

type ExternalObservation struct {

	// Required for Hashicorp Certificate. The ID of Credentials within the Certificate Vault holding the certificate
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Required for Azure Client Secret. No further documentation available
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// Required for Azure Client Secret. No further documentation available
	Clientid *string `json:"clientid,omitempty" tf:"clientid,omitempty"`

	// No documentation available
	// +listType=set
	CredentialsUsedForExternalSynchronization []*string `json:"credentialsUsedForExternalSynchronization,omitempty" tf:"credentials_used_for_external_synchronization,omitempty"`

	// No documentation available
	PasswordSecretName *string `json:"passwordSecretName,omitempty" tf:"password_secret_name,omitempty"`

	// Required for Hashicorp App Role or Hashicorp Certificate. No further documentation available
	PathToCredentials *string `json:"pathToCredentials,omitempty" tf:"path_to_credentials,omitempty"`

	// Required for Hashicorp App Role. No further documentation available
	Roleid *string `json:"roleid,omitempty" tf:"roleid,omitempty"`

	// Required for Hashicorp App Role. The ID of Credentials within the Certificate Vault holding the secret id
	Secretid *string `json:"secretid,omitempty" tf:"secretid,omitempty"`

	// Required for Azure Client Secret. No further documentation available
	Tenantid *string `json:"tenantid,omitempty" tf:"tenantid,omitempty"`

	// No documentation available
	TokenSecretName *string `json:"tokenSecretName,omitempty" tf:"token_secret_name,omitempty"`

	// No documentation available
	UsernameSecretName *string `json:"usernameSecretName,omitempty" tf:"username_secret_name,omitempty"`

	// Required for Hashicorp App Role. No further documentation available
	VaultNamespace *string `json:"vaultNamespace,omitempty" tf:"vault_namespace,omitempty"`

	// No documentation available
	VaultURL *string `json:"vaultUrl,omitempty" tf:"vault_url,omitempty"`
}

type ExternalParameters struct {

	// Required for Hashicorp Certificate. The ID of Credentials within the Certificate Vault holding the certificate
	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Required for Azure Client Secret. No further documentation available
	// +kubebuilder:validation:Optional
	ClientSecret *string `json:"clientSecret,omitempty" tf:"client_secret,omitempty"`

	// Required for Azure Client Secret. No further documentation available
	// +kubebuilder:validation:Optional
	Clientid *string `json:"clientid,omitempty" tf:"clientid,omitempty"`

	// No documentation available
	// +kubebuilder:validation:Optional
	// +listType=set
	CredentialsUsedForExternalSynchronization []*string `json:"credentialsUsedForExternalSynchronization,omitempty" tf:"credentials_used_for_external_synchronization,omitempty"`

	// No documentation available
	// +kubebuilder:validation:Optional
	PasswordSecretName *string `json:"passwordSecretName,omitempty" tf:"password_secret_name,omitempty"`

	// Required for Hashicorp App Role or Hashicorp Certificate. No further documentation available
	// +kubebuilder:validation:Optional
	PathToCredentials *string `json:"pathToCredentials,omitempty" tf:"path_to_credentials,omitempty"`

	// Required for Hashicorp App Role. No further documentation available
	// +kubebuilder:validation:Optional
	Roleid *string `json:"roleid,omitempty" tf:"roleid,omitempty"`

	// Required for Hashicorp App Role. The ID of Credentials within the Certificate Vault holding the secret id
	// +kubebuilder:validation:Optional
	Secretid *string `json:"secretid,omitempty" tf:"secretid,omitempty"`

	// Required for Azure Client Secret. No further documentation available
	// +kubebuilder:validation:Optional
	Tenantid *string `json:"tenantid,omitempty" tf:"tenantid,omitempty"`

	// No documentation available
	// +kubebuilder:validation:Optional
	TokenSecretName *string `json:"tokenSecretName,omitempty" tf:"token_secret_name,omitempty"`

	// No documentation available
	// +kubebuilder:validation:Optional
	UsernameSecretName *string `json:"usernameSecretName,omitempty" tf:"username_secret_name,omitempty"`

	// Required for Hashicorp App Role. No further documentation available
	// +kubebuilder:validation:Optional
	VaultNamespace *string `json:"vaultNamespace,omitempty" tf:"vault_namespace,omitempty"`

	// No documentation available
	// +kubebuilder:validation:Optional
	VaultURL *string `json:"vaultUrl,omitempty" tf:"vault_url,omitempty"`
}

// CredentialsSpec defines the desired state of Credentials
type CredentialsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CredentialsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CredentialsInitParameters `json:"initProvider,omitempty"`
}

// CredentialsStatus defines the observed state of Credentials.
type CredentialsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CredentialsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Credentials is the Schema for the Credentialss API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type Credentials struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CredentialsSpec   `json:"spec"`
	Status CredentialsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CredentialsList contains a list of Credentialss
type CredentialsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Credentials `json:"items"`
}

// Repository type metadata.
var (
	Credentials_Kind             = "Credentials"
	Credentials_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Credentials_Kind}.String()
	Credentials_KindAPIVersion   = Credentials_Kind + "." + CRDGroupVersion.String()
	Credentials_GroupVersionKind = CRDGroupVersion.WithKind(Credentials_Kind)
)

func init() {
	SchemeBuilder.Register(&Credentials{}, &CredentialsList{})
}
