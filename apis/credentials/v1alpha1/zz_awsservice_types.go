// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsServiceInitParameters struct {

	// (String) the ID of the azure credentials this supported service belongs to
	// the ID of the azure credentials this supported service belongs to
	CredentialsID *string `json:"credentialsId,omitempty" tf:"credentials_id,omitempty"`

	// empty plan, until all of the recommended metrics are present within your configuration. For services considered built-in by Dynatrace any metrics specified here will be ignored - Dynatrace enforces a fixed set of metrics for these services. (see below for nested schema)
	// A list of metrics to be monitored for this service. Depending on the service Dynatrace insists on a set of recommended metrics to be configured for that service. This usually results in a non-empty plan, until all of the recommended metrics are present within your configuration. For services considered `built-in` by Dynatrace any metrics specified here will be ignored - Dynatrace enforces a fixed set of metrics for these services.
	Metric []MetricInitParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the supporting service.
	// The name of the supporting service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Any metric specified will be therefore ignored. Any `metric` specified will be therefore ignored.
	UseRecommendedMetrics *bool `json:"useRecommendedMetrics,omitempty" tf:"use_recommended_metrics,omitempty"`
}

type AwsServiceObservation struct {

	// in service
	// This attribute is automatically set to `true` if Dynatrace considers the supporting service with the given name to be a built-in service
	BuiltIn *bool `json:"builtIn,omitempty" tf:"built_in,omitempty"`

	// (String) the ID of the azure credentials this supported service belongs to
	// the ID of the azure credentials this supported service belongs to
	CredentialsID *string `json:"credentialsId,omitempty" tf:"credentials_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// empty plan, until all of the recommended metrics are present within your configuration. For services considered built-in by Dynatrace any metrics specified here will be ignored - Dynatrace enforces a fixed set of metrics for these services. (see below for nested schema)
	// A list of metrics to be monitored for this service. Depending on the service Dynatrace insists on a set of recommended metrics to be configured for that service. This usually results in a non-empty plan, until all of the recommended metrics are present within your configuration. For services considered `built-in` by Dynatrace any metrics specified here will be ignored - Dynatrace enforces a fixed set of metrics for these services.
	Metric []MetricObservation `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the supporting service.
	// The name of the supporting service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (string) used internally by the provider provider in order to remember the metrics enforced by dynatrace
	// used internally by the provider provider in order to remember the metrics enforced by dynatrace
	RequiredMetrics *string `json:"requiredMetrics,omitempty" tf:"required_metrics,omitempty"`

	// Any metric specified will be therefore ignored. Any `metric` specified will be therefore ignored.
	UseRecommendedMetrics *bool `json:"useRecommendedMetrics,omitempty" tf:"use_recommended_metrics,omitempty"`
}

type AwsServiceParameters struct {

	// (String) the ID of the azure credentials this supported service belongs to
	// the ID of the azure credentials this supported service belongs to
	// +kubebuilder:validation:Optional
	CredentialsID *string `json:"credentialsId,omitempty" tf:"credentials_id,omitempty"`

	// empty plan, until all of the recommended metrics are present within your configuration. For services considered built-in by Dynatrace any metrics specified here will be ignored - Dynatrace enforces a fixed set of metrics for these services. (see below for nested schema)
	// A list of metrics to be monitored for this service. Depending on the service Dynatrace insists on a set of recommended metrics to be configured for that service. This usually results in a non-empty plan, until all of the recommended metrics are present within your configuration. For services considered `built-in` by Dynatrace any metrics specified here will be ignored - Dynatrace enforces a fixed set of metrics for these services.
	// +kubebuilder:validation:Optional
	Metric []MetricParameters `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the supporting service.
	// The name of the supporting service.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Any metric specified will be therefore ignored. Any `metric` specified will be therefore ignored.
	// +kubebuilder:validation:Optional
	UseRecommendedMetrics *bool `json:"useRecommendedMetrics,omitempty" tf:"use_recommended_metrics,omitempty"`
}

type MetricInitParameters struct {

	// (List of String) a list of metric's dimensions names
	// a list of metric's dimensions names
	Dimensions []*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (String) The name of the supporting service.
	// the name of the metric of the supporting service
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible values are AVERAGE, AVG_MIN_MAX, MAXIMUM, MINIMUM, SAMPLE_COUNT and SUM
	// Possible values are `AVERAGE`, `AVG_MIN_MAX`, `MAXIMUM`, `MINIMUM`, `SAMPLE_COUNT` and `SUM`
	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`
}

type MetricObservation struct {

	// (List of String) a list of metric's dimensions names
	// a list of metric's dimensions names
	Dimensions []*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (String) The name of the supporting service.
	// the name of the metric of the supporting service
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible values are AVERAGE, AVG_MIN_MAX, MAXIMUM, MINIMUM, SAMPLE_COUNT and SUM
	// Possible values are `AVERAGE`, `AVG_MIN_MAX`, `MAXIMUM`, `MINIMUM`, `SAMPLE_COUNT` and `SUM`
	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`
}

type MetricParameters struct {

	// (List of String) a list of metric's dimensions names
	// a list of metric's dimensions names
	// +kubebuilder:validation:Optional
	Dimensions []*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (String) The name of the supporting service.
	// the name of the metric of the supporting service
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Possible values are AVERAGE, AVG_MIN_MAX, MAXIMUM, MINIMUM, SAMPLE_COUNT and SUM
	// Possible values are `AVERAGE`, `AVG_MIN_MAX`, `MAXIMUM`, `MINIMUM`, `SAMPLE_COUNT` and `SUM`
	// +kubebuilder:validation:Optional
	Statistic *string `json:"statistic,omitempty" tf:"statistic,omitempty"`
}

// AwsServiceSpec defines the desired state of AwsService
type AwsServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AwsServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AwsServiceInitParameters `json:"initProvider,omitempty"`
}

// AwsServiceStatus defines the observed state of AwsService.
type AwsServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AwsServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AwsService is the Schema for the AwsServices API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type AwsService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.credentialsId) || (has(self.initProvider) && has(self.initProvider.credentialsId))",message="spec.forProvider.credentialsId is a required parameter"
	Spec   AwsServiceSpec   `json:"spec"`
	Status AwsServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AwsServiceList contains a list of AwsServices
type AwsServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AwsService `json:"items"`
}

// Repository type metadata.
var (
	AwsService_Kind             = "AwsService"
	AwsService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AwsService_Kind}.String()
	AwsService_KindAPIVersion   = AwsService_Kind + "." + CRDGroupVersion.String()
	AwsService_GroupVersionKind = CRDGroupVersion.WithKind(AwsService_Kind)
)

func init() {
	SchemeBuilder.Register(&AwsService{}, &AwsServiceList{})
}
