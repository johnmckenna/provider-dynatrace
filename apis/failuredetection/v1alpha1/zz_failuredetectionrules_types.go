// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionsConditionInitParameters struct {

	// (String) Possible Values: PG_NAME, PG_TAG, SERVICE_MANAGEMENT_ZONE, SERVICE_NAME, SERVICE_TAG, SERVICE_TYPE
	// Possible Values: `PG_NAME`, `PG_TAG`, `SERVICE_MANAGEMENT_ZONE`, `SERVICE_NAME`, `SERVICE_TAG`, `SERVICE_TYPE`
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) Condition to check the attribute against (see below for nested schema)
	// Condition to check the attribute against
	Predicate []PredicateInitParameters `json:"predicate,omitempty" tf:"predicate,omitempty"`
}

type ConditionsConditionObservation struct {

	// (String) Possible Values: PG_NAME, PG_TAG, SERVICE_MANAGEMENT_ZONE, SERVICE_NAME, SERVICE_TAG, SERVICE_TYPE
	// Possible Values: `PG_NAME`, `PG_TAG`, `SERVICE_MANAGEMENT_ZONE`, `SERVICE_NAME`, `SERVICE_TAG`, `SERVICE_TYPE`
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) Condition to check the attribute against (see below for nested schema)
	// Condition to check the attribute against
	Predicate []PredicateObservation `json:"predicate,omitempty" tf:"predicate,omitempty"`
}

type ConditionsConditionParameters struct {

	// (String) Possible Values: PG_NAME, PG_TAG, SERVICE_MANAGEMENT_ZONE, SERVICE_NAME, SERVICE_TAG, SERVICE_TYPE
	// Possible Values: `PG_NAME`, `PG_TAG`, `SERVICE_MANAGEMENT_ZONE`, `SERVICE_NAME`, `SERVICE_TAG`, `SERVICE_TYPE`
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) Condition to check the attribute against (see below for nested schema)
	// Condition to check the attribute against
	// +kubebuilder:validation:Optional
	Predicate []PredicateParameters `json:"predicate" tf:"predicate,omitempty"`
}

type ConditionsInitParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Condition []ConditionsConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`
}

type ConditionsObservation struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Condition []ConditionsConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`
}

type ConditionsParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Condition []ConditionsConditionParameters `json:"condition" tf:"condition,omitempty"`
}

type FailureDetectionRulesInitParameters struct {

	// (Block List, Min: 1, Max: 1) Conditions (see below for nested schema)
	// Conditions
	Conditions []ConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) Rule description
	// Rule description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Rule name
	// Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Failure detection parameters
	// Failure detection parameters
	ParameterID *string `json:"parameterId,omitempty" tf:"parameter_id,omitempty"`
}

type FailureDetectionRulesObservation struct {

	// (Block List, Min: 1, Max: 1) Conditions (see below for nested schema)
	// Conditions
	Conditions []ConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) Rule description
	// Rule description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Rule name
	// Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Failure detection parameters
	// Failure detection parameters
	ParameterID *string `json:"parameterId,omitempty" tf:"parameter_id,omitempty"`
}

type FailureDetectionRulesParameters struct {

	// (Block List, Min: 1, Max: 1) Conditions (see below for nested schema)
	// Conditions
	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) Rule description
	// Rule description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// +kubebuilder:validation:Optional
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Rule name
	// Rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Failure detection parameters
	// Failure detection parameters
	// +kubebuilder:validation:Optional
	ParameterID *string `json:"parameterId,omitempty" tf:"parameter_id,omitempty"`
}

type PredicateInitParameters struct {

	// (Boolean) Case sensitive
	// Case sensitive
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Set of String) Management zones
	// Management zones
	// +listType=set
	ManagementZones []*string `json:"managementZones,omitempty" tf:"management_zones,omitempty"`

	// (String) Predicate type
	// Predicate type
	PredicateType *string `json:"predicateType,omitempty" tf:"predicate_type,omitempty"`

	// (Set of String) Service types
	// Service types
	// +listType=set
	ServiceType []*string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Set of String) Tag keys
	// Tag keys
	// +listType=set
	TagKeys []*string `json:"tagKeys,omitempty" tf:"tag_keys,omitempty"`

	// (Set of String) Tags (exact match)
	// Tags (exact match)
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Set of String) Names
	// Names
	// +listType=set
	TextValues []*string `json:"textValues,omitempty" tf:"text_values,omitempty"`
}

type PredicateObservation struct {

	// (Boolean) Case sensitive
	// Case sensitive
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Set of String) Management zones
	// Management zones
	// +listType=set
	ManagementZones []*string `json:"managementZones,omitempty" tf:"management_zones,omitempty"`

	// (String) Predicate type
	// Predicate type
	PredicateType *string `json:"predicateType,omitempty" tf:"predicate_type,omitempty"`

	// (Set of String) Service types
	// Service types
	// +listType=set
	ServiceType []*string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Set of String) Tag keys
	// Tag keys
	// +listType=set
	TagKeys []*string `json:"tagKeys,omitempty" tf:"tag_keys,omitempty"`

	// (Set of String) Tags (exact match)
	// Tags (exact match)
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Set of String) Names
	// Names
	// +listType=set
	TextValues []*string `json:"textValues,omitempty" tf:"text_values,omitempty"`
}

type PredicateParameters struct {

	// (Boolean) Case sensitive
	// Case sensitive
	// +kubebuilder:validation:Optional
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Set of String) Management zones
	// Management zones
	// +kubebuilder:validation:Optional
	// +listType=set
	ManagementZones []*string `json:"managementZones,omitempty" tf:"management_zones,omitempty"`

	// (String) Predicate type
	// Predicate type
	// +kubebuilder:validation:Optional
	PredicateType *string `json:"predicateType" tf:"predicate_type,omitempty"`

	// (Set of String) Service types
	// Service types
	// +kubebuilder:validation:Optional
	// +listType=set
	ServiceType []*string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Set of String) Tag keys
	// Tag keys
	// +kubebuilder:validation:Optional
	// +listType=set
	TagKeys []*string `json:"tagKeys,omitempty" tf:"tag_keys,omitempty"`

	// (Set of String) Tags (exact match)
	// Tags (exact match)
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Set of String) Names
	// Names
	// +kubebuilder:validation:Optional
	// +listType=set
	TextValues []*string `json:"textValues,omitempty" tf:"text_values,omitempty"`
}

// FailureDetectionRulesSpec defines the desired state of FailureDetectionRules
type FailureDetectionRulesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FailureDetectionRulesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FailureDetectionRulesInitParameters `json:"initProvider,omitempty"`
}

// FailureDetectionRulesStatus defines the observed state of FailureDetectionRules.
type FailureDetectionRulesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FailureDetectionRulesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FailureDetectionRules is the Schema for the FailureDetectionRuless API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type FailureDetectionRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.conditions) || (has(self.initProvider) && has(self.initProvider.conditions))",message="spec.forProvider.conditions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parameterId) || (has(self.initProvider) && has(self.initProvider.parameterId))",message="spec.forProvider.parameterId is a required parameter"
	Spec   FailureDetectionRulesSpec   `json:"spec"`
	Status FailureDetectionRulesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FailureDetectionRulesList contains a list of FailureDetectionRuless
type FailureDetectionRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FailureDetectionRules `json:"items"`
}

// Repository type metadata.
var (
	FailureDetectionRules_Kind             = "FailureDetectionRules"
	FailureDetectionRules_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FailureDetectionRules_Kind}.String()
	FailureDetectionRules_KindAPIVersion   = FailureDetectionRules_Kind + "." + CRDGroupVersion.String()
	FailureDetectionRules_GroupVersionKind = CRDGroupVersion.WithKind(FailureDetectionRules_Kind)
)

func init() {
	SchemeBuilder.Register(&FailureDetectionRules{}, &FailureDetectionRulesList{})
}
