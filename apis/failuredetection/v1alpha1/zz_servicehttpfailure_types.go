// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceHTTPFailureBrokenLinksInitParameters struct {

	// (Set of String) If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
	// If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
	// +listType=set
	BrokenLinkDomains []*string `json:"brokenLinkDomains,omitempty" tf:"broken_link_domains,omitempty"`

	// (Boolean) Consider 404 HTTP response codes as failures
	// Consider 404 HTTP response codes as failures
	HTTP404NotFoundFailures *bool `json:"http404NotFoundFailures,omitempty" tf:"http_404_not_found_failures,omitempty"`
}

type ServiceHTTPFailureBrokenLinksObservation struct {

	// (Set of String) If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
	// If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
	// +listType=set
	BrokenLinkDomains []*string `json:"brokenLinkDomains,omitempty" tf:"broken_link_domains,omitempty"`

	// (Boolean) Consider 404 HTTP response codes as failures
	// Consider 404 HTTP response codes as failures
	HTTP404NotFoundFailures *bool `json:"http404NotFoundFailures,omitempty" tf:"http_404_not_found_failures,omitempty"`
}

type ServiceHTTPFailureBrokenLinksParameters struct {

	// (Set of String) If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
	// If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
	// +kubebuilder:validation:Optional
	// +listType=set
	BrokenLinkDomains []*string `json:"brokenLinkDomains,omitempty" tf:"broken_link_domains,omitempty"`

	// (Boolean) Consider 404 HTTP response codes as failures
	// Consider 404 HTTP response codes as failures
	// +kubebuilder:validation:Optional
	HTTP404NotFoundFailures *bool `json:"http404NotFoundFailures" tf:"http_404_not_found_failures,omitempty"`
}

type ServiceHTTPFailureHTTPResponseCodesInitParameters struct {

	// (String) HTTP response codes which indicate client side errors
	// HTTP response codes which indicate client side errors
	ClientSideErrors *string `json:"clientSideErrors,omitempty" tf:"client_side_errors,omitempty"`

	// (Boolean) Treat missing HTTP response code as client side error
	// Treat missing HTTP response code as client side error
	FailOnMissingResponseCodeClientSide *bool `json:"failOnMissingResponseCodeClientSide,omitempty" tf:"fail_on_missing_response_code_client_side,omitempty"`

	// (Boolean) Treat missing HTTP response code as server side errors
	// Treat missing HTTP response code as server side errors
	FailOnMissingResponseCodeServerSide *bool `json:"failOnMissingResponseCodeServerSide,omitempty" tf:"fail_on_missing_response_code_server_side,omitempty"`

	// (String) HTTP response codes which indicate an error on the server side
	// HTTP response codes which indicate an error on the server side
	ServerSideErrors *string `json:"serverSideErrors,omitempty" tf:"server_side_errors,omitempty"`
}

type ServiceHTTPFailureHTTPResponseCodesObservation struct {

	// (String) HTTP response codes which indicate client side errors
	// HTTP response codes which indicate client side errors
	ClientSideErrors *string `json:"clientSideErrors,omitempty" tf:"client_side_errors,omitempty"`

	// (Boolean) Treat missing HTTP response code as client side error
	// Treat missing HTTP response code as client side error
	FailOnMissingResponseCodeClientSide *bool `json:"failOnMissingResponseCodeClientSide,omitempty" tf:"fail_on_missing_response_code_client_side,omitempty"`

	// (Boolean) Treat missing HTTP response code as server side errors
	// Treat missing HTTP response code as server side errors
	FailOnMissingResponseCodeServerSide *bool `json:"failOnMissingResponseCodeServerSide,omitempty" tf:"fail_on_missing_response_code_server_side,omitempty"`

	// (String) HTTP response codes which indicate an error on the server side
	// HTTP response codes which indicate an error on the server side
	ServerSideErrors *string `json:"serverSideErrors,omitempty" tf:"server_side_errors,omitempty"`
}

type ServiceHTTPFailureHTTPResponseCodesParameters struct {

	// (String) HTTP response codes which indicate client side errors
	// HTTP response codes which indicate client side errors
	// +kubebuilder:validation:Optional
	ClientSideErrors *string `json:"clientSideErrors" tf:"client_side_errors,omitempty"`

	// (Boolean) Treat missing HTTP response code as client side error
	// Treat missing HTTP response code as client side error
	// +kubebuilder:validation:Optional
	FailOnMissingResponseCodeClientSide *bool `json:"failOnMissingResponseCodeClientSide" tf:"fail_on_missing_response_code_client_side,omitempty"`

	// (Boolean) Treat missing HTTP response code as server side errors
	// Treat missing HTTP response code as server side errors
	// +kubebuilder:validation:Optional
	FailOnMissingResponseCodeServerSide *bool `json:"failOnMissingResponseCodeServerSide" tf:"fail_on_missing_response_code_server_side,omitempty"`

	// (String) HTTP response codes which indicate an error on the server side
	// HTTP response codes which indicate an error on the server side
	// +kubebuilder:validation:Optional
	ServerSideErrors *string `json:"serverSideErrors" tf:"server_side_errors,omitempty"`
}

type ServiceHTTPFailureInitParameters struct {

	// side service failures. (see below for nested schema)
	// HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on the client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
	BrokenLinks []ServiceHTTPFailureBrokenLinksInitParameters `json:"brokenLinks,omitempty" tf:"broken_links,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) HTTP response codes (see below for nested schema)
	// HTTP response codes
	HTTPResponseCodes []ServiceHTTPFailureHTTPResponseCodesInitParameters `json:"httpResponseCodes,omitempty" tf:"http_response_codes,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

type ServiceHTTPFailureObservation struct {

	// side service failures. (see below for nested schema)
	// HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on the client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
	BrokenLinks []ServiceHTTPFailureBrokenLinksObservation `json:"brokenLinks,omitempty" tf:"broken_links,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) HTTP response codes (see below for nested schema)
	// HTTP response codes
	HTTPResponseCodes []ServiceHTTPFailureHTTPResponseCodesObservation `json:"httpResponseCodes,omitempty" tf:"http_response_codes,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

type ServiceHTTPFailureParameters struct {

	// side service failures. (see below for nested schema)
	// HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on the client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s treated as server-side service failures.
	// +kubebuilder:validation:Optional
	BrokenLinks []ServiceHTTPFailureBrokenLinksParameters `json:"brokenLinks,omitempty" tf:"broken_links,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) HTTP response codes (see below for nested schema)
	// HTTP response codes
	// +kubebuilder:validation:Optional
	HTTPResponseCodes []ServiceHTTPFailureHTTPResponseCodesParameters `json:"httpResponseCodes,omitempty" tf:"http_response_codes,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`
}

// ServiceHTTPFailureSpec defines the desired state of ServiceHTTPFailure
type ServiceHTTPFailureSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceHTTPFailureParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceHTTPFailureInitParameters `json:"initProvider,omitempty"`
}

// ServiceHTTPFailureStatus defines the observed state of ServiceHTTPFailure.
type ServiceHTTPFailureStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceHTTPFailureObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceHTTPFailure is the Schema for the ServiceHTTPFailures API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ServiceHTTPFailure struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceId) || (has(self.initProvider) && has(self.initProvider.serviceId))",message="spec.forProvider.serviceId is a required parameter"
	Spec   ServiceHTTPFailureSpec   `json:"spec"`
	Status ServiceHTTPFailureStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceHTTPFailureList contains a list of ServiceHTTPFailures
type ServiceHTTPFailureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceHTTPFailure `json:"items"`
}

// Repository type metadata.
var (
	ServiceHTTPFailure_Kind             = "ServiceHTTPFailure"
	ServiceHTTPFailure_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceHTTPFailure_Kind}.String()
	ServiceHTTPFailure_KindAPIVersion   = ServiceHTTPFailure_Kind + "." + CRDGroupVersion.String()
	ServiceHTTPFailure_GroupVersionKind = CRDGroupVersion.WithKind(ServiceHTTPFailure_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceHTTPFailure{}, &ServiceHTTPFailureList{})
}
