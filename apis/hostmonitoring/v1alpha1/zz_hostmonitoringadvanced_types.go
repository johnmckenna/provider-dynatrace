// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HostMonitoringAdvancedInitParameters struct {

	// (Boolean) Inject CodeModules in Discovery mode.
	// Inject CodeModules in Discovery mode.
	CodeModuleInjection *bool `json:"codeModuleInjection,omitempty" tf:"code_module_injection,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	// (Boolean) Disabling this via oneagentctl takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	// Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	ProcessAgentInjection *bool `json:"processAgentInjection,omitempty" tf:"process_agent_injection,omitempty"`
}

type HostMonitoringAdvancedObservation struct {

	// (Boolean) Inject CodeModules in Discovery mode.
	// Inject CodeModules in Discovery mode.
	CodeModuleInjection *bool `json:"codeModuleInjection,omitempty" tf:"code_module_injection,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Disabling this via oneagentctl takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	// Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	ProcessAgentInjection *bool `json:"processAgentInjection,omitempty" tf:"process_agent_injection,omitempty"`
}

type HostMonitoringAdvancedParameters struct {

	// (Boolean) Inject CodeModules in Discovery mode.
	// Inject CodeModules in Discovery mode.
	// +kubebuilder:validation:Optional
	CodeModuleInjection *bool `json:"codeModuleInjection,omitempty" tf:"code_module_injection,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// +kubebuilder:validation:Optional
	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	// (Boolean) Disabling this via oneagentctl takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	// Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be changed from the Dynatrace web UI.
	// +kubebuilder:validation:Optional
	ProcessAgentInjection *bool `json:"processAgentInjection,omitempty" tf:"process_agent_injection,omitempty"`
}

// HostMonitoringAdvancedSpec defines the desired state of HostMonitoringAdvanced
type HostMonitoringAdvancedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HostMonitoringAdvancedParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HostMonitoringAdvancedInitParameters `json:"initProvider,omitempty"`
}

// HostMonitoringAdvancedStatus defines the observed state of HostMonitoringAdvanced.
type HostMonitoringAdvancedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HostMonitoringAdvancedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HostMonitoringAdvanced is the Schema for the HostMonitoringAdvanceds API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type HostMonitoringAdvanced struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostId) || (has(self.initProvider) && has(self.initProvider.hostId))",message="spec.forProvider.hostId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.processAgentInjection) || (has(self.initProvider) && has(self.initProvider.processAgentInjection))",message="spec.forProvider.processAgentInjection is a required parameter"
	Spec   HostMonitoringAdvancedSpec   `json:"spec"`
	Status HostMonitoringAdvancedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HostMonitoringAdvancedList contains a list of HostMonitoringAdvanceds
type HostMonitoringAdvancedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HostMonitoringAdvanced `json:"items"`
}

// Repository type metadata.
var (
	HostMonitoringAdvanced_Kind             = "HostMonitoringAdvanced"
	HostMonitoringAdvanced_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HostMonitoringAdvanced_Kind}.String()
	HostMonitoringAdvanced_KindAPIVersion   = HostMonitoringAdvanced_Kind + "." + CRDGroupVersion.String()
	HostMonitoringAdvanced_GroupVersionKind = CRDGroupVersion.WithKind(HostMonitoringAdvanced_Kind)
)

func init() {
	SchemeBuilder.Register(&HostMonitoringAdvanced{}, &HostMonitoringAdvancedList{})
}
