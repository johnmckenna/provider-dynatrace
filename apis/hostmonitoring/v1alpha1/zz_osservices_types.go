// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DetectionConditionsLinuxInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	LinuxDetectionCondition []LinuxDetectionConditionInitParameters `json:"linuxDetectionCondition,omitempty" tf:"linux_detection_condition,omitempty"`
}

type DetectionConditionsLinuxObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	LinuxDetectionCondition []LinuxDetectionConditionObservation `json:"linuxDetectionCondition,omitempty" tf:"linux_detection_condition,omitempty"`
}

type DetectionConditionsLinuxParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	LinuxDetectionCondition []LinuxDetectionConditionParameters `json:"linuxDetectionCondition" tf:"linux_detection_condition,omitempty"`
}

type DetectionConditionsWindowHostMetadataConditionInitParameters struct {

	// (Boolean) When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	// When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	KeyMustExist *bool `json:"keyMustExist,omitempty" tf:"key_must_exist,omitempty"`

	// (String) This string has to match a required format.
	// This string has to match a required format.
	//
	// - `$contains(production)` – Matches if `production` appears anywhere in the host metadata value.
	// - `$eq(production)` – Matches if `production` matches the host metadata value exactly.
	// - `$prefix(production)` – Matches if `production` matches the prefix of the host metadata value.
	// - `$suffix(production)` – Matches if `production` matches the suffix of the host metadata value.
	//
	// Available logic operations:
	// - `$not($eq(production))` – Matches if the host metadata value is different from `production`.
	// - `$and($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` and ends with `main`.
	// - `$or($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` or ends with `main`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	MetadataCondition *string `json:"metadataCondition,omitempty" tf:"metadata_condition,omitempty"`

	// (String) Key
	// Key
	MetadataKey *string `json:"metadataKey,omitempty" tf:"metadata_key,omitempty"`
}

type DetectionConditionsWindowHostMetadataConditionObservation struct {

	// (Boolean) When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	// When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	KeyMustExist *bool `json:"keyMustExist,omitempty" tf:"key_must_exist,omitempty"`

	// (String) This string has to match a required format.
	// This string has to match a required format.
	//
	// - `$contains(production)` – Matches if `production` appears anywhere in the host metadata value.
	// - `$eq(production)` – Matches if `production` matches the host metadata value exactly.
	// - `$prefix(production)` – Matches if `production` matches the prefix of the host metadata value.
	// - `$suffix(production)` – Matches if `production` matches the suffix of the host metadata value.
	//
	// Available logic operations:
	// - `$not($eq(production))` – Matches if the host metadata value is different from `production`.
	// - `$and($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` and ends with `main`.
	// - `$or($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` or ends with `main`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	MetadataCondition *string `json:"metadataCondition,omitempty" tf:"metadata_condition,omitempty"`

	// (String) Key
	// Key
	MetadataKey *string `json:"metadataKey,omitempty" tf:"metadata_key,omitempty"`
}

type DetectionConditionsWindowHostMetadataConditionParameters struct {

	// (Boolean) When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	// When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	// +kubebuilder:validation:Optional
	KeyMustExist *bool `json:"keyMustExist,omitempty" tf:"key_must_exist,omitempty"`

	// (String) This string has to match a required format.
	// This string has to match a required format.
	//
	// - `$contains(production)` – Matches if `production` appears anywhere in the host metadata value.
	// - `$eq(production)` – Matches if `production` matches the host metadata value exactly.
	// - `$prefix(production)` – Matches if `production` matches the prefix of the host metadata value.
	// - `$suffix(production)` – Matches if `production` matches the suffix of the host metadata value.
	//
	// Available logic operations:
	// - `$not($eq(production))` – Matches if the host metadata value is different from `production`.
	// - `$and($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` and ends with `main`.
	// - `$or($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` or ends with `main`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	// +kubebuilder:validation:Optional
	MetadataCondition *string `json:"metadataCondition" tf:"metadata_condition,omitempty"`

	// (String) Key
	// Key
	// +kubebuilder:validation:Optional
	MetadataKey *string `json:"metadataKey" tf:"metadata_key,omitempty"`
}

type DetectionConditionsWindowInitParameters struct {

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$contains(ssh)` – Matches if `ssh` appears anywhere in the service's property value.
	// - `$eq(sshd)` – Matches if `sshd` matches the service's property value exactly.
	// - `$prefix(ss)` – Matches if `ss` matches the prefix of the service's property value.
	// - `$suffix(hd)` – Matches if `hd` matches the suffix of the service's property value.
	//
	// Available logic operations:
	// - `$not($eq(sshd))` – Matches if the service's property value is different from `sshd`.
	// - `$and($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` and ends with `hd`.
	// - `$or($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` or ends with `hd`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Block List, Max: 1) Custom metadata (see below for nested schema)
	// Custom metadata
	HostMetadataCondition []DetectionConditionsWindowHostMetadataConditionInitParameters `json:"hostMetadataCondition,omitempty" tf:"host_metadata_condition,omitempty"`

	// (String) Possible Values: ServiceName, StartupType
	// Possible Values: `DisplayName`, `Manufacturer`, `Path`, `ServiceName`, `StartupType`
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Possible Values: RuleTypeHost, RuleTypeOsService
	// Possible Values: `RuleTypeHost`, `RuleTypeOsService`
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(manual)` – Matches services that are started manually.
	//
	// Available logic operations:
	// - `$not($eq(auto))` – Matches services with startup type different from Automatic.
	// - `$or($eq(auto),$eq(manual))` – Matches if service's startup type is either Automatic or Manual.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `manual` for Manual
	// - `manual_trigger` for Manual (Trigger Start)
	// - `auto` for Automatic
	// - `auto_delay` for Automatic (Delayed Start)
	// - `auto_trigger` for Automatic (Trigger Start)
	// - `auto_delay_trigger` for Automatic (Delayed Start, Trigger Start)
	// - `disabled` for Disabled
	StartupCondition *string `json:"startupCondition,omitempty" tf:"startup_condition,omitempty"`
}

type DetectionConditionsWindowObservation struct {

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$contains(ssh)` – Matches if `ssh` appears anywhere in the service's property value.
	// - `$eq(sshd)` – Matches if `sshd` matches the service's property value exactly.
	// - `$prefix(ss)` – Matches if `ss` matches the prefix of the service's property value.
	// - `$suffix(hd)` – Matches if `hd` matches the suffix of the service's property value.
	//
	// Available logic operations:
	// - `$not($eq(sshd))` – Matches if the service's property value is different from `sshd`.
	// - `$and($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` and ends with `hd`.
	// - `$or($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` or ends with `hd`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Block List, Max: 1) Custom metadata (see below for nested schema)
	// Custom metadata
	HostMetadataCondition []DetectionConditionsWindowHostMetadataConditionObservation `json:"hostMetadataCondition,omitempty" tf:"host_metadata_condition,omitempty"`

	// (String) Possible Values: ServiceName, StartupType
	// Possible Values: `DisplayName`, `Manufacturer`, `Path`, `ServiceName`, `StartupType`
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Possible Values: RuleTypeHost, RuleTypeOsService
	// Possible Values: `RuleTypeHost`, `RuleTypeOsService`
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(manual)` – Matches services that are started manually.
	//
	// Available logic operations:
	// - `$not($eq(auto))` – Matches services with startup type different from Automatic.
	// - `$or($eq(auto),$eq(manual))` – Matches if service's startup type is either Automatic or Manual.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `manual` for Manual
	// - `manual_trigger` for Manual (Trigger Start)
	// - `auto` for Automatic
	// - `auto_delay` for Automatic (Delayed Start)
	// - `auto_trigger` for Automatic (Trigger Start)
	// - `auto_delay_trigger` for Automatic (Delayed Start, Trigger Start)
	// - `disabled` for Disabled
	StartupCondition *string `json:"startupCondition,omitempty" tf:"startup_condition,omitempty"`
}

type DetectionConditionsWindowParameters struct {

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$contains(ssh)` – Matches if `ssh` appears anywhere in the service's property value.
	// - `$eq(sshd)` – Matches if `sshd` matches the service's property value exactly.
	// - `$prefix(ss)` – Matches if `ss` matches the prefix of the service's property value.
	// - `$suffix(hd)` – Matches if `hd` matches the suffix of the service's property value.
	//
	// Available logic operations:
	// - `$not($eq(sshd))` – Matches if the service's property value is different from `sshd`.
	// - `$and($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` and ends with `hd`.
	// - `$or($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` or ends with `hd`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Block List, Max: 1) Custom metadata (see below for nested schema)
	// Custom metadata
	// +kubebuilder:validation:Optional
	HostMetadataCondition []DetectionConditionsWindowHostMetadataConditionParameters `json:"hostMetadataCondition,omitempty" tf:"host_metadata_condition,omitempty"`

	// (String) Possible Values: ServiceName, StartupType
	// Possible Values: `DisplayName`, `Manufacturer`, `Path`, `ServiceName`, `StartupType`
	// +kubebuilder:validation:Optional
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Possible Values: RuleTypeHost, RuleTypeOsService
	// Possible Values: `RuleTypeHost`, `RuleTypeOsService`
	// +kubebuilder:validation:Optional
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(manual)` – Matches services that are started manually.
	//
	// Available logic operations:
	// - `$not($eq(auto))` – Matches services with startup type different from Automatic.
	// - `$or($eq(auto),$eq(manual))` – Matches if service's startup type is either Automatic or Manual.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `manual` for Manual
	// - `manual_trigger` for Manual (Trigger Start)
	// - `auto` for Automatic
	// - `auto_delay` for Automatic (Delayed Start)
	// - `auto_trigger` for Automatic (Trigger Start)
	// - `auto_delay_trigger` for Automatic (Delayed Start, Trigger Start)
	// - `disabled` for Disabled
	// +kubebuilder:validation:Optional
	StartupCondition *string `json:"startupCondition,omitempty" tf:"startup_condition,omitempty"`
}

type DetectionConditionsWindowsInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	DetectionConditionsWindow []DetectionConditionsWindowInitParameters `json:"detectionConditionsWindow,omitempty" tf:"detection_conditions_window,omitempty"`
}

type DetectionConditionsWindowsObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	DetectionConditionsWindow []DetectionConditionsWindowObservation `json:"detectionConditionsWindow,omitempty" tf:"detection_conditions_window,omitempty"`
}

type DetectionConditionsWindowsParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	DetectionConditionsWindow []DetectionConditionsWindowParameters `json:"detectionConditionsWindow" tf:"detection_conditions_window,omitempty"`
}

type HostMetadataConditionInitParameters struct {

	// (Boolean) When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	// When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	KeyMustExist *bool `json:"keyMustExist,omitempty" tf:"key_must_exist,omitempty"`

	// (String) This string has to match a required format.
	// This string has to match a required format.
	//
	// - `$contains(production)` – Matches if `production` appears anywhere in the host metadata value.
	// - `$eq(production)` – Matches if `production` matches the host metadata value exactly.
	// - `$prefix(production)` – Matches if `production` matches the prefix of the host metadata value.
	// - `$suffix(production)` – Matches if `production` matches the suffix of the host metadata value.
	//
	// Available logic operations:
	// - `$not($eq(production))` – Matches if the host metadata value is different from `production`.
	// - `$and($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` and ends with `main`.
	// - `$or($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` or ends with `main`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	MetadataCondition *string `json:"metadataCondition,omitempty" tf:"metadata_condition,omitempty"`

	// (String) Key
	// Key
	MetadataKey *string `json:"metadataKey,omitempty" tf:"metadata_key,omitempty"`
}

type HostMetadataConditionObservation struct {

	// (Boolean) When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	// When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	KeyMustExist *bool `json:"keyMustExist,omitempty" tf:"key_must_exist,omitempty"`

	// (String) This string has to match a required format.
	// This string has to match a required format.
	//
	// - `$contains(production)` – Matches if `production` appears anywhere in the host metadata value.
	// - `$eq(production)` – Matches if `production` matches the host metadata value exactly.
	// - `$prefix(production)` – Matches if `production` matches the prefix of the host metadata value.
	// - `$suffix(production)` – Matches if `production` matches the suffix of the host metadata value.
	//
	// Available logic operations:
	// - `$not($eq(production))` – Matches if the host metadata value is different from `production`.
	// - `$and($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` and ends with `main`.
	// - `$or($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` or ends with `main`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	MetadataCondition *string `json:"metadataCondition,omitempty" tf:"metadata_condition,omitempty"`

	// (String) Key
	// Key
	MetadataKey *string `json:"metadataKey,omitempty" tf:"metadata_key,omitempty"`
}

type HostMetadataConditionParameters struct {

	// (Boolean) When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	// When enabled, the condition requires a metadata key to exist and match the constraints; when disabled, the key is optional but must still match the constrains if it is present.
	// +kubebuilder:validation:Optional
	KeyMustExist *bool `json:"keyMustExist,omitempty" tf:"key_must_exist,omitempty"`

	// (String) This string has to match a required format.
	// This string has to match a required format.
	//
	// - `$contains(production)` – Matches if `production` appears anywhere in the host metadata value.
	// - `$eq(production)` – Matches if `production` matches the host metadata value exactly.
	// - `$prefix(production)` – Matches if `production` matches the prefix of the host metadata value.
	// - `$suffix(production)` – Matches if `production` matches the suffix of the host metadata value.
	//
	// Available logic operations:
	// - `$not($eq(production))` – Matches if the host metadata value is different from `production`.
	// - `$and($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` and ends with `main`.
	// - `$or($prefix(production),$suffix(main))` – Matches if host metadata value starts with `production` or ends with `main`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	// +kubebuilder:validation:Optional
	MetadataCondition *string `json:"metadataCondition" tf:"metadata_condition,omitempty"`

	// (String) Key
	// Key
	// +kubebuilder:validation:Optional
	MetadataKey *string `json:"metadataKey" tf:"metadata_key,omitempty"`
}

type ItemInitParameters struct {

	// (String) Key
	// Type 'dt.' for key hints.
	MetadataKey *string `json:"metadataKey,omitempty" tf:"metadata_key,omitempty"`

	// (String) no documentation available
	// no documentation available
	MetadataValue *string `json:"metadataValue,omitempty" tf:"metadata_value,omitempty"`
}

type ItemObservation struct {

	// (String) Key
	// Type 'dt.' for key hints.
	MetadataKey *string `json:"metadataKey,omitempty" tf:"metadata_key,omitempty"`

	// (String) no documentation available
	// no documentation available
	MetadataValue *string `json:"metadataValue,omitempty" tf:"metadata_value,omitempty"`
}

type ItemParameters struct {

	// (String) Key
	// Type 'dt.' for key hints.
	// +kubebuilder:validation:Optional
	MetadataKey *string `json:"metadataKey" tf:"metadata_key,omitempty"`

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	MetadataValue *string `json:"metadataValue" tf:"metadata_value,omitempty"`
}

type LinuxDetectionConditionInitParameters struct {

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$contains(ssh)` – Matches if `ssh` appears anywhere in the service's property value.
	// - `$eq(sshd)` – Matches if `sshd` matches the service's property value exactly.
	// - `$prefix(ss)` – Matches if `ss` matches the prefix of the service's property value.
	// - `$suffix(hd)` – Matches if `hd` matches the suffix of the service's property value.
	//
	// Available logic operations:
	// - `$not($eq(sshd))` – Matches if the service's property value is different from `sshd`.
	// - `$and($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` and ends with `hd`.
	// - `$or($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` or ends with `hd`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Block List, Max: 1) Custom metadata (see below for nested schema)
	// Custom metadata
	HostMetadataCondition []HostMetadataConditionInitParameters `json:"hostMetadataCondition,omitempty" tf:"host_metadata_condition,omitempty"`

	// (String) Possible Values: ServiceName, StartupType
	// Possible Values: `ServiceName`, `StartupType`
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Possible Values: RuleTypeHost, RuleTypeOsService
	// Possible Values: `RuleTypeHost`, `RuleTypeOsService`
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(enabled)` – Matches services with startup type equal to enabled.
	//
	// Available logic operations:
	// - `$not($eq(enabled))` – Matches services with startup type different from enabled.
	// - `$or($eq(enabled),$eq(disabled))` - Matches services that are either enabled or disabled.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `enabled`
	// - `enabled-runtime`
	// - `static`
	// - `disabled`
	StartupCondition *string `json:"startupCondition,omitempty" tf:"startup_condition,omitempty"`
}

type LinuxDetectionConditionObservation struct {

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$contains(ssh)` – Matches if `ssh` appears anywhere in the service's property value.
	// - `$eq(sshd)` – Matches if `sshd` matches the service's property value exactly.
	// - `$prefix(ss)` – Matches if `ss` matches the prefix of the service's property value.
	// - `$suffix(hd)` – Matches if `hd` matches the suffix of the service's property value.
	//
	// Available logic operations:
	// - `$not($eq(sshd))` – Matches if the service's property value is different from `sshd`.
	// - `$and($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` and ends with `hd`.
	// - `$or($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` or ends with `hd`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Block List, Max: 1) Custom metadata (see below for nested schema)
	// Custom metadata
	HostMetadataCondition []HostMetadataConditionObservation `json:"hostMetadataCondition,omitempty" tf:"host_metadata_condition,omitempty"`

	// (String) Possible Values: ServiceName, StartupType
	// Possible Values: `ServiceName`, `StartupType`
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Possible Values: RuleTypeHost, RuleTypeOsService
	// Possible Values: `RuleTypeHost`, `RuleTypeOsService`
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(enabled)` – Matches services with startup type equal to enabled.
	//
	// Available logic operations:
	// - `$not($eq(enabled))` – Matches services with startup type different from enabled.
	// - `$or($eq(enabled),$eq(disabled))` - Matches services that are either enabled or disabled.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `enabled`
	// - `enabled-runtime`
	// - `static`
	// - `disabled`
	StartupCondition *string `json:"startupCondition,omitempty" tf:"startup_condition,omitempty"`
}

type LinuxDetectionConditionParameters struct {

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$contains(ssh)` – Matches if `ssh` appears anywhere in the service's property value.
	// - `$eq(sshd)` – Matches if `sshd` matches the service's property value exactly.
	// - `$prefix(ss)` – Matches if `ss` matches the prefix of the service's property value.
	// - `$suffix(hd)` – Matches if `hd` matches the suffix of the service's property value.
	//
	// Available logic operations:
	// - `$not($eq(sshd))` – Matches if the service's property value is different from `sshd`.
	// - `$and($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` and ends with `hd`.
	// - `$or($prefix(ss),$suffix(hd))` – Matches if service's property value starts with `ss` or ends with `hd`.
	//
	// Brackets **(** and **)** that are part of the matched property **must be escaped with a tilde (~)**
	// +kubebuilder:validation:Optional
	Condition *string `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Block List, Max: 1) Custom metadata (see below for nested schema)
	// Custom metadata
	// +kubebuilder:validation:Optional
	HostMetadataCondition []HostMetadataConditionParameters `json:"hostMetadataCondition,omitempty" tf:"host_metadata_condition,omitempty"`

	// (String) Possible Values: ServiceName, StartupType
	// Possible Values: `ServiceName`, `StartupType`
	// +kubebuilder:validation:Optional
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// (String) Possible Values: RuleTypeHost, RuleTypeOsService
	// Possible Values: `RuleTypeHost`, `RuleTypeOsService`
	// +kubebuilder:validation:Optional
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(enabled)` – Matches services with startup type equal to enabled.
	//
	// Available logic operations:
	// - `$not($eq(enabled))` – Matches services with startup type different from enabled.
	// - `$or($eq(enabled),$eq(disabled))` - Matches services that are either enabled or disabled.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `enabled`
	// - `enabled-runtime`
	// - `static`
	// - `disabled`
	// +kubebuilder:validation:Optional
	StartupCondition *string `json:"startupCondition,omitempty" tf:"startup_condition,omitempty"`
}

type MetadataInitParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Item []ItemInitParameters `json:"item,omitempty" tf:"item,omitempty"`
}

type MetadataObservation struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Item []ItemObservation `json:"item,omitempty" tf:"item,omitempty"`
}

type MetadataParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Item []ItemParameters `json:"item" tf:"item,omitempty"`
}

type OsServicesInitParameters struct {

	// second measurement cycles before alerting is triggered
	// The number of **10-second measurement cycles** before alerting is triggered
	AlertActivationDuration *float64 `json:"alertActivationDuration,omitempty" tf:"alert_activation_duration,omitempty"`

	// (Boolean) Toggle the switch in order to enable or disable alerting for this policy
	// Toggle the switch in order to enable or disable alerting for this policy
	Alerting *bool `json:"alerting,omitempty" tf:"alerting,omitempty"`

	// (Block List, Max: 1) Detection rules (see below for nested schema)
	// Detection rules
	DetectionConditionsLinux []DetectionConditionsLinuxInitParameters `json:"detectionConditionsLinux,omitempty" tf:"detection_conditions_linux,omitempty"`

	// (Block List, Max: 1) Detection rules (see below for nested schema)
	// Detection rules
	DetectionConditionsWindows []DetectionConditionsWindowsInitParameters `json:"detectionConditionsWindows,omitempty" tf:"detection_conditions_windows,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// value properties to be attached to the triggered event. (see below for nested schema)
	// Set of additional key-value properties to be attached to the triggered event.
	Metadata []MetadataInitParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Boolean) Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics produce custom metrics. Refer to documentation for consumption examples. Each monitored service consumes one custom metric.
	// Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics produce custom metrics. Refer to [documentation](https://dt-url.net/vl03xzk) for consumption examples. Each monitored service consumes one custom metric.
	Monitoring *bool `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// (String) Rule name
	// Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
	// By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
	NotInstalledAlerting *bool `json:"notInstalledAlerting,omitempty" tf:"not_installed_alerting,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(failed)` – Matches services that are in failed state.
	//
	// Available logic operations:
	// - `$not($eq(active))` – Matches services with state different from active.
	// - `$or($eq(inactive),$eq(failed))` – Matches services that are either in inactive or failed state.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `reloading`
	// - `activating`
	// - `deactivating`
	// - `failed`
	// - `inactive`
	// - `active`
	StatusConditionLinux *string `json:"statusConditionLinux,omitempty" tf:"status_condition_linux,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(paused)` – Matches services that are in paused state.
	//
	// Available logic operations:
	// - `$not($eq(paused))` – Matches services that are in state different from paused.
	// - `$or($eq(paused),$eq(running))` – Matches services that are either in paused or running state.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `running`
	// - `stopped`
	// - `start_pending`
	// - `stop_pending`
	// - `continue_pending`
	// - `pause_pending`
	// - `paused`
	StatusConditionWindows *string `json:"statusConditionWindows,omitempty" tf:"status_condition_windows,omitempty"`

	// (String) Possible Values: LINUX, WINDOWS
	// Possible Values: `LINUX`, `WINDOWS`
	System *string `json:"system,omitempty" tf:"system,omitempty"`
}

type OsServicesObservation struct {

	// second measurement cycles before alerting is triggered
	// The number of **10-second measurement cycles** before alerting is triggered
	AlertActivationDuration *float64 `json:"alertActivationDuration,omitempty" tf:"alert_activation_duration,omitempty"`

	// (Boolean) Toggle the switch in order to enable or disable alerting for this policy
	// Toggle the switch in order to enable or disable alerting for this policy
	Alerting *bool `json:"alerting,omitempty" tf:"alerting,omitempty"`

	// (Block List, Max: 1) Detection rules (see below for nested schema)
	// Detection rules
	DetectionConditionsLinux []DetectionConditionsLinuxObservation `json:"detectionConditionsLinux,omitempty" tf:"detection_conditions_linux,omitempty"`

	// (Block List, Max: 1) Detection rules (see below for nested schema)
	// Detection rules
	DetectionConditionsWindows []DetectionConditionsWindowsObservation `json:"detectionConditionsWindows,omitempty" tf:"detection_conditions_windows,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// value properties to be attached to the triggered event. (see below for nested schema)
	// Set of additional key-value properties to be attached to the triggered event.
	Metadata []MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Boolean) Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics produce custom metrics. Refer to documentation for consumption examples. Each monitored service consumes one custom metric.
	// Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics produce custom metrics. Refer to [documentation](https://dt-url.net/vl03xzk) for consumption examples. Each monitored service consumes one custom metric.
	Monitoring *bool `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// (String) Rule name
	// Rule name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
	// By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
	NotInstalledAlerting *bool `json:"notInstalledAlerting,omitempty" tf:"not_installed_alerting,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(failed)` – Matches services that are in failed state.
	//
	// Available logic operations:
	// - `$not($eq(active))` – Matches services with state different from active.
	// - `$or($eq(inactive),$eq(failed))` – Matches services that are either in inactive or failed state.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `reloading`
	// - `activating`
	// - `deactivating`
	// - `failed`
	// - `inactive`
	// - `active`
	StatusConditionLinux *string `json:"statusConditionLinux,omitempty" tf:"status_condition_linux,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(paused)` – Matches services that are in paused state.
	//
	// Available logic operations:
	// - `$not($eq(paused))` – Matches services that are in state different from paused.
	// - `$or($eq(paused),$eq(running))` – Matches services that are either in paused or running state.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `running`
	// - `stopped`
	// - `start_pending`
	// - `stop_pending`
	// - `continue_pending`
	// - `pause_pending`
	// - `paused`
	StatusConditionWindows *string `json:"statusConditionWindows,omitempty" tf:"status_condition_windows,omitempty"`

	// (String) Possible Values: LINUX, WINDOWS
	// Possible Values: `LINUX`, `WINDOWS`
	System *string `json:"system,omitempty" tf:"system,omitempty"`
}

type OsServicesParameters struct {

	// second measurement cycles before alerting is triggered
	// The number of **10-second measurement cycles** before alerting is triggered
	// +kubebuilder:validation:Optional
	AlertActivationDuration *float64 `json:"alertActivationDuration,omitempty" tf:"alert_activation_duration,omitempty"`

	// (Boolean) Toggle the switch in order to enable or disable alerting for this policy
	// Toggle the switch in order to enable or disable alerting for this policy
	// +kubebuilder:validation:Optional
	Alerting *bool `json:"alerting,omitempty" tf:"alerting,omitempty"`

	// (Block List, Max: 1) Detection rules (see below for nested schema)
	// Detection rules
	// +kubebuilder:validation:Optional
	DetectionConditionsLinux []DetectionConditionsLinuxParameters `json:"detectionConditionsLinux,omitempty" tf:"detection_conditions_linux,omitempty"`

	// (Block List, Max: 1) Detection rules (see below for nested schema)
	// Detection rules
	// +kubebuilder:validation:Optional
	DetectionConditionsWindows []DetectionConditionsWindowsParameters `json:"detectionConditionsWindows,omitempty" tf:"detection_conditions_windows,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// +kubebuilder:validation:Optional
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// value properties to be attached to the triggered event. (see below for nested schema)
	// Set of additional key-value properties to be attached to the triggered event.
	// +kubebuilder:validation:Optional
	Metadata []MetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Boolean) Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics produce custom metrics. Refer to documentation for consumption examples. Each monitored service consumes one custom metric.
	// Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics produce custom metrics. Refer to [documentation](https://dt-url.net/vl03xzk) for consumption examples. Each monitored service consumes one custom metric.
	// +kubebuilder:validation:Optional
	Monitoring *bool `json:"monitoring,omitempty" tf:"monitoring,omitempty"`

	// (String) Rule name
	// Rule name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
	// By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this feature
	// +kubebuilder:validation:Optional
	NotInstalledAlerting *bool `json:"notInstalledAlerting,omitempty" tf:"not_installed_alerting,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(failed)` – Matches services that are in failed state.
	//
	// Available logic operations:
	// - `$not($eq(active))` – Matches services with state different from active.
	// - `$or($eq(inactive),$eq(failed))` – Matches services that are either in inactive or failed state.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `reloading`
	// - `activating`
	// - `deactivating`
	// - `failed`
	// - `inactive`
	// - `active`
	// +kubebuilder:validation:Optional
	StatusConditionLinux *string `json:"statusConditionLinux,omitempty" tf:"status_condition_linux,omitempty"`

	// (String) This string has to match a required format. See OS services monitoring.
	// This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
	//
	// - `$eq(paused)` – Matches services that are in paused state.
	//
	// Available logic operations:
	// - `$not($eq(paused))` – Matches services that are in state different from paused.
	// - `$or($eq(paused),$eq(running))` – Matches services that are either in paused or running state.
	//
	// Use one of the following values as a parameter for this condition:
	//
	// - `running`
	// - `stopped`
	// - `start_pending`
	// - `stop_pending`
	// - `continue_pending`
	// - `pause_pending`
	// - `paused`
	// +kubebuilder:validation:Optional
	StatusConditionWindows *string `json:"statusConditionWindows,omitempty" tf:"status_condition_windows,omitempty"`

	// (String) Possible Values: LINUX, WINDOWS
	// Possible Values: `LINUX`, `WINDOWS`
	// +kubebuilder:validation:Optional
	System *string `json:"system,omitempty" tf:"system,omitempty"`
}

// OsServicesSpec defines the desired state of OsServices
type OsServicesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OsServicesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OsServicesInitParameters `json:"initProvider,omitempty"`
}

// OsServicesStatus defines the observed state of OsServices.
type OsServicesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OsServicesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OsServices is the Schema for the OsServicess API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type OsServices struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.alerting) || (has(self.initProvider) && has(self.initProvider.alerting))",message="spec.forProvider.alerting is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.monitoring) || (has(self.initProvider) && has(self.initProvider.monitoring))",message="spec.forProvider.monitoring is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.system) || (has(self.initProvider) && has(self.initProvider.system))",message="spec.forProvider.system is a required parameter"
	Spec   OsServicesSpec   `json:"spec"`
	Status OsServicesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OsServicesList contains a list of OsServicess
type OsServicesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OsServices `json:"items"`
}

// Repository type metadata.
var (
	OsServices_Kind             = "OsServices"
	OsServices_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OsServices_Kind}.String()
	OsServices_KindAPIVersion   = OsServices_Kind + "." + CRDGroupVersion.String()
	OsServices_GroupVersionKind = CRDGroupVersion.WithKind(OsServices_Kind)
)

func init() {
	SchemeBuilder.Register(&OsServices{}, &OsServicesList{})
}
