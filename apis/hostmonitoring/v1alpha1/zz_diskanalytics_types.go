// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskAnalyticsInitParameters struct {

	// (Boolean) The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and Davis data units.
	// The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation).
	//
	// After you have installed the Disk Analytics extension, you can enable the Data Collection in host or host-group level settings. If you enable the Data Collection without adding the extension the data is only visible in the data explorer.
	//
	// For details, see [Disk Analytics extension documentation](https://dt-url.net/3a03v9v).
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP)
	// The scope of this setting (HOST, HOST_GROUP)
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type DiskAnalyticsObservation struct {

	// (Boolean) The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and Davis data units.
	// The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation).
	//
	// After you have installed the Disk Analytics extension, you can enable the Data Collection in host or host-group level settings. If you enable the Data Collection without adding the extension the data is only visible in the data explorer.
	//
	// For details, see [Disk Analytics extension documentation](https://dt-url.net/3a03v9v).
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP)
	// The scope of this setting (HOST, HOST_GROUP)
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type DiskAnalyticsParameters struct {

	// (Boolean) The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and Davis data units.
	// The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes custom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation).
	//
	// After you have installed the Disk Analytics extension, you can enable the Data Collection in host or host-group level settings. If you enable the Data Collection without adding the extension the data is only visible in the data explorer.
	//
	// For details, see [Disk Analytics extension documentation](https://dt-url.net/3a03v9v).
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP)
	// The scope of this setting (HOST, HOST_GROUP)
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

// DiskAnalyticsSpec defines the desired state of DiskAnalytics
type DiskAnalyticsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiskAnalyticsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DiskAnalyticsInitParameters `json:"initProvider,omitempty"`
}

// DiskAnalyticsStatus defines the observed state of DiskAnalytics.
type DiskAnalyticsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiskAnalyticsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DiskAnalytics is the Schema for the DiskAnalyticss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type DiskAnalytics struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) && has(self.initProvider.scope))",message="spec.forProvider.scope is a required parameter"
	Spec   DiskAnalyticsSpec   `json:"spec"`
	Status DiskAnalyticsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiskAnalyticsList contains a list of DiskAnalyticss
type DiskAnalyticsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiskAnalytics `json:"items"`
}

// Repository type metadata.
var (
	DiskAnalytics_Kind             = "DiskAnalytics"
	DiskAnalytics_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DiskAnalytics_Kind}.String()
	DiskAnalytics_KindAPIVersion   = DiskAnalytics_Kind + "." + CRDGroupVersion.String()
	DiskAnalytics_GroupVersionKind = CRDGroupVersion.WithKind(DiskAnalytics_Kind)
)

func init() {
	SchemeBuilder.Register(&DiskAnalytics{}, &DiskAnalyticsList{})
}
