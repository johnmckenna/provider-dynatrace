// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutomationBusinessCalendarInitParameters struct {

	// (String) An optional description for the Business Calendar
	// An optional description for the Business Calendar
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List, Max: 1) A list of holidays valid in this calendar (see below for nested schema)
	// A list of holidays valid in this calendar
	Holidays []HolidaysInitParameters `json:"holidays,omitempty" tf:"holidays,omitempty"`

	// (String) The title / name of the Business Calendar
	// The title / name of the Business Calendar
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// 07-04 for July 4th 2023
	// The date from when on this calendar is valid from. Example: `2023-07-04` for July 4th 2023
	ValidFrom *string `json:"validFrom,omitempty" tf:"valid_from,omitempty"`

	// 07-04 for July 4th 2023
	// The date until when on this calendar is valid to. Example: `2023-07-04` for July 4th 2023
	ValidTo *string `json:"validTo,omitempty" tf:"valid_to,omitempty"`

	// (Set of Number) The days to be considered week days in this calendar. 1' = Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday, 7=Sunday`
	// The days to be considered week days in this calendar. `1' = `Monday`, `2` = `Tuesday`, `3` = `Wednesday`, `4` = `Thursday`, `5` = `Friday`, `6` = `Saturday`, `7` = `Sunday`
	// +listType=set
	WeekDays []*float64 `json:"weekDays,omitempty" tf:"week_days,omitempty"`

	// (Number) Specifies the day of the week that's considered to be the first day in the week. 1 for Monday, 7 for Sunday
	// Specifies the day of the week that's considered to be the first day in the week. `1` for Monday, `7` for Sunday
	WeekStart *float64 `json:"weekStart,omitempty" tf:"week_start,omitempty"`
}

type AutomationBusinessCalendarObservation struct {

	// (String) An optional description for the Business Calendar
	// An optional description for the Business Calendar
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List, Max: 1) A list of holidays valid in this calendar (see below for nested schema)
	// A list of holidays valid in this calendar
	Holidays []HolidaysObservation `json:"holidays,omitempty" tf:"holidays,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The title / name of the Business Calendar
	// The title / name of the Business Calendar
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// 07-04 for July 4th 2023
	// The date from when on this calendar is valid from. Example: `2023-07-04` for July 4th 2023
	ValidFrom *string `json:"validFrom,omitempty" tf:"valid_from,omitempty"`

	// 07-04 for July 4th 2023
	// The date until when on this calendar is valid to. Example: `2023-07-04` for July 4th 2023
	ValidTo *string `json:"validTo,omitempty" tf:"valid_to,omitempty"`

	// (Set of Number) The days to be considered week days in this calendar. 1' = Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday, 7=Sunday`
	// The days to be considered week days in this calendar. `1' = `Monday`, `2` = `Tuesday`, `3` = `Wednesday`, `4` = `Thursday`, `5` = `Friday`, `6` = `Saturday`, `7` = `Sunday`
	// +listType=set
	WeekDays []*float64 `json:"weekDays,omitempty" tf:"week_days,omitempty"`

	// (Number) Specifies the day of the week that's considered to be the first day in the week. 1 for Monday, 7 for Sunday
	// Specifies the day of the week that's considered to be the first day in the week. `1` for Monday, `7` for Sunday
	WeekStart *float64 `json:"weekStart,omitempty" tf:"week_start,omitempty"`
}

type AutomationBusinessCalendarParameters struct {

	// (String) An optional description for the Business Calendar
	// An optional description for the Business Calendar
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List, Max: 1) A list of holidays valid in this calendar (see below for nested schema)
	// A list of holidays valid in this calendar
	// +kubebuilder:validation:Optional
	Holidays []HolidaysParameters `json:"holidays,omitempty" tf:"holidays,omitempty"`

	// (String) The title / name of the Business Calendar
	// The title / name of the Business Calendar
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// 07-04 for July 4th 2023
	// The date from when on this calendar is valid from. Example: `2023-07-04` for July 4th 2023
	// +kubebuilder:validation:Optional
	ValidFrom *string `json:"validFrom,omitempty" tf:"valid_from,omitempty"`

	// 07-04 for July 4th 2023
	// The date until when on this calendar is valid to. Example: `2023-07-04` for July 4th 2023
	// +kubebuilder:validation:Optional
	ValidTo *string `json:"validTo,omitempty" tf:"valid_to,omitempty"`

	// (Set of Number) The days to be considered week days in this calendar. 1' = Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday, 7=Sunday`
	// The days to be considered week days in this calendar. `1' = `Monday`, `2` = `Tuesday`, `3` = `Wednesday`, `4` = `Thursday`, `5` = `Friday`, `6` = `Saturday`, `7` = `Sunday`
	// +kubebuilder:validation:Optional
	// +listType=set
	WeekDays []*float64 `json:"weekDays,omitempty" tf:"week_days,omitempty"`

	// (Number) Specifies the day of the week that's considered to be the first day in the week. 1 for Monday, 7 for Sunday
	// Specifies the day of the week that's considered to be the first day in the week. `1` for Monday, `7` for Sunday
	// +kubebuilder:validation:Optional
	WeekStart *float64 `json:"weekStart,omitempty" tf:"week_start,omitempty"`
}

type HolidayInitParameters struct {

	// 07-04 for July 4th 2017
	// The date of this holiday: Example `2017-07-04` for July 4th 2017
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// (String) The title / name of the Business Calendar
	// An official name for this holiday
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type HolidayObservation struct {

	// 07-04 for July 4th 2017
	// The date of this holiday: Example `2017-07-04` for July 4th 2017
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// (String) The title / name of the Business Calendar
	// An official name for this holiday
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type HolidayParameters struct {

	// 07-04 for July 4th 2017
	// The date of this holiday: Example `2017-07-04` for July 4th 2017
	// +kubebuilder:validation:Optional
	Date *string `json:"date" tf:"date,omitempty"`

	// (String) The title / name of the Business Calendar
	// An official name for this holiday
	// +kubebuilder:validation:Optional
	Title *string `json:"title" tf:"title,omitempty"`
}

type HolidaysInitParameters struct {

	// (Block Set, Min: 1) A (unordered) list of holidays valid in this calendar (see below for nested schema)
	// A (unordered) list of holidays valid in this calendar
	Holiday []HolidayInitParameters `json:"holiday,omitempty" tf:"holiday,omitempty"`
}

type HolidaysObservation struct {

	// (Block Set, Min: 1) A (unordered) list of holidays valid in this calendar (see below for nested schema)
	// A (unordered) list of holidays valid in this calendar
	Holiday []HolidayObservation `json:"holiday,omitempty" tf:"holiday,omitempty"`
}

type HolidaysParameters struct {

	// (Block Set, Min: 1) A (unordered) list of holidays valid in this calendar (see below for nested schema)
	// A (unordered) list of holidays valid in this calendar
	// +kubebuilder:validation:Optional
	Holiday []HolidayParameters `json:"holiday" tf:"holiday,omitempty"`
}

// AutomationBusinessCalendarSpec defines the desired state of AutomationBusinessCalendar
type AutomationBusinessCalendarSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AutomationBusinessCalendarParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AutomationBusinessCalendarInitParameters `json:"initProvider,omitempty"`
}

// AutomationBusinessCalendarStatus defines the observed state of AutomationBusinessCalendar.
type AutomationBusinessCalendarStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AutomationBusinessCalendarObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AutomationBusinessCalendar is the Schema for the AutomationBusinessCalendars API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type AutomationBusinessCalendar struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) && has(self.initProvider.title))",message="spec.forProvider.title is a required parameter"
	Spec   AutomationBusinessCalendarSpec   `json:"spec"`
	Status AutomationBusinessCalendarStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationBusinessCalendarList contains a list of AutomationBusinessCalendars
type AutomationBusinessCalendarList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationBusinessCalendar `json:"items"`
}

// Repository type metadata.
var (
	AutomationBusinessCalendar_Kind             = "AutomationBusinessCalendar"
	AutomationBusinessCalendar_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AutomationBusinessCalendar_Kind}.String()
	AutomationBusinessCalendar_KindAPIVersion   = AutomationBusinessCalendar_Kind + "." + CRDGroupVersion.String()
	AutomationBusinessCalendar_GroupVersionKind = CRDGroupVersion.WithKind(AutomationBusinessCalendar_Kind)
)

func init() {
	SchemeBuilder.Register(&AutomationBusinessCalendar{}, &AutomationBusinessCalendarList{})
}
