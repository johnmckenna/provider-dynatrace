// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ObjectiveInitParameters struct {

	// (Boolean) Enable auto adaptive threshold
	// Enable auto adaptive threshold
	AutoAdaptiveThresholdEnabled *bool `json:"autoAdaptiveThresholdEnabled,omitempty" tf:"auto_adaptive_threshold_enabled,omitempty"`

	// (String) Possible Values: GREATER_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL
	// Possible Values: `GREATER_THAN_OR_EQUAL`, `LESS_THAN_OR_EQUAL`
	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	// (String) Description
	// no documentation available
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) DQL query
	// DQL query
	DqlQuery *string `json:"dqlQuery,omitempty" tf:"dql_query,omitempty"`

	// (String) Name
	// Objective name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible Values: DQL, REFERENCE_SLO
	// Possible Values: `DQL`, `REFERENCE_SLO`
	ObjectiveType *string `json:"objectiveType,omitempty" tf:"objective_type,omitempty"`

	// (String) Please enter the metric key of your desired SLO. SLO metric keys have to start with 'func:slo.'
	// Please enter the metric key of your desired SLO. SLO metric keys have to start with 'func:slo.'
	ReferenceSLO *string `json:"referenceSlo,omitempty" tf:"reference_slo,omitempty"`

	// (Number) no documentation available
	// no documentation available
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// (Number) no documentation available
	// no documentation available
	Warning *float64 `json:"warning,omitempty" tf:"warning,omitempty"`
}

type ObjectiveObservation struct {

	// (Boolean) Enable auto adaptive threshold
	// Enable auto adaptive threshold
	AutoAdaptiveThresholdEnabled *bool `json:"autoAdaptiveThresholdEnabled,omitempty" tf:"auto_adaptive_threshold_enabled,omitempty"`

	// (String) Possible Values: GREATER_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL
	// Possible Values: `GREATER_THAN_OR_EQUAL`, `LESS_THAN_OR_EQUAL`
	ComparisonOperator *string `json:"comparisonOperator,omitempty" tf:"comparison_operator,omitempty"`

	// (String) Description
	// no documentation available
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) DQL query
	// DQL query
	DqlQuery *string `json:"dqlQuery,omitempty" tf:"dql_query,omitempty"`

	// (String) Name
	// Objective name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible Values: DQL, REFERENCE_SLO
	// Possible Values: `DQL`, `REFERENCE_SLO`
	ObjectiveType *string `json:"objectiveType,omitempty" tf:"objective_type,omitempty"`

	// (String) Please enter the metric key of your desired SLO. SLO metric keys have to start with 'func:slo.'
	// Please enter the metric key of your desired SLO. SLO metric keys have to start with 'func:slo.'
	ReferenceSLO *string `json:"referenceSlo,omitempty" tf:"reference_slo,omitempty"`

	// (Number) no documentation available
	// no documentation available
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// (Number) no documentation available
	// no documentation available
	Warning *float64 `json:"warning,omitempty" tf:"warning,omitempty"`
}

type ObjectiveParameters struct {

	// (Boolean) Enable auto adaptive threshold
	// Enable auto adaptive threshold
	// +kubebuilder:validation:Optional
	AutoAdaptiveThresholdEnabled *bool `json:"autoAdaptiveThresholdEnabled,omitempty" tf:"auto_adaptive_threshold_enabled,omitempty"`

	// (String) Possible Values: GREATER_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL
	// Possible Values: `GREATER_THAN_OR_EQUAL`, `LESS_THAN_OR_EQUAL`
	// +kubebuilder:validation:Optional
	ComparisonOperator *string `json:"comparisonOperator" tf:"comparison_operator,omitempty"`

	// (String) Description
	// no documentation available
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) DQL query
	// DQL query
	// +kubebuilder:validation:Optional
	DqlQuery *string `json:"dqlQuery,omitempty" tf:"dql_query,omitempty"`

	// (String) Name
	// Objective name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Possible Values: DQL, REFERENCE_SLO
	// Possible Values: `DQL`, `REFERENCE_SLO`
	// +kubebuilder:validation:Optional
	ObjectiveType *string `json:"objectiveType" tf:"objective_type,omitempty"`

	// (String) Please enter the metric key of your desired SLO. SLO metric keys have to start with 'func:slo.'
	// Please enter the metric key of your desired SLO. SLO metric keys have to start with 'func:slo.'
	// +kubebuilder:validation:Optional
	ReferenceSLO *string `json:"referenceSlo,omitempty" tf:"reference_slo,omitempty"`

	// (Number) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// (Number) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Warning *float64 `json:"warning,omitempty" tf:"warning,omitempty"`
}

type ObjectivesInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	Objective []ObjectiveInitParameters `json:"objective,omitempty" tf:"objective,omitempty"`
}

type ObjectivesObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	Objective []ObjectiveObservation `json:"objective,omitempty" tf:"objective,omitempty"`
}

type ObjectivesParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Objective []ObjectiveParameters `json:"objective" tf:"objective,omitempty"`
}

type SiteReliabilityGuardianInitParameters struct {

	// (String) Description
	// Description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name
	// Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) Objectives (see below for nested schema)
	// Objectives
	Objectives []ObjectivesInitParameters `json:"objectives,omitempty" tf:"objectives,omitempty"`

	// (Set of String) Define key/value pairs that further describe this guardian.
	// Define key/value pairs that further describe this guardian.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List, Max: 1) Define variables for dynamically defining DQL queries (see below for nested schema)
	// Define variables for dynamically defining DQL queries
	Variables []VariablesInitParameters `json:"variables,omitempty" tf:"variables,omitempty"`
}

type SiteReliabilityGuardianObservation struct {

	// (String) Description
	// Description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name
	// Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) Objectives (see below for nested schema)
	// Objectives
	Objectives []ObjectivesObservation `json:"objectives,omitempty" tf:"objectives,omitempty"`

	// (Set of String) Define key/value pairs that further describe this guardian.
	// Define key/value pairs that further describe this guardian.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List, Max: 1) Define variables for dynamically defining DQL queries (see below for nested schema)
	// Define variables for dynamically defining DQL queries
	Variables []VariablesObservation `json:"variables,omitempty" tf:"variables,omitempty"`
}

type SiteReliabilityGuardianParameters struct {

	// (String) Description
	// Description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Name
	// Name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Min: 1, Max: 1) Objectives (see below for nested schema)
	// Objectives
	// +kubebuilder:validation:Optional
	Objectives []ObjectivesParameters `json:"objectives,omitempty" tf:"objectives,omitempty"`

	// (Set of String) Define key/value pairs that further describe this guardian.
	// Define key/value pairs that further describe this guardian.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List, Max: 1) Define variables for dynamically defining DQL queries (see below for nested schema)
	// Define variables for dynamically defining DQL queries
	// +kubebuilder:validation:Optional
	Variables []VariablesParameters `json:"variables,omitempty" tf:"variables,omitempty"`
}

type VariableInitParameters struct {

	// (String) Value
	// Value
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// (String) Name
	// no documentation available
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VariableObservation struct {

	// (String) Value
	// Value
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// (String) Name
	// no documentation available
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VariableParameters struct {

	// (String) Value
	// Value
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// (String) Name
	// no documentation available
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type VariablesInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	Variable []VariableInitParameters `json:"variable,omitempty" tf:"variable,omitempty"`
}

type VariablesObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	Variable []VariableObservation `json:"variable,omitempty" tf:"variable,omitempty"`
}

type VariablesParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Variable []VariableParameters `json:"variable" tf:"variable,omitempty"`
}

// SiteReliabilityGuardianSpec defines the desired state of SiteReliabilityGuardian
type SiteReliabilityGuardianSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SiteReliabilityGuardianParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SiteReliabilityGuardianInitParameters `json:"initProvider,omitempty"`
}

// SiteReliabilityGuardianStatus defines the observed state of SiteReliabilityGuardian.
type SiteReliabilityGuardianStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SiteReliabilityGuardianObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SiteReliabilityGuardian is the Schema for the SiteReliabilityGuardians API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type SiteReliabilityGuardian struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.objectives) || (has(self.initProvider) && has(self.initProvider.objectives))",message="spec.forProvider.objectives is a required parameter"
	Spec   SiteReliabilityGuardianSpec   `json:"spec"`
	Status SiteReliabilityGuardianStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SiteReliabilityGuardianList contains a list of SiteReliabilityGuardians
type SiteReliabilityGuardianList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SiteReliabilityGuardian `json:"items"`
}

// Repository type metadata.
var (
	SiteReliabilityGuardian_Kind             = "SiteReliabilityGuardian"
	SiteReliabilityGuardian_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SiteReliabilityGuardian_Kind}.String()
	SiteReliabilityGuardian_KindAPIVersion   = SiteReliabilityGuardian_Kind + "." + CRDGroupVersion.String()
	SiteReliabilityGuardian_GroupVersionKind = CRDGroupVersion.WithKind(SiteReliabilityGuardian_Kind)
)

func init() {
	SchemeBuilder.Register(&SiteReliabilityGuardian{}, &SiteReliabilityGuardianList{})
}
