// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutomationWorkflowInitParameters struct {

	// (String) The user context the executions of the workflow will happen with
	// The user context the executions of the workflow will happen with
	Actor *string `json:"actor,omitempty" tf:"actor,omitempty"`

	// (String) An optional description for the workflow
	// An optional description for the workflow
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of the owner of this workflow
	// The ID of the owner of this workflow
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) Defines whether this workflow is private to the owner or not. Default is true
	// Defines whether this workflow is private to the owner or not. Default is `true`
	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	// (Block List, Min: 1, Max: 1) The tasks to run for every execution of this workflow (see below for nested schema)
	// The tasks to run for every execution of this workflow
	Tasks []TasksInitParameters `json:"tasks,omitempty" tf:"tasks,omitempty"`

	// (String) The title / name of the workflow
	// The title / name of the workflow
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (Block List, Max: 1) Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is getting manually triggered (see below for nested schema)
	// Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is getting manually triggered
	Trigger []TriggerInitParameters `json:"trigger,omitempty" tf:"trigger,omitempty"`
}

type AutomationWorkflowObservation struct {

	// (String) The user context the executions of the workflow will happen with
	// The user context the executions of the workflow will happen with
	Actor *string `json:"actor,omitempty" tf:"actor,omitempty"`

	// (String) An optional description for the workflow
	// An optional description for the workflow
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The ID of the owner of this workflow
	// The ID of the owner of this workflow
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) Defines whether this workflow is private to the owner or not. Default is true
	// Defines whether this workflow is private to the owner or not. Default is `true`
	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	// (Block List, Min: 1, Max: 1) The tasks to run for every execution of this workflow (see below for nested schema)
	// The tasks to run for every execution of this workflow
	Tasks []TasksObservation `json:"tasks,omitempty" tf:"tasks,omitempty"`

	// (String) The title / name of the workflow
	// The title / name of the workflow
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (Block List, Max: 1) Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is getting manually triggered (see below for nested schema)
	// Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is getting manually triggered
	Trigger []TriggerObservation `json:"trigger,omitempty" tf:"trigger,omitempty"`
}

type AutomationWorkflowParameters struct {

	// (String) The user context the executions of the workflow will happen with
	// The user context the executions of the workflow will happen with
	// +kubebuilder:validation:Optional
	Actor *string `json:"actor,omitempty" tf:"actor,omitempty"`

	// (String) An optional description for the workflow
	// An optional description for the workflow
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of the owner of this workflow
	// The ID of the owner of this workflow
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) Defines whether this workflow is private to the owner or not. Default is true
	// Defines whether this workflow is private to the owner or not. Default is `true`
	// +kubebuilder:validation:Optional
	Private *bool `json:"private,omitempty" tf:"private,omitempty"`

	// (Block List, Min: 1, Max: 1) The tasks to run for every execution of this workflow (see below for nested schema)
	// The tasks to run for every execution of this workflow
	// +kubebuilder:validation:Optional
	Tasks []TasksParameters `json:"tasks,omitempty" tf:"tasks,omitempty"`

	// (String) The title / name of the workflow
	// The title / name of the workflow
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (Block List, Max: 1) Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is getting manually triggered (see below for nested schema)
	// Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is getting manually triggered
	// +kubebuilder:validation:Optional
	Trigger []TriggerParameters `json:"trigger,omitempty" tf:"trigger,omitempty"`
}

type CategoriesInitParameters struct {

	// (Boolean)
	Availability *bool `json:"availability,omitempty" tf:"availability,omitempty"`

	// (String) A custom condition that needs to be met for the current task to get executed
	Custom *bool `json:"custom,omitempty" tf:"custom,omitempty"`

	// (Boolean)
	Error *bool `json:"error,omitempty" tf:"error,omitempty"`

	// (Boolean)
	Info *bool `json:"info,omitempty" tf:"info,omitempty"`

	// (Boolean)
	MonitoringUnavailable *bool `json:"monitoringUnavailable,omitempty" tf:"monitoring_unavailable,omitempty"`

	// (Boolean)
	Resource *bool `json:"resource,omitempty" tf:"resource,omitempty"`

	// (Boolean)
	Slowdown *bool `json:"slowdown,omitempty" tf:"slowdown,omitempty"`
}

type CategoriesObservation struct {

	// (Boolean)
	Availability *bool `json:"availability,omitempty" tf:"availability,omitempty"`

	// (String) A custom condition that needs to be met for the current task to get executed
	Custom *bool `json:"custom,omitempty" tf:"custom,omitempty"`

	// (Boolean)
	Error *bool `json:"error,omitempty" tf:"error,omitempty"`

	// (Boolean)
	Info *bool `json:"info,omitempty" tf:"info,omitempty"`

	// (Boolean)
	MonitoringUnavailable *bool `json:"monitoringUnavailable,omitempty" tf:"monitoring_unavailable,omitempty"`

	// (Boolean)
	Resource *bool `json:"resource,omitempty" tf:"resource,omitempty"`

	// (Boolean)
	Slowdown *bool `json:"slowdown,omitempty" tf:"slowdown,omitempty"`
}

type CategoriesParameters struct {

	// (Boolean)
	// +kubebuilder:validation:Optional
	Availability *bool `json:"availability,omitempty" tf:"availability,omitempty"`

	// (String) A custom condition that needs to be met for the current task to get executed
	// +kubebuilder:validation:Optional
	Custom *bool `json:"custom,omitempty" tf:"custom,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	Error *bool `json:"error,omitempty" tf:"error,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	Info *bool `json:"info,omitempty" tf:"info,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	MonitoringUnavailable *bool `json:"monitoringUnavailable,omitempty" tf:"monitoring_unavailable,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	Resource *bool `json:"resource,omitempty" tf:"resource,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	Slowdown *bool `json:"slowdown,omitempty" tf:"slowdown,omitempty"`
}

type ConditionsInitParameters struct {

	// (String) A custom condition that needs to be met for the current task to get executed
	// A custom condition that needs to be met for the current task to get executed
	Custom *string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (String) Possible values are SKIP and STOP
	// Possible values are `SKIP` and `STOP`
	Else *string `json:"else,omitempty" tf:"else,omitempty"`

	// (Map of String) key/value pairs where the key is the name of another task and the value the status it needs to be for the current task to get executed. Possible values are SUCCESS, ERROR, ANY, OK (Success or Skipped) and NOK (Error or Cancelled)
	// key/value pairs where the `key` is the name of another task and the value the status it needs to be for the current task to get executed. Possible values are `SUCCESS`, `ERROR`, `ANY`, `OK` (Success or Skipped) and `NOK` (Error or Cancelled)
	// +mapType=granular
	States map[string]*string `json:"states,omitempty" tf:"states,omitempty"`
}

type ConditionsObservation struct {

	// (String) A custom condition that needs to be met for the current task to get executed
	// A custom condition that needs to be met for the current task to get executed
	Custom *string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (String) Possible values are SKIP and STOP
	// Possible values are `SKIP` and `STOP`
	Else *string `json:"else,omitempty" tf:"else,omitempty"`

	// (Map of String) key/value pairs where the key is the name of another task and the value the status it needs to be for the current task to get executed. Possible values are SUCCESS, ERROR, ANY, OK (Success or Skipped) and NOK (Error or Cancelled)
	// key/value pairs where the `key` is the name of another task and the value the status it needs to be for the current task to get executed. Possible values are `SUCCESS`, `ERROR`, `ANY`, `OK` (Success or Skipped) and `NOK` (Error or Cancelled)
	// +mapType=granular
	States map[string]*string `json:"states,omitempty" tf:"states,omitempty"`
}

type ConditionsParameters struct {

	// (String) A custom condition that needs to be met for the current task to get executed
	// A custom condition that needs to be met for the current task to get executed
	// +kubebuilder:validation:Optional
	Custom *string `json:"custom,omitempty" tf:"custom,omitempty"`

	// (String) Possible values are SKIP and STOP
	// Possible values are `SKIP` and `STOP`
	// +kubebuilder:validation:Optional
	Else *string `json:"else,omitempty" tf:"else,omitempty"`

	// (Map of String) key/value pairs where the key is the name of another task and the value the status it needs to be for the current task to get executed. Possible values are SUCCESS, ERROR, ANY, OK (Success or Skipped) and NOK (Error or Cancelled)
	// key/value pairs where the `key` is the name of another task and the value the status it needs to be for the current task to get executed. Possible values are `SUCCESS`, `ERROR`, `ANY`, `OK` (Success or Skipped) and `NOK` (Error or Cancelled)
	// +kubebuilder:validation:Optional
	// +mapType=granular
	States map[string]*string `json:"states" tf:"states,omitempty"`
}

type ConfigEventInitParameters struct {

	// (String) Possible values: events or bizevents. Default: events
	// Possible values: `events` or `bizevents`. Default: `events`
	EventType *string `json:"eventType,omitempty" tf:"event_type,omitempty"`

	// (String) A query based on DQL for events that trigger executions
	// A query based on DQL for events that trigger executions
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type ConfigEventObservation struct {

	// (String) Possible values: events or bizevents. Default: events
	// Possible values: `events` or `bizevents`. Default: `events`
	EventType *string `json:"eventType,omitempty" tf:"event_type,omitempty"`

	// (String) A query based on DQL for events that trigger executions
	// A query based on DQL for events that trigger executions
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type ConfigEventParameters struct {

	// (String) Possible values: events or bizevents. Default: events
	// Possible values: `events` or `bizevents`. Default: `events`
	// +kubebuilder:validation:Optional
	EventType *string `json:"eventType,omitempty" tf:"event_type,omitempty"`

	// (String) A query based on DQL for events that trigger executions
	// A query based on DQL for events that trigger executions
	// +kubebuilder:validation:Optional
	Query *string `json:"query" tf:"query,omitempty"`
}

type ConfigInitParameters struct {

	// (Block List, Max: 1) Contains trigger configuration based on Davis Events. Either davis_event, davis_problem, davis_event or config need to set (see below for nested schema)
	// Contains trigger configuration based on Davis Events. Either `davis_event`, `davis_problem`, `davis_event` or `config` need to set
	DavisEvent []DavisEventInitParameters `json:"davisEvent,omitempty" tf:"davis_event,omitempty"`

	// (Block List, Max: 1) Contains trigger configuration based on Davis Problems. Either davis_event, davis_problem, davis_event or config need to set (see below for nested schema)
	// Contains trigger configuration based on Davis Problems. Either `davis_event`, `davis_problem`, `davis_event` or `config` need to set
	DavisProblem []DavisProblemInitParameters `json:"davisProblem,omitempty" tf:"davis_problem,omitempty"`

	// (Block List, Max: 1) If specified the workflow is getting triggered based on events (see below for nested schema)
	// Contains trigger configuration based on Davis Problems. Either `davis_event`, `davis_problem`, `davis_event` or `config` need to set
	Event []ConfigEventInitParameters `json:"event,omitempty" tf:"event,omitempty"`

	// (String) The type of the trigger configuration to expect within attribute value. Only required if config is set. Must not be set if davis_event, davis_problem or event are present
	// The type of the trigger configuration to expect within attribute `value`. Only required if `config` is set. Must not be set if `davis_event`, `davis_problem` or `event` are present
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Contains JSON encoded trigger configuration if the trigger type is neither davis_event, davis_problem or event. It requires the attribute type to be set in combination
	// Contains JSON encoded trigger configuration if the trigger type is neither `davis_event`, `davis_problem` or `event`. It requires the attribute `type` to be set in combination
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigObservation struct {

	// (Block List, Max: 1) Contains trigger configuration based on Davis Events. Either davis_event, davis_problem, davis_event or config need to set (see below for nested schema)
	// Contains trigger configuration based on Davis Events. Either `davis_event`, `davis_problem`, `davis_event` or `config` need to set
	DavisEvent []DavisEventObservation `json:"davisEvent,omitempty" tf:"davis_event,omitempty"`

	// (Block List, Max: 1) Contains trigger configuration based on Davis Problems. Either davis_event, davis_problem, davis_event or config need to set (see below for nested schema)
	// Contains trigger configuration based on Davis Problems. Either `davis_event`, `davis_problem`, `davis_event` or `config` need to set
	DavisProblem []DavisProblemObservation `json:"davisProblem,omitempty" tf:"davis_problem,omitempty"`

	// (Block List, Max: 1) If specified the workflow is getting triggered based on events (see below for nested schema)
	// Contains trigger configuration based on Davis Problems. Either `davis_event`, `davis_problem`, `davis_event` or `config` need to set
	Event []ConfigEventObservation `json:"event,omitempty" tf:"event,omitempty"`

	// (String) The type of the trigger configuration to expect within attribute value. Only required if config is set. Must not be set if davis_event, davis_problem or event are present
	// The type of the trigger configuration to expect within attribute `value`. Only required if `config` is set. Must not be set if `davis_event`, `davis_problem` or `event` are present
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Contains JSON encoded trigger configuration if the trigger type is neither davis_event, davis_problem or event. It requires the attribute type to be set in combination
	// Contains JSON encoded trigger configuration if the trigger type is neither `davis_event`, `davis_problem` or `event`. It requires the attribute `type` to be set in combination
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigParameters struct {

	// (Block List, Max: 1) Contains trigger configuration based on Davis Events. Either davis_event, davis_problem, davis_event or config need to set (see below for nested schema)
	// Contains trigger configuration based on Davis Events. Either `davis_event`, `davis_problem`, `davis_event` or `config` need to set
	// +kubebuilder:validation:Optional
	DavisEvent []DavisEventParameters `json:"davisEvent,omitempty" tf:"davis_event,omitempty"`

	// (Block List, Max: 1) Contains trigger configuration based on Davis Problems. Either davis_event, davis_problem, davis_event or config need to set (see below for nested schema)
	// Contains trigger configuration based on Davis Problems. Either `davis_event`, `davis_problem`, `davis_event` or `config` need to set
	// +kubebuilder:validation:Optional
	DavisProblem []DavisProblemParameters `json:"davisProblem,omitempty" tf:"davis_problem,omitempty"`

	// (Block List, Max: 1) If specified the workflow is getting triggered based on events (see below for nested schema)
	// Contains trigger configuration based on Davis Problems. Either `davis_event`, `davis_problem`, `davis_event` or `config` need to set
	// +kubebuilder:validation:Optional
	Event []ConfigEventParameters `json:"event,omitempty" tf:"event,omitempty"`

	// (String) The type of the trigger configuration to expect within attribute value. Only required if config is set. Must not be set if davis_event, davis_problem or event are present
	// The type of the trigger configuration to expect within attribute `value`. Only required if `config` is set. Must not be set if `davis_event`, `davis_problem` or `event` are present
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) Contains JSON encoded trigger configuration if the trigger type is neither davis_event, davis_problem or event. It requires the attribute type to be set in combination
	// Contains JSON encoded trigger configuration if the trigger type is neither `davis_event`, `davis_problem` or `event`. It requires the attribute `type` to be set in combination
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DavisEventInitParameters struct {

	// (Map of String) key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// +mapType=granular
	EntityTags map[string]*string `json:"entityTags,omitempty" tf:"entity_tags,omitempty"`

	// (String) Specifies whether all or just any of the configured entity tags need to match. Possible values: all and any. Omit this attribute if all entities should match
	// Specifies whether all or just any of the configured entity tags need to match. Possible values: `all` and `any`. Omit this attribute if all entities should match
	EntityTagsMatch *string `json:"entityTagsMatch,omitempty" tf:"entity_tags_match,omitempty"`

	// (Boolean) If set to true closing a problem also is considered an event that triggers the execution
	// If set to `true` closing a problem also is considered an event that triggers the execution
	OnProblemClose *bool `json:"onProblemClose,omitempty" tf:"on_problem_close,omitempty"`

	// (Set of String) The types of davis events to trigger an execution. Possible values are CUSTOM_ANNOTATION, APPLICATION_UNEXPECTED_HIGH_LOAD, APPLICATION_UNEXPECTED_LOW_LOAD, APPLICATION_OVERLOAD_PREVENTION, APPLICATION_SLOWDOWN, AVAILABILITY_EVENT, LOG_AVAILABILITY, EC2_HIGH_CPU, RDS_BACKUP_COMPLETED, RDS_BACKUP_STARTED, SYNTHETIC_GLOBAL_OUTAGE, SYNTHETIC_LOCAL_OUTAGE, SYNTHETIC_TEST_LOCATION_SLOWDOWN, CUSTOM_CONFIGURATION, PROCESS_NA_HIGH_CONN_FAIL_RATE, OSI_HIGH_CPU, CUSTOM_ALERT, CUSTOM_APP_CRASH_RATE_INCREASED, CUSTOM_APPLICATION_ERROR_RATE_INCREASED, CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD, CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD, CUSTOM_APPLICATION_OVERLOAD_PREVENTION, CUSTOM_APPLICATION_SLOWDOWN, PGI_CUSTOM_AVAILABILITY, PGI_CUSTOM_ERROR, CUSTOM_INFO, PGI_CUSTOM_PERFORMANCE, CUSTOM_DEPLOYMENT, DEPLOYMENT_CHANGED_CHANGE, DEPLOYMENT_CHANGED_NEW, DEPLOYMENT_CHANGED_REMOVED, EBS_VOLUME_HIGH_LATENCY, ERROR_EVENT, LOG_ERROR, ESXI_HOST_CONNECTION_FAILED, ESXI_HOST_CONNECTION_LOST, ESXI_GUEST_CPU_LIMIT_REACHED, ESXI_GUEST_ACTIVE_SWAP_WAIT, ESXI_HOST_CPU_SATURATION, ESXI_HOST_MEMORY_SATURATION, ESXI_HOST_MAINTENANCE, ESXI_HOST_NETWORK_PROBLEMS, ESXI_HOST_NO_CONNECTION, ESXI_HOST_SHUTDOWN, ESXI_HOST_DISK_SLOW, ESXI_HOST_UP, ESXI_HOST_TIMEOUT, ESXI_VM_IMPACT_HOST_CPU_SATURATION, ESXI_VM_IMPACT_HOST_MEMORY_SATURATION, DATABASE_CONNECTION_FAILURE, RDS_AZ_FAILOVER_COMPLETED, RDS_AZ_FAILOVER_STARTED, SERVICE_ERROR_RATE_INCREASED, RDS_HIGH_LATENCY, OSI_NIC_UTILIZATION_HIGH, OSI_NIC_ERRORS_HIGH, PGI_HAPROXY_QUEUED_REQUESTS_HIGH, PGI_RMQ_HIGH_FILE_DESC_USAGE, PGI_RMQ_HIGH_MEM_USAGE, PGI_RMQ_HIGH_PROCESS_USAGE, PGI_RMQ_HIGH_SOCKETS_USAGE, OSI_NIC_DROPPED_PACKETS_HIGH, PGI_MYSQL_SLOW_QUERIES_RATE_HIGH, PGI_KEYSTONE_SLOW, PGI_HAPROXY_SESSION_USAGE_HIGH, HOST_LOG_AVAILABILITY, HOST_LOG_ERROR, OSI_GRACEFULLY_SHUTDOWN, HOST_LOG_MATCHED, OSI_UNEXPECTEDLY_UNAVAILABLE, HOST_LOG_PERFORMANCE, HOST_OF_SERVICE_UNAVAILABLE, HTTP_CHECK_GLOBAL_OUTAGE, HTTP_CHECK_LOCAL_OUTAGE, HTTP_CHECK_TEST_LOCATION_SLOWDOWN, ESXI_HOST_DISK_QUEUE_SLOW, LOG_MATCHED, APPLICATION_ERROR_RATE_INCREASED, APPLICATION_JS_FRAMEWORK_DETECTED, AWS_LAMBDA_HIGH_ERROR_RATE, ELB_HIGH_BACKEND_ERROR_RATE, ELB_HIGH_FRONTEND_ERROR_RATE, ELB_HIGH_UNHEALTHY_HOST_RATE, PROCESS_HIGH_GC_ACTIVITY, ESXI_HOST_DATASTORE_LOW_DISK_SPACE, OSI_DOCKER_DEVICEMAPPER_LOW_DATA_SPACE, OSI_LOW_DISK_SPACE, OSI_DOCKER_DEVICEMAPPER_LOW_METADATA_SPACE, OSI_DISK_LOW_INODES, PGI_RMQ_LOW_DISK_SPACE, RDS_LOW_STORAGE_SPACE, MARKED_FOR_TERMINATION, PROCESS_MEMORY_RESOURCE_EXHAUSTED, OSI_HIGH_MEMORY, MOBILE_APP_CRASH_RATE_INCREASED, MOBILE_APPLICATION_ERROR_RATE_INCREASED, MOBILE_APPLICATION_OVERLOAD_PREVENTION, MOBILE_APPLICATION_SLOWDOWN, MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD, MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD, MONITORING_UNAVAILABLE, PROCESS_NA_HIGH_LOSS_RATE, PGI_KEYSTONE_UNHEALTHY, ESXI_HOST_OVERLOADED_STORAGE, PERFORMANCE_EVENT, LOG_PERFORMANCE, PGI_LOG_AVAILABILITY, PGI_CRASHED_INFO, PROCESS_CRASHED, PGI_LOG_ERROR, PG_LOW_INSTANCE_COUNT, PGI_LOG_MATCHED, PGI_MEMDUMP, PGI_LOG_PERFORMANCE, PROCESS_RESTART, PGI_UNAVAILABLE, RDS_HIGH_CPU, RDS_LOW_MEMORY, RDS_OF_SERVICE_UNAVAILABLE, RESOURCE_CONTENTION_EVENT, SERVICE_SLOWDOWN, RDS_RESTART, RDS_RESTART_SEQUENCE, PGI_OF_SERVICE_UNAVAILABLE, OSI_SLOW_DISK, SYNTHETIC_NODE_OUTAGE, SYNTHETIC_PRIVATE_LOCATION_OUTAGE, EXTERNAL_SYNTHETIC_TEST_OUTAGE, EXTERNAL_SYNTHETIC_TEST_SLOWDOWN, PROCESS_THREADS_RESOURCE_EXHAUSTED, SERVICE_UNEXPECTED_HIGH_LOAD, SERVICE_UNEXPECTED_LOW_LOAD, ESXI_VM_DISCONNECTED, OPENSTACK_VM_LAUNCH_FAILED, ESXI_HOST_VM_MOTION_LEFT, ESXI_HOST_VM_MOTION_ARRIVED, ESXI_VM_MOTION, OPENSTACK_VM_MOTION, ESXI_VM_POWER_OFF, ESXI_VM_SHUTDOWN, OPENSTACK_HOST_VM_SHUTDOWN, ESXI_VM_START, ESXI_HOST_VM_STARTED, OPENSTACK_HOST_VM_STARTED
	// The types of davis events to trigger an execution. Possible values are `CUSTOM_ANNOTATION`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `APPLICATION_OVERLOAD_PREVENTION`, `APPLICATION_SLOWDOWN`, `AVAILABILITY_EVENT`, `LOG_AVAILABILITY`, `EC2_HIGH_CPU`, `RDS_BACKUP_COMPLETED`, `RDS_BACKUP_STARTED`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_TEST_LOCATION_SLOWDOWN`, `CUSTOM_CONFIGURATION`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `OSI_HIGH_CPU`, `CUSTOM_ALERT`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APPLICATION_OVERLOAD_PREVENTION`, `CUSTOM_APPLICATION_SLOWDOWN`, `PGI_CUSTOM_AVAILABILITY`, `PGI_CUSTOM_ERROR`, `CUSTOM_INFO`, `PGI_CUSTOM_PERFORMANCE`, `CUSTOM_DEPLOYMENT`, `DEPLOYMENT_CHANGED_CHANGE`, `DEPLOYMENT_CHANGED_NEW`, `DEPLOYMENT_CHANGED_REMOVED`, `EBS_VOLUME_HIGH_LATENCY`, `ERROR_EVENT`, `LOG_ERROR`, `ESXI_HOST_CONNECTION_FAILED`, `ESXI_HOST_CONNECTION_LOST`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_MAINTENANCE`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_NO_CONNECTION`, `ESXI_HOST_SHUTDOWN`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_UP`, `ESXI_HOST_TIMEOUT`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `DATABASE_CONNECTION_FAILURE`, `RDS_AZ_FAILOVER_COMPLETED`, `RDS_AZ_FAILOVER_STARTED`, `SERVICE_ERROR_RATE_INCREASED`, `RDS_HIGH_LATENCY`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_NIC_ERRORS_HIGH`, `PGI_HAPROXY_QUEUED_REQUESTS_HIGH`, `PGI_RMQ_HIGH_FILE_DESC_USAGE`, `PGI_RMQ_HIGH_MEM_USAGE`, `PGI_RMQ_HIGH_PROCESS_USAGE`, `PGI_RMQ_HIGH_SOCKETS_USAGE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `PGI_MYSQL_SLOW_QUERIES_RATE_HIGH`, `PGI_KEYSTONE_SLOW`, `PGI_HAPROXY_SESSION_USAGE_HIGH`, `HOST_LOG_AVAILABILITY`, `HOST_LOG_ERROR`, `OSI_GRACEFULLY_SHUTDOWN`, `HOST_LOG_MATCHED`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `HOST_LOG_PERFORMANCE`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `ESXI_HOST_DISK_QUEUE_SLOW`, `LOG_MATCHED`, `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_JS_FRAMEWORK_DETECTED`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ELB_HIGH_FRONTEND_ERROR_RATE`, `ELB_HIGH_UNHEALTHY_HOST_RATE`, `PROCESS_HIGH_GC_ACTIVITY`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `OSI_DOCKER_DEVICEMAPPER_LOW_DATA_SPACE`, `OSI_LOW_DISK_SPACE`, `OSI_DOCKER_DEVICEMAPPER_LOW_METADATA_SPACE`, `OSI_DISK_LOW_INODES`, `PGI_RMQ_LOW_DISK_SPACE`, `RDS_LOW_STORAGE_SPACE`, `MARKED_FOR_TERMINATION`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `OSI_HIGH_MEMORY`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_OVERLOAD_PREVENTION`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MONITORING_UNAVAILABLE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PGI_KEYSTONE_UNHEALTHY`, `ESXI_HOST_OVERLOADED_STORAGE`, `PERFORMANCE_EVENT`, `LOG_PERFORMANCE`, `PGI_LOG_AVAILABILITY`, `PGI_CRASHED_INFO`, `PROCESS_CRASHED`, `PGI_LOG_ERROR`, `PG_LOW_INSTANCE_COUNT`, `PGI_LOG_MATCHED`, `PGI_MEMDUMP`, `PGI_LOG_PERFORMANCE`, `PROCESS_RESTART`, `PGI_UNAVAILABLE`, `RDS_HIGH_CPU`, `RDS_LOW_MEMORY`, `RDS_OF_SERVICE_UNAVAILABLE`, `RESOURCE_CONTENTION_EVENT`, `SERVICE_SLOWDOWN`, `RDS_RESTART`, `RDS_RESTART_SEQUENCE`, `PGI_OF_SERVICE_UNAVAILABLE`, `OSI_SLOW_DISK`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `ESXI_VM_DISCONNECTED`, `OPENSTACK_VM_LAUNCH_FAILED`, `ESXI_HOST_VM_MOTION_LEFT`, `ESXI_HOST_VM_MOTION_ARRIVED`, `ESXI_VM_MOTION`, `OPENSTACK_VM_MOTION`, `ESXI_VM_POWER_OFF`, `ESXI_VM_SHUTDOWN`, `OPENSTACK_HOST_VM_SHUTDOWN`, `ESXI_VM_START`, `ESXI_HOST_VM_STARTED`, `OPENSTACK_HOST_VM_STARTED`
	// +listType=set
	Types []*string `json:"types,omitempty" tf:"types,omitempty"`
}

type DavisEventObservation struct {

	// (Map of String) key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// +mapType=granular
	EntityTags map[string]*string `json:"entityTags,omitempty" tf:"entity_tags,omitempty"`

	// (String) Specifies whether all or just any of the configured entity tags need to match. Possible values: all and any. Omit this attribute if all entities should match
	// Specifies whether all or just any of the configured entity tags need to match. Possible values: `all` and `any`. Omit this attribute if all entities should match
	EntityTagsMatch *string `json:"entityTagsMatch,omitempty" tf:"entity_tags_match,omitempty"`

	// (Boolean) If set to true closing a problem also is considered an event that triggers the execution
	// If set to `true` closing a problem also is considered an event that triggers the execution
	OnProblemClose *bool `json:"onProblemClose,omitempty" tf:"on_problem_close,omitempty"`

	// (Set of String) The types of davis events to trigger an execution. Possible values are CUSTOM_ANNOTATION, APPLICATION_UNEXPECTED_HIGH_LOAD, APPLICATION_UNEXPECTED_LOW_LOAD, APPLICATION_OVERLOAD_PREVENTION, APPLICATION_SLOWDOWN, AVAILABILITY_EVENT, LOG_AVAILABILITY, EC2_HIGH_CPU, RDS_BACKUP_COMPLETED, RDS_BACKUP_STARTED, SYNTHETIC_GLOBAL_OUTAGE, SYNTHETIC_LOCAL_OUTAGE, SYNTHETIC_TEST_LOCATION_SLOWDOWN, CUSTOM_CONFIGURATION, PROCESS_NA_HIGH_CONN_FAIL_RATE, OSI_HIGH_CPU, CUSTOM_ALERT, CUSTOM_APP_CRASH_RATE_INCREASED, CUSTOM_APPLICATION_ERROR_RATE_INCREASED, CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD, CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD, CUSTOM_APPLICATION_OVERLOAD_PREVENTION, CUSTOM_APPLICATION_SLOWDOWN, PGI_CUSTOM_AVAILABILITY, PGI_CUSTOM_ERROR, CUSTOM_INFO, PGI_CUSTOM_PERFORMANCE, CUSTOM_DEPLOYMENT, DEPLOYMENT_CHANGED_CHANGE, DEPLOYMENT_CHANGED_NEW, DEPLOYMENT_CHANGED_REMOVED, EBS_VOLUME_HIGH_LATENCY, ERROR_EVENT, LOG_ERROR, ESXI_HOST_CONNECTION_FAILED, ESXI_HOST_CONNECTION_LOST, ESXI_GUEST_CPU_LIMIT_REACHED, ESXI_GUEST_ACTIVE_SWAP_WAIT, ESXI_HOST_CPU_SATURATION, ESXI_HOST_MEMORY_SATURATION, ESXI_HOST_MAINTENANCE, ESXI_HOST_NETWORK_PROBLEMS, ESXI_HOST_NO_CONNECTION, ESXI_HOST_SHUTDOWN, ESXI_HOST_DISK_SLOW, ESXI_HOST_UP, ESXI_HOST_TIMEOUT, ESXI_VM_IMPACT_HOST_CPU_SATURATION, ESXI_VM_IMPACT_HOST_MEMORY_SATURATION, DATABASE_CONNECTION_FAILURE, RDS_AZ_FAILOVER_COMPLETED, RDS_AZ_FAILOVER_STARTED, SERVICE_ERROR_RATE_INCREASED, RDS_HIGH_LATENCY, OSI_NIC_UTILIZATION_HIGH, OSI_NIC_ERRORS_HIGH, PGI_HAPROXY_QUEUED_REQUESTS_HIGH, PGI_RMQ_HIGH_FILE_DESC_USAGE, PGI_RMQ_HIGH_MEM_USAGE, PGI_RMQ_HIGH_PROCESS_USAGE, PGI_RMQ_HIGH_SOCKETS_USAGE, OSI_NIC_DROPPED_PACKETS_HIGH, PGI_MYSQL_SLOW_QUERIES_RATE_HIGH, PGI_KEYSTONE_SLOW, PGI_HAPROXY_SESSION_USAGE_HIGH, HOST_LOG_AVAILABILITY, HOST_LOG_ERROR, OSI_GRACEFULLY_SHUTDOWN, HOST_LOG_MATCHED, OSI_UNEXPECTEDLY_UNAVAILABLE, HOST_LOG_PERFORMANCE, HOST_OF_SERVICE_UNAVAILABLE, HTTP_CHECK_GLOBAL_OUTAGE, HTTP_CHECK_LOCAL_OUTAGE, HTTP_CHECK_TEST_LOCATION_SLOWDOWN, ESXI_HOST_DISK_QUEUE_SLOW, LOG_MATCHED, APPLICATION_ERROR_RATE_INCREASED, APPLICATION_JS_FRAMEWORK_DETECTED, AWS_LAMBDA_HIGH_ERROR_RATE, ELB_HIGH_BACKEND_ERROR_RATE, ELB_HIGH_FRONTEND_ERROR_RATE, ELB_HIGH_UNHEALTHY_HOST_RATE, PROCESS_HIGH_GC_ACTIVITY, ESXI_HOST_DATASTORE_LOW_DISK_SPACE, OSI_DOCKER_DEVICEMAPPER_LOW_DATA_SPACE, OSI_LOW_DISK_SPACE, OSI_DOCKER_DEVICEMAPPER_LOW_METADATA_SPACE, OSI_DISK_LOW_INODES, PGI_RMQ_LOW_DISK_SPACE, RDS_LOW_STORAGE_SPACE, MARKED_FOR_TERMINATION, PROCESS_MEMORY_RESOURCE_EXHAUSTED, OSI_HIGH_MEMORY, MOBILE_APP_CRASH_RATE_INCREASED, MOBILE_APPLICATION_ERROR_RATE_INCREASED, MOBILE_APPLICATION_OVERLOAD_PREVENTION, MOBILE_APPLICATION_SLOWDOWN, MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD, MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD, MONITORING_UNAVAILABLE, PROCESS_NA_HIGH_LOSS_RATE, PGI_KEYSTONE_UNHEALTHY, ESXI_HOST_OVERLOADED_STORAGE, PERFORMANCE_EVENT, LOG_PERFORMANCE, PGI_LOG_AVAILABILITY, PGI_CRASHED_INFO, PROCESS_CRASHED, PGI_LOG_ERROR, PG_LOW_INSTANCE_COUNT, PGI_LOG_MATCHED, PGI_MEMDUMP, PGI_LOG_PERFORMANCE, PROCESS_RESTART, PGI_UNAVAILABLE, RDS_HIGH_CPU, RDS_LOW_MEMORY, RDS_OF_SERVICE_UNAVAILABLE, RESOURCE_CONTENTION_EVENT, SERVICE_SLOWDOWN, RDS_RESTART, RDS_RESTART_SEQUENCE, PGI_OF_SERVICE_UNAVAILABLE, OSI_SLOW_DISK, SYNTHETIC_NODE_OUTAGE, SYNTHETIC_PRIVATE_LOCATION_OUTAGE, EXTERNAL_SYNTHETIC_TEST_OUTAGE, EXTERNAL_SYNTHETIC_TEST_SLOWDOWN, PROCESS_THREADS_RESOURCE_EXHAUSTED, SERVICE_UNEXPECTED_HIGH_LOAD, SERVICE_UNEXPECTED_LOW_LOAD, ESXI_VM_DISCONNECTED, OPENSTACK_VM_LAUNCH_FAILED, ESXI_HOST_VM_MOTION_LEFT, ESXI_HOST_VM_MOTION_ARRIVED, ESXI_VM_MOTION, OPENSTACK_VM_MOTION, ESXI_VM_POWER_OFF, ESXI_VM_SHUTDOWN, OPENSTACK_HOST_VM_SHUTDOWN, ESXI_VM_START, ESXI_HOST_VM_STARTED, OPENSTACK_HOST_VM_STARTED
	// The types of davis events to trigger an execution. Possible values are `CUSTOM_ANNOTATION`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `APPLICATION_OVERLOAD_PREVENTION`, `APPLICATION_SLOWDOWN`, `AVAILABILITY_EVENT`, `LOG_AVAILABILITY`, `EC2_HIGH_CPU`, `RDS_BACKUP_COMPLETED`, `RDS_BACKUP_STARTED`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_TEST_LOCATION_SLOWDOWN`, `CUSTOM_CONFIGURATION`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `OSI_HIGH_CPU`, `CUSTOM_ALERT`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APPLICATION_OVERLOAD_PREVENTION`, `CUSTOM_APPLICATION_SLOWDOWN`, `PGI_CUSTOM_AVAILABILITY`, `PGI_CUSTOM_ERROR`, `CUSTOM_INFO`, `PGI_CUSTOM_PERFORMANCE`, `CUSTOM_DEPLOYMENT`, `DEPLOYMENT_CHANGED_CHANGE`, `DEPLOYMENT_CHANGED_NEW`, `DEPLOYMENT_CHANGED_REMOVED`, `EBS_VOLUME_HIGH_LATENCY`, `ERROR_EVENT`, `LOG_ERROR`, `ESXI_HOST_CONNECTION_FAILED`, `ESXI_HOST_CONNECTION_LOST`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_MAINTENANCE`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_NO_CONNECTION`, `ESXI_HOST_SHUTDOWN`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_UP`, `ESXI_HOST_TIMEOUT`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `DATABASE_CONNECTION_FAILURE`, `RDS_AZ_FAILOVER_COMPLETED`, `RDS_AZ_FAILOVER_STARTED`, `SERVICE_ERROR_RATE_INCREASED`, `RDS_HIGH_LATENCY`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_NIC_ERRORS_HIGH`, `PGI_HAPROXY_QUEUED_REQUESTS_HIGH`, `PGI_RMQ_HIGH_FILE_DESC_USAGE`, `PGI_RMQ_HIGH_MEM_USAGE`, `PGI_RMQ_HIGH_PROCESS_USAGE`, `PGI_RMQ_HIGH_SOCKETS_USAGE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `PGI_MYSQL_SLOW_QUERIES_RATE_HIGH`, `PGI_KEYSTONE_SLOW`, `PGI_HAPROXY_SESSION_USAGE_HIGH`, `HOST_LOG_AVAILABILITY`, `HOST_LOG_ERROR`, `OSI_GRACEFULLY_SHUTDOWN`, `HOST_LOG_MATCHED`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `HOST_LOG_PERFORMANCE`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `ESXI_HOST_DISK_QUEUE_SLOW`, `LOG_MATCHED`, `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_JS_FRAMEWORK_DETECTED`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ELB_HIGH_FRONTEND_ERROR_RATE`, `ELB_HIGH_UNHEALTHY_HOST_RATE`, `PROCESS_HIGH_GC_ACTIVITY`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `OSI_DOCKER_DEVICEMAPPER_LOW_DATA_SPACE`, `OSI_LOW_DISK_SPACE`, `OSI_DOCKER_DEVICEMAPPER_LOW_METADATA_SPACE`, `OSI_DISK_LOW_INODES`, `PGI_RMQ_LOW_DISK_SPACE`, `RDS_LOW_STORAGE_SPACE`, `MARKED_FOR_TERMINATION`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `OSI_HIGH_MEMORY`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_OVERLOAD_PREVENTION`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MONITORING_UNAVAILABLE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PGI_KEYSTONE_UNHEALTHY`, `ESXI_HOST_OVERLOADED_STORAGE`, `PERFORMANCE_EVENT`, `LOG_PERFORMANCE`, `PGI_LOG_AVAILABILITY`, `PGI_CRASHED_INFO`, `PROCESS_CRASHED`, `PGI_LOG_ERROR`, `PG_LOW_INSTANCE_COUNT`, `PGI_LOG_MATCHED`, `PGI_MEMDUMP`, `PGI_LOG_PERFORMANCE`, `PROCESS_RESTART`, `PGI_UNAVAILABLE`, `RDS_HIGH_CPU`, `RDS_LOW_MEMORY`, `RDS_OF_SERVICE_UNAVAILABLE`, `RESOURCE_CONTENTION_EVENT`, `SERVICE_SLOWDOWN`, `RDS_RESTART`, `RDS_RESTART_SEQUENCE`, `PGI_OF_SERVICE_UNAVAILABLE`, `OSI_SLOW_DISK`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `ESXI_VM_DISCONNECTED`, `OPENSTACK_VM_LAUNCH_FAILED`, `ESXI_HOST_VM_MOTION_LEFT`, `ESXI_HOST_VM_MOTION_ARRIVED`, `ESXI_VM_MOTION`, `OPENSTACK_VM_MOTION`, `ESXI_VM_POWER_OFF`, `ESXI_VM_SHUTDOWN`, `OPENSTACK_HOST_VM_SHUTDOWN`, `ESXI_VM_START`, `ESXI_HOST_VM_STARTED`, `OPENSTACK_HOST_VM_STARTED`
	// +listType=set
	Types []*string `json:"types,omitempty" tf:"types,omitempty"`
}

type DavisEventParameters struct {

	// (Map of String) key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// +kubebuilder:validation:Optional
	// +mapType=granular
	EntityTags map[string]*string `json:"entityTags,omitempty" tf:"entity_tags,omitempty"`

	// (String) Specifies whether all or just any of the configured entity tags need to match. Possible values: all and any. Omit this attribute if all entities should match
	// Specifies whether all or just any of the configured entity tags need to match. Possible values: `all` and `any`. Omit this attribute if all entities should match
	// +kubebuilder:validation:Optional
	EntityTagsMatch *string `json:"entityTagsMatch,omitempty" tf:"entity_tags_match,omitempty"`

	// (Boolean) If set to true closing a problem also is considered an event that triggers the execution
	// If set to `true` closing a problem also is considered an event that triggers the execution
	// +kubebuilder:validation:Optional
	OnProblemClose *bool `json:"onProblemClose,omitempty" tf:"on_problem_close,omitempty"`

	// (Set of String) The types of davis events to trigger an execution. Possible values are CUSTOM_ANNOTATION, APPLICATION_UNEXPECTED_HIGH_LOAD, APPLICATION_UNEXPECTED_LOW_LOAD, APPLICATION_OVERLOAD_PREVENTION, APPLICATION_SLOWDOWN, AVAILABILITY_EVENT, LOG_AVAILABILITY, EC2_HIGH_CPU, RDS_BACKUP_COMPLETED, RDS_BACKUP_STARTED, SYNTHETIC_GLOBAL_OUTAGE, SYNTHETIC_LOCAL_OUTAGE, SYNTHETIC_TEST_LOCATION_SLOWDOWN, CUSTOM_CONFIGURATION, PROCESS_NA_HIGH_CONN_FAIL_RATE, OSI_HIGH_CPU, CUSTOM_ALERT, CUSTOM_APP_CRASH_RATE_INCREASED, CUSTOM_APPLICATION_ERROR_RATE_INCREASED, CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD, CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD, CUSTOM_APPLICATION_OVERLOAD_PREVENTION, CUSTOM_APPLICATION_SLOWDOWN, PGI_CUSTOM_AVAILABILITY, PGI_CUSTOM_ERROR, CUSTOM_INFO, PGI_CUSTOM_PERFORMANCE, CUSTOM_DEPLOYMENT, DEPLOYMENT_CHANGED_CHANGE, DEPLOYMENT_CHANGED_NEW, DEPLOYMENT_CHANGED_REMOVED, EBS_VOLUME_HIGH_LATENCY, ERROR_EVENT, LOG_ERROR, ESXI_HOST_CONNECTION_FAILED, ESXI_HOST_CONNECTION_LOST, ESXI_GUEST_CPU_LIMIT_REACHED, ESXI_GUEST_ACTIVE_SWAP_WAIT, ESXI_HOST_CPU_SATURATION, ESXI_HOST_MEMORY_SATURATION, ESXI_HOST_MAINTENANCE, ESXI_HOST_NETWORK_PROBLEMS, ESXI_HOST_NO_CONNECTION, ESXI_HOST_SHUTDOWN, ESXI_HOST_DISK_SLOW, ESXI_HOST_UP, ESXI_HOST_TIMEOUT, ESXI_VM_IMPACT_HOST_CPU_SATURATION, ESXI_VM_IMPACT_HOST_MEMORY_SATURATION, DATABASE_CONNECTION_FAILURE, RDS_AZ_FAILOVER_COMPLETED, RDS_AZ_FAILOVER_STARTED, SERVICE_ERROR_RATE_INCREASED, RDS_HIGH_LATENCY, OSI_NIC_UTILIZATION_HIGH, OSI_NIC_ERRORS_HIGH, PGI_HAPROXY_QUEUED_REQUESTS_HIGH, PGI_RMQ_HIGH_FILE_DESC_USAGE, PGI_RMQ_HIGH_MEM_USAGE, PGI_RMQ_HIGH_PROCESS_USAGE, PGI_RMQ_HIGH_SOCKETS_USAGE, OSI_NIC_DROPPED_PACKETS_HIGH, PGI_MYSQL_SLOW_QUERIES_RATE_HIGH, PGI_KEYSTONE_SLOW, PGI_HAPROXY_SESSION_USAGE_HIGH, HOST_LOG_AVAILABILITY, HOST_LOG_ERROR, OSI_GRACEFULLY_SHUTDOWN, HOST_LOG_MATCHED, OSI_UNEXPECTEDLY_UNAVAILABLE, HOST_LOG_PERFORMANCE, HOST_OF_SERVICE_UNAVAILABLE, HTTP_CHECK_GLOBAL_OUTAGE, HTTP_CHECK_LOCAL_OUTAGE, HTTP_CHECK_TEST_LOCATION_SLOWDOWN, ESXI_HOST_DISK_QUEUE_SLOW, LOG_MATCHED, APPLICATION_ERROR_RATE_INCREASED, APPLICATION_JS_FRAMEWORK_DETECTED, AWS_LAMBDA_HIGH_ERROR_RATE, ELB_HIGH_BACKEND_ERROR_RATE, ELB_HIGH_FRONTEND_ERROR_RATE, ELB_HIGH_UNHEALTHY_HOST_RATE, PROCESS_HIGH_GC_ACTIVITY, ESXI_HOST_DATASTORE_LOW_DISK_SPACE, OSI_DOCKER_DEVICEMAPPER_LOW_DATA_SPACE, OSI_LOW_DISK_SPACE, OSI_DOCKER_DEVICEMAPPER_LOW_METADATA_SPACE, OSI_DISK_LOW_INODES, PGI_RMQ_LOW_DISK_SPACE, RDS_LOW_STORAGE_SPACE, MARKED_FOR_TERMINATION, PROCESS_MEMORY_RESOURCE_EXHAUSTED, OSI_HIGH_MEMORY, MOBILE_APP_CRASH_RATE_INCREASED, MOBILE_APPLICATION_ERROR_RATE_INCREASED, MOBILE_APPLICATION_OVERLOAD_PREVENTION, MOBILE_APPLICATION_SLOWDOWN, MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD, MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD, MONITORING_UNAVAILABLE, PROCESS_NA_HIGH_LOSS_RATE, PGI_KEYSTONE_UNHEALTHY, ESXI_HOST_OVERLOADED_STORAGE, PERFORMANCE_EVENT, LOG_PERFORMANCE, PGI_LOG_AVAILABILITY, PGI_CRASHED_INFO, PROCESS_CRASHED, PGI_LOG_ERROR, PG_LOW_INSTANCE_COUNT, PGI_LOG_MATCHED, PGI_MEMDUMP, PGI_LOG_PERFORMANCE, PROCESS_RESTART, PGI_UNAVAILABLE, RDS_HIGH_CPU, RDS_LOW_MEMORY, RDS_OF_SERVICE_UNAVAILABLE, RESOURCE_CONTENTION_EVENT, SERVICE_SLOWDOWN, RDS_RESTART, RDS_RESTART_SEQUENCE, PGI_OF_SERVICE_UNAVAILABLE, OSI_SLOW_DISK, SYNTHETIC_NODE_OUTAGE, SYNTHETIC_PRIVATE_LOCATION_OUTAGE, EXTERNAL_SYNTHETIC_TEST_OUTAGE, EXTERNAL_SYNTHETIC_TEST_SLOWDOWN, PROCESS_THREADS_RESOURCE_EXHAUSTED, SERVICE_UNEXPECTED_HIGH_LOAD, SERVICE_UNEXPECTED_LOW_LOAD, ESXI_VM_DISCONNECTED, OPENSTACK_VM_LAUNCH_FAILED, ESXI_HOST_VM_MOTION_LEFT, ESXI_HOST_VM_MOTION_ARRIVED, ESXI_VM_MOTION, OPENSTACK_VM_MOTION, ESXI_VM_POWER_OFF, ESXI_VM_SHUTDOWN, OPENSTACK_HOST_VM_SHUTDOWN, ESXI_VM_START, ESXI_HOST_VM_STARTED, OPENSTACK_HOST_VM_STARTED
	// The types of davis events to trigger an execution. Possible values are `CUSTOM_ANNOTATION`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `APPLICATION_OVERLOAD_PREVENTION`, `APPLICATION_SLOWDOWN`, `AVAILABILITY_EVENT`, `LOG_AVAILABILITY`, `EC2_HIGH_CPU`, `RDS_BACKUP_COMPLETED`, `RDS_BACKUP_STARTED`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_TEST_LOCATION_SLOWDOWN`, `CUSTOM_CONFIGURATION`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `OSI_HIGH_CPU`, `CUSTOM_ALERT`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APPLICATION_OVERLOAD_PREVENTION`, `CUSTOM_APPLICATION_SLOWDOWN`, `PGI_CUSTOM_AVAILABILITY`, `PGI_CUSTOM_ERROR`, `CUSTOM_INFO`, `PGI_CUSTOM_PERFORMANCE`, `CUSTOM_DEPLOYMENT`, `DEPLOYMENT_CHANGED_CHANGE`, `DEPLOYMENT_CHANGED_NEW`, `DEPLOYMENT_CHANGED_REMOVED`, `EBS_VOLUME_HIGH_LATENCY`, `ERROR_EVENT`, `LOG_ERROR`, `ESXI_HOST_CONNECTION_FAILED`, `ESXI_HOST_CONNECTION_LOST`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_MAINTENANCE`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_NO_CONNECTION`, `ESXI_HOST_SHUTDOWN`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_UP`, `ESXI_HOST_TIMEOUT`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `DATABASE_CONNECTION_FAILURE`, `RDS_AZ_FAILOVER_COMPLETED`, `RDS_AZ_FAILOVER_STARTED`, `SERVICE_ERROR_RATE_INCREASED`, `RDS_HIGH_LATENCY`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_NIC_ERRORS_HIGH`, `PGI_HAPROXY_QUEUED_REQUESTS_HIGH`, `PGI_RMQ_HIGH_FILE_DESC_USAGE`, `PGI_RMQ_HIGH_MEM_USAGE`, `PGI_RMQ_HIGH_PROCESS_USAGE`, `PGI_RMQ_HIGH_SOCKETS_USAGE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `PGI_MYSQL_SLOW_QUERIES_RATE_HIGH`, `PGI_KEYSTONE_SLOW`, `PGI_HAPROXY_SESSION_USAGE_HIGH`, `HOST_LOG_AVAILABILITY`, `HOST_LOG_ERROR`, `OSI_GRACEFULLY_SHUTDOWN`, `HOST_LOG_MATCHED`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `HOST_LOG_PERFORMANCE`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `ESXI_HOST_DISK_QUEUE_SLOW`, `LOG_MATCHED`, `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_JS_FRAMEWORK_DETECTED`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ELB_HIGH_FRONTEND_ERROR_RATE`, `ELB_HIGH_UNHEALTHY_HOST_RATE`, `PROCESS_HIGH_GC_ACTIVITY`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `OSI_DOCKER_DEVICEMAPPER_LOW_DATA_SPACE`, `OSI_LOW_DISK_SPACE`, `OSI_DOCKER_DEVICEMAPPER_LOW_METADATA_SPACE`, `OSI_DISK_LOW_INODES`, `PGI_RMQ_LOW_DISK_SPACE`, `RDS_LOW_STORAGE_SPACE`, `MARKED_FOR_TERMINATION`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `OSI_HIGH_MEMORY`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_OVERLOAD_PREVENTION`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MONITORING_UNAVAILABLE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PGI_KEYSTONE_UNHEALTHY`, `ESXI_HOST_OVERLOADED_STORAGE`, `PERFORMANCE_EVENT`, `LOG_PERFORMANCE`, `PGI_LOG_AVAILABILITY`, `PGI_CRASHED_INFO`, `PROCESS_CRASHED`, `PGI_LOG_ERROR`, `PG_LOW_INSTANCE_COUNT`, `PGI_LOG_MATCHED`, `PGI_MEMDUMP`, `PGI_LOG_PERFORMANCE`, `PROCESS_RESTART`, `PGI_UNAVAILABLE`, `RDS_HIGH_CPU`, `RDS_LOW_MEMORY`, `RDS_OF_SERVICE_UNAVAILABLE`, `RESOURCE_CONTENTION_EVENT`, `SERVICE_SLOWDOWN`, `RDS_RESTART`, `RDS_RESTART_SEQUENCE`, `PGI_OF_SERVICE_UNAVAILABLE`, `OSI_SLOW_DISK`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `ESXI_VM_DISCONNECTED`, `OPENSTACK_VM_LAUNCH_FAILED`, `ESXI_HOST_VM_MOTION_LEFT`, `ESXI_HOST_VM_MOTION_ARRIVED`, `ESXI_VM_MOTION`, `OPENSTACK_VM_MOTION`, `ESXI_VM_POWER_OFF`, `ESXI_VM_SHUTDOWN`, `OPENSTACK_HOST_VM_SHUTDOWN`, `ESXI_VM_START`, `ESXI_HOST_VM_STARTED`, `OPENSTACK_HOST_VM_STARTED`
	// +kubebuilder:validation:Optional
	// +listType=set
	Types []*string `json:"types" tf:"types,omitempty"`
}

type DavisProblemInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	Categories []CategoriesInitParameters `json:"categories,omitempty" tf:"categories,omitempty"`

	// (String)
	CustomFilter *string `json:"customFilter,omitempty" tf:"custom_filter,omitempty"`

	// (Map of String) key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// +mapType=granular
	EntityTags map[string]*string `json:"entityTags,omitempty" tf:"entity_tags,omitempty"`

	// (String) Specifies whether all or just any of the configured entity tags need to match. Possible values: all and any. Omit this attribute if all entities should match
	// Specifies whether all or just any of the configured entity tags need to match. Possible values: `all` and `any`. Omit this attribute if all entities should match
	EntityTagsMatch *string `json:"entityTagsMatch,omitempty" tf:"entity_tags_match,omitempty"`

	// (Boolean) If set to true closing a problem also is considered an event that triggers the execution
	// If set to `true` closing a problem also is considered an event that triggers the execution
	OnProblemClose *bool `json:"onProblemClose,omitempty" tf:"on_problem_close,omitempty"`
}

type DavisProblemObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	Categories []CategoriesObservation `json:"categories,omitempty" tf:"categories,omitempty"`

	// (String)
	CustomFilter *string `json:"customFilter,omitempty" tf:"custom_filter,omitempty"`

	// (Map of String) key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// +mapType=granular
	EntityTags map[string]*string `json:"entityTags,omitempty" tf:"entity_tags,omitempty"`

	// (String) Specifies whether all or just any of the configured entity tags need to match. Possible values: all and any. Omit this attribute if all entities should match
	// Specifies whether all or just any of the configured entity tags need to match. Possible values: `all` and `any`. Omit this attribute if all entities should match
	EntityTagsMatch *string `json:"entityTagsMatch,omitempty" tf:"entity_tags_match,omitempty"`

	// (Boolean) If set to true closing a problem also is considered an event that triggers the execution
	// If set to `true` closing a problem also is considered an event that triggers the execution
	OnProblemClose *bool `json:"onProblemClose,omitempty" tf:"on_problem_close,omitempty"`
}

type DavisProblemParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Categories []CategoriesParameters `json:"categories" tf:"categories,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	CustomFilter *string `json:"customFilter,omitempty" tf:"custom_filter,omitempty"`

	// (Map of String) key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
	// +kubebuilder:validation:Optional
	// +mapType=granular
	EntityTags map[string]*string `json:"entityTags,omitempty" tf:"entity_tags,omitempty"`

	// (String) Specifies whether all or just any of the configured entity tags need to match. Possible values: all and any. Omit this attribute if all entities should match
	// Specifies whether all or just any of the configured entity tags need to match. Possible values: `all` and `any`. Omit this attribute if all entities should match
	// +kubebuilder:validation:Optional
	EntityTagsMatch *string `json:"entityTagsMatch,omitempty" tf:"entity_tags_match,omitempty"`

	// (Boolean) If set to true closing a problem also is considered an event that triggers the execution
	// If set to `true` closing a problem also is considered an event that triggers the execution
	// +kubebuilder:validation:Optional
	OnProblemClose *bool `json:"onProblemClose,omitempty" tf:"on_problem_close,omitempty"`
}

type EventInitParameters struct {

	// (Boolean) Specifies whether a task should be skipped as a no operation or not
	// If specified the workflow is getting triggered based on a schedule
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Block List, Max: 1) If specified the workflow is getting triggered based on events (see below for nested schema)
	// If specified the workflow is getting triggered based on events
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`
}

type EventObservation struct {

	// (Boolean) Specifies whether a task should be skipped as a no operation or not
	// If specified the workflow is getting triggered based on a schedule
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Block List, Max: 1) If specified the workflow is getting triggered based on events (see below for nested schema)
	// If specified the workflow is getting triggered based on events
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`
}

type EventParameters struct {

	// (Boolean) Specifies whether a task should be skipped as a no operation or not
	// If specified the workflow is getting triggered based on a schedule
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Block List, Max: 1) If specified the workflow is getting triggered based on events (see below for nested schema)
	// If specified the workflow is getting triggered based on events
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`
}

type FilterParametersInitParameters struct {

	// (String) Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression ({{}}). Default: 1
	// If specified, the schedule will end triggering executions af the given amount of executions. Minimum: 1, Maximum: 10
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (String) If specified, the schedule won't trigger executions before the given date
	// If specified, the schedule won't trigger executions before the given date
	EarliestStart *string `json:"earliestStart,omitempty" tf:"earliest_start,omitempty"`

	// (String) If specified, the schedule won't trigger executions before the given time
	// If specified, the schedule won't trigger executions before the given time
	EarliestStartTime *string `json:"earliestStartTime,omitempty" tf:"earliest_start_time,omitempty"`

	// (Set of String) If specified, the schedule won't trigger exeuctions on the given dates
	// If specified, the schedule won't trigger exeuctions on the given dates
	// +listType=set
	ExcludeDates []*string `json:"excludeDates,omitempty" tf:"exclude_dates,omitempty"`

	// (Set of String) If specified, the schedule will trigger executions on the given dates, even if the main configuration prohibits it
	// If specified, the schedule will trigger executions on the given dates, even if the main configuration prohibits it
	// +listType=set
	IncludeDates []*string `json:"includeDates,omitempty" tf:"include_dates,omitempty"`

	// (String) If specified, the schedule won't trigger executions after the given date
	// If specified, the schedule won't trigger executions after the given date
	Until *string `json:"until,omitempty" tf:"until,omitempty"`
}

type FilterParametersObservation struct {

	// (String) Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression ({{}}). Default: 1
	// If specified, the schedule will end triggering executions af the given amount of executions. Minimum: 1, Maximum: 10
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (String) If specified, the schedule won't trigger executions before the given date
	// If specified, the schedule won't trigger executions before the given date
	EarliestStart *string `json:"earliestStart,omitempty" tf:"earliest_start,omitempty"`

	// (String) If specified, the schedule won't trigger executions before the given time
	// If specified, the schedule won't trigger executions before the given time
	EarliestStartTime *string `json:"earliestStartTime,omitempty" tf:"earliest_start_time,omitempty"`

	// (Set of String) If specified, the schedule won't trigger exeuctions on the given dates
	// If specified, the schedule won't trigger exeuctions on the given dates
	// +listType=set
	ExcludeDates []*string `json:"excludeDates,omitempty" tf:"exclude_dates,omitempty"`

	// (Set of String) If specified, the schedule will trigger executions on the given dates, even if the main configuration prohibits it
	// If specified, the schedule will trigger executions on the given dates, even if the main configuration prohibits it
	// +listType=set
	IncludeDates []*string `json:"includeDates,omitempty" tf:"include_dates,omitempty"`

	// (String) If specified, the schedule won't trigger executions after the given date
	// If specified, the schedule won't trigger executions after the given date
	Until *string `json:"until,omitempty" tf:"until,omitempty"`
}

type FilterParametersParameters struct {

	// (String) Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression ({{}}). Default: 1
	// If specified, the schedule will end triggering executions af the given amount of executions. Minimum: 1, Maximum: 10
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// (String) If specified, the schedule won't trigger executions before the given date
	// If specified, the schedule won't trigger executions before the given date
	// +kubebuilder:validation:Optional
	EarliestStart *string `json:"earliestStart,omitempty" tf:"earliest_start,omitempty"`

	// (String) If specified, the schedule won't trigger executions before the given time
	// If specified, the schedule won't trigger executions before the given time
	// +kubebuilder:validation:Optional
	EarliestStartTime *string `json:"earliestStartTime,omitempty" tf:"earliest_start_time,omitempty"`

	// (Set of String) If specified, the schedule won't trigger exeuctions on the given dates
	// If specified, the schedule won't trigger exeuctions on the given dates
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludeDates []*string `json:"excludeDates,omitempty" tf:"exclude_dates,omitempty"`

	// (Set of String) If specified, the schedule will trigger executions on the given dates, even if the main configuration prohibits it
	// If specified, the schedule will trigger executions on the given dates, even if the main configuration prohibits it
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludeDates []*string `json:"includeDates,omitempty" tf:"include_dates,omitempty"`

	// (String) If specified, the schedule won't trigger executions after the given date
	// If specified, the schedule won't trigger executions after the given date
	// +kubebuilder:validation:Optional
	Until *string `json:"until,omitempty" tf:"until,omitempty"`
}

type PositionInitParameters struct {

	// coordinate for layouting
	// x-coordinate for layouting
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// coordinate for layouting
	// y-coordinate for layouting
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type PositionObservation struct {

	// coordinate for layouting
	// x-coordinate for layouting
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// coordinate for layouting
	// y-coordinate for layouting
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type PositionParameters struct {

	// coordinate for layouting
	// x-coordinate for layouting
	// +kubebuilder:validation:Optional
	X *float64 `json:"x" tf:"x,omitempty"`

	// coordinate for layouting
	// y-coordinate for layouting
	// +kubebuilder:validation:Optional
	Y *float64 `json:"y" tf:"y,omitempty"`
}

type RetryInitParameters struct {

	// (String) Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression ({{}}). Default: 1
	// Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression (`{{}}`). Default: 1
	Count *string `json:"count,omitempty" tf:"count,omitempty"`

	// (String) Specifies a delay in seconds between subsequent task retries. You can specify either a number between 1 and 3600 here or an expression ({{...}}). Default: 1
	// Specifies a delay in seconds between subsequent task retries. You can specify either a number between 1 and 3600 here or an expression (`{{...}}`). Default: 1
	Delay *string `json:"delay,omitempty" tf:"delay,omitempty"`

	// (Boolean) Specifies whether retrying the failed iterations or the whole loop. Default: true
	// Specifies whether retrying the failed iterations or the whole loop. Default: true
	FailedLoopIterationsOnly *bool `json:"failedLoopIterationsOnly,omitempty" tf:"failed_loop_iterations_only,omitempty"`
}

type RetryObservation struct {

	// (String) Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression ({{}}). Default: 1
	// Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression (`{{}}`). Default: 1
	Count *string `json:"count,omitempty" tf:"count,omitempty"`

	// (String) Specifies a delay in seconds between subsequent task retries. You can specify either a number between 1 and 3600 here or an expression ({{...}}). Default: 1
	// Specifies a delay in seconds between subsequent task retries. You can specify either a number between 1 and 3600 here or an expression (`{{...}}`). Default: 1
	Delay *string `json:"delay,omitempty" tf:"delay,omitempty"`

	// (Boolean) Specifies whether retrying the failed iterations or the whole loop. Default: true
	// Specifies whether retrying the failed iterations or the whole loop. Default: true
	FailedLoopIterationsOnly *bool `json:"failedLoopIterationsOnly,omitempty" tf:"failed_loop_iterations_only,omitempty"`
}

type RetryParameters struct {

	// (String) Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression ({{}}). Default: 1
	// Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression (`{{}}`). Default: 1
	// +kubebuilder:validation:Optional
	Count *string `json:"count,omitempty" tf:"count,omitempty"`

	// (String) Specifies a delay in seconds between subsequent task retries. You can specify either a number between 1 and 3600 here or an expression ({{...}}). Default: 1
	// Specifies a delay in seconds between subsequent task retries. You can specify either a number between 1 and 3600 here or an expression (`{{...}}`). Default: 1
	// +kubebuilder:validation:Optional
	Delay *string `json:"delay,omitempty" tf:"delay,omitempty"`

	// (Boolean) Specifies whether retrying the failed iterations or the whole loop. Default: true
	// Specifies whether retrying the failed iterations or the whole loop. Default: true
	// +kubebuilder:validation:Optional
	FailedLoopIterationsOnly *bool `json:"failedLoopIterationsOnly,omitempty" tf:"failed_loop_iterations_only,omitempty"`
}

type ScheduleInitParameters struct {

	// (Boolean) Specifies whether a task should be skipped as a no operation or not
	// The trigger is enabled (`true`) or not (`false`). Default is `false`
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Block List, Max: 1) Advanced restrictions for the schedule to trigger executions (see below for nested schema)
	// Advanced restrictions for the schedule to trigger executions
	FilterParameters []FilterParametersInitParameters `json:"filterParameters,omitempty" tf:"filter_parameters,omitempty"`

	// (String) Refers to a configured rule that determines at which days the schedule should be active. If not specified it implies that the schedule is valid every day
	// Refers to a configured rule that determines at which days the schedule should be active. If not specified it implies that the schedule is valid every day
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`

	// (String) A time zone the scheduled times to align with. If not specified it will be chosen automatically based on the location of the Dynatrace Server
	// A time zone the scheduled times to align with. If not specified it will be chosen automatically based on the location of the Dynatrace Server
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// (Block List, Max: 1) Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is getting manually triggered (see below for nested schema)
	// Detailed configuration about the timing constraints that trigger the execution
	Trigger []ScheduleTriggerInitParameters `json:"trigger,omitempty" tf:"trigger,omitempty"`
}

type ScheduleObservation struct {

	// (Boolean) Specifies whether a task should be skipped as a no operation or not
	// The trigger is enabled (`true`) or not (`false`). Default is `false`
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Block List, Max: 1) Advanced restrictions for the schedule to trigger executions (see below for nested schema)
	// Advanced restrictions for the schedule to trigger executions
	FilterParameters []FilterParametersObservation `json:"filterParameters,omitempty" tf:"filter_parameters,omitempty"`

	// (String) Refers to a configured rule that determines at which days the schedule should be active. If not specified it implies that the schedule is valid every day
	// Refers to a configured rule that determines at which days the schedule should be active. If not specified it implies that the schedule is valid every day
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`

	// (String) A time zone the scheduled times to align with. If not specified it will be chosen automatically based on the location of the Dynatrace Server
	// A time zone the scheduled times to align with. If not specified it will be chosen automatically based on the location of the Dynatrace Server
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// (Block List, Max: 1) Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is getting manually triggered (see below for nested schema)
	// Detailed configuration about the timing constraints that trigger the execution
	Trigger []ScheduleTriggerObservation `json:"trigger,omitempty" tf:"trigger,omitempty"`
}

type ScheduleParameters struct {

	// (Boolean) Specifies whether a task should be skipped as a no operation or not
	// The trigger is enabled (`true`) or not (`false`). Default is `false`
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Block List, Max: 1) Advanced restrictions for the schedule to trigger executions (see below for nested schema)
	// Advanced restrictions for the schedule to trigger executions
	// +kubebuilder:validation:Optional
	FilterParameters []FilterParametersParameters `json:"filterParameters,omitempty" tf:"filter_parameters,omitempty"`

	// (String) Refers to a configured rule that determines at which days the schedule should be active. If not specified it implies that the schedule is valid every day
	// Refers to a configured rule that determines at which days the schedule should be active. If not specified it implies that the schedule is valid every day
	// +kubebuilder:validation:Optional
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`

	// (String) A time zone the scheduled times to align with. If not specified it will be chosen automatically based on the location of the Dynatrace Server
	// A time zone the scheduled times to align with. If not specified it will be chosen automatically based on the location of the Dynatrace Server
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// (Block List, Max: 1) Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is getting manually triggered (see below for nested schema)
	// Detailed configuration about the timing constraints that trigger the execution
	// +kubebuilder:validation:Optional
	Trigger []ScheduleTriggerParameters `json:"trigger" tf:"trigger,omitempty"`
}

type ScheduleTriggerInitParameters struct {

	// specifying the end time on any valid day in 24h format (e.g. 14:22:44). Conflicts with cron and time. Required with interval_minutes and between_start
	// Triggers the schedule every n minutes within a given time frame - specifying the end time on any valid day in 24h format (e.g. 14:22:44). Conflicts with `cron` and `time`. Required with `interval_minutes` and `between_start`
	BetweenEnd *string `json:"betweenEnd,omitempty" tf:"between_end,omitempty"`

	// specifying the start time on any valid day in 24h format (e.g. 13:22:44). Conflicts with cron and time. Required with interval_minutes and between_end
	// Triggers the schedule every n minutes within a given time frame - specifying the start time on any valid day in 24h format (e.g. 13:22:44). Conflicts with `cron` and `time`. Required with `interval_minutes` and `between_end`
	BetweenStart *string `json:"betweenStart,omitempty" tf:"between_start,omitempty"`

	// (String) Configures using cron syntax. Conflicts with time, interval_minutes, between_start and between_end
	// Configures using cron syntax. Conflicts with `time`, `interval_minutes`, `between_start` and `between_end`
	Cron *string `json:"cron,omitempty" tf:"cron,omitempty"`

	// (Number) Triggers the schedule every n minutes within a given time frame. Minimum: 1, Maximum: 720. Required with between_start and between_end. Conflicts with cron and time
	// Triggers the schedule every n minutes within a given time frame. Minimum: 1, Maximum: 720. Required with `between_start` and `between_end`. Conflicts with `cron` and `time`
	IntervalMinutes *float64 `json:"intervalMinutes,omitempty" tf:"interval_minutes,omitempty"`

	// (String) Specifies a fixed time the schedule will trigger at in 24h format (e.g. 14:23:59). Conflicts with cron, interval_minutes, between_start and between_end
	// Specifies a fixed time the schedule will trigger at in 24h format (e.g. `14:23:59`). Conflicts with `cron`, `interval_minutes`, `between_start` and `between_end`
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type ScheduleTriggerObservation struct {

	// specifying the end time on any valid day in 24h format (e.g. 14:22:44). Conflicts with cron and time. Required with interval_minutes and between_start
	// Triggers the schedule every n minutes within a given time frame - specifying the end time on any valid day in 24h format (e.g. 14:22:44). Conflicts with `cron` and `time`. Required with `interval_minutes` and `between_start`
	BetweenEnd *string `json:"betweenEnd,omitempty" tf:"between_end,omitempty"`

	// specifying the start time on any valid day in 24h format (e.g. 13:22:44). Conflicts with cron and time. Required with interval_minutes and between_end
	// Triggers the schedule every n minutes within a given time frame - specifying the start time on any valid day in 24h format (e.g. 13:22:44). Conflicts with `cron` and `time`. Required with `interval_minutes` and `between_end`
	BetweenStart *string `json:"betweenStart,omitempty" tf:"between_start,omitempty"`

	// (String) Configures using cron syntax. Conflicts with time, interval_minutes, between_start and between_end
	// Configures using cron syntax. Conflicts with `time`, `interval_minutes`, `between_start` and `between_end`
	Cron *string `json:"cron,omitempty" tf:"cron,omitempty"`

	// (Number) Triggers the schedule every n minutes within a given time frame. Minimum: 1, Maximum: 720. Required with between_start and between_end. Conflicts with cron and time
	// Triggers the schedule every n minutes within a given time frame. Minimum: 1, Maximum: 720. Required with `between_start` and `between_end`. Conflicts with `cron` and `time`
	IntervalMinutes *float64 `json:"intervalMinutes,omitempty" tf:"interval_minutes,omitempty"`

	// (String) Specifies a fixed time the schedule will trigger at in 24h format (e.g. 14:23:59). Conflicts with cron, interval_minutes, between_start and between_end
	// Specifies a fixed time the schedule will trigger at in 24h format (e.g. `14:23:59`). Conflicts with `cron`, `interval_minutes`, `between_start` and `between_end`
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type ScheduleTriggerParameters struct {

	// specifying the end time on any valid day in 24h format (e.g. 14:22:44). Conflicts with cron and time. Required with interval_minutes and between_start
	// Triggers the schedule every n minutes within a given time frame - specifying the end time on any valid day in 24h format (e.g. 14:22:44). Conflicts with `cron` and `time`. Required with `interval_minutes` and `between_start`
	// +kubebuilder:validation:Optional
	BetweenEnd *string `json:"betweenEnd,omitempty" tf:"between_end,omitempty"`

	// specifying the start time on any valid day in 24h format (e.g. 13:22:44). Conflicts with cron and time. Required with interval_minutes and between_end
	// Triggers the schedule every n minutes within a given time frame - specifying the start time on any valid day in 24h format (e.g. 13:22:44). Conflicts with `cron` and `time`. Required with `interval_minutes` and `between_end`
	// +kubebuilder:validation:Optional
	BetweenStart *string `json:"betweenStart,omitempty" tf:"between_start,omitempty"`

	// (String) Configures using cron syntax. Conflicts with time, interval_minutes, between_start and between_end
	// Configures using cron syntax. Conflicts with `time`, `interval_minutes`, `between_start` and `between_end`
	// +kubebuilder:validation:Optional
	Cron *string `json:"cron,omitempty" tf:"cron,omitempty"`

	// (Number) Triggers the schedule every n minutes within a given time frame. Minimum: 1, Maximum: 720. Required with between_start and between_end. Conflicts with cron and time
	// Triggers the schedule every n minutes within a given time frame. Minimum: 1, Maximum: 720. Required with `between_start` and `between_end`. Conflicts with `cron` and `time`
	// +kubebuilder:validation:Optional
	IntervalMinutes *float64 `json:"intervalMinutes,omitempty" tf:"interval_minutes,omitempty"`

	// (String) Specifies a fixed time the schedule will trigger at in 24h format (e.g. 14:23:59). Conflicts with cron, interval_minutes, between_start and between_end
	// Specifies a fixed time the schedule will trigger at in 24h format (e.g. `14:23:59`). Conflicts with `cron`, `interval_minutes`, `between_start` and `between_end`
	// +kubebuilder:validation:Optional
	Time *string `json:"time,omitempty" tf:"time,omitempty"`
}

type TaskInitParameters struct {

	// function, dynatrace.automations:run-javascript and dynatrace.automations:execute-dql-query
	// Currently known and supported values are `dynatrace.automations:http-function`, `dynatrace.automations:run-javascript` and `dynatrace.automations:execute-dql-query`
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (Boolean) Specifies whether a task should be skipped as a no operation or not
	// Specifies whether a task should be skipped as a no operation or not
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) Required if with_items is specified. By default loops execute sequentially with concurrency set to 1. You can increase how often it runs in parallel
	// Required if `with_items` is specified. By default loops execute sequentially with concurrency set to 1. You can increase how often it runs in parallel
	Concurrency *string `json:"concurrency,omitempty" tf:"concurrency,omitempty"`

	// (Block List, Max: 1) Conditions that have to be met in order to execute that task (see below for nested schema)
	// Conditions that have to be met in order to execute that task
	Conditions []ConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) An optional description for the workflow
	// A description for this task
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// determined by the attribute action
	// Parameters and values for this task as JSON code. Contents depend on the kind of task - determined by the attribute `action`
	Input *string `json:"input,omitempty" tf:"input,omitempty"`

	// (String) The name of the task
	// The name of the task
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Layouting information about the task tile when visualized. If not specified Dynatrace will position the task tiles automatically (see below for nested schema)
	// Layouting information about the task tile when visualized. If not specified Dynatrace will position the task tiles automatically
	Position []PositionInitParameters `json:"position,omitempty" tf:"position,omitempty"`

	// (Block List, Max: 1) Configure whether to automatically rerun the task on failure. If not specified no retries will be attempted (see below for nested schema)
	// Configure whether to automatically rerun the task on failure. If not specified no retries will be attempted
	Retry []RetryInitParameters `json:"retry,omitempty" tf:"retry,omitempty"`

	// (String) Specifies a default task timeout in seconds. 15 * 60 (15min) is used when not set. Minimum 1. Maximum 604800
	// Specifies a default task timeout in seconds. 15 * 60 (15min) is used when not set. Minimum 1. Maximum 604800
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// with the current number available for scripting using the expression {{ _.item }}
	// Iterates over items in a list, allowing actions to be executed repeatedly. Example: Specifying `item in [1, 2, 3]` here will execute the task three times for the numbers 1, 2 and 3 - with the current number available for scripting using the expression `{{ _.item }}`
	WithItems *string `json:"withItems,omitempty" tf:"with_items,omitempty"`
}

type TaskObservation struct {

	// function, dynatrace.automations:run-javascript and dynatrace.automations:execute-dql-query
	// Currently known and supported values are `dynatrace.automations:http-function`, `dynatrace.automations:run-javascript` and `dynatrace.automations:execute-dql-query`
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// (Boolean) Specifies whether a task should be skipped as a no operation or not
	// Specifies whether a task should be skipped as a no operation or not
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) Required if with_items is specified. By default loops execute sequentially with concurrency set to 1. You can increase how often it runs in parallel
	// Required if `with_items` is specified. By default loops execute sequentially with concurrency set to 1. You can increase how often it runs in parallel
	Concurrency *string `json:"concurrency,omitempty" tf:"concurrency,omitempty"`

	// (Block List, Max: 1) Conditions that have to be met in order to execute that task (see below for nested schema)
	// Conditions that have to be met in order to execute that task
	Conditions []ConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) An optional description for the workflow
	// A description for this task
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// determined by the attribute action
	// Parameters and values for this task as JSON code. Contents depend on the kind of task - determined by the attribute `action`
	Input *string `json:"input,omitempty" tf:"input,omitempty"`

	// (String) The name of the task
	// The name of the task
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Layouting information about the task tile when visualized. If not specified Dynatrace will position the task tiles automatically (see below for nested schema)
	// Layouting information about the task tile when visualized. If not specified Dynatrace will position the task tiles automatically
	Position []PositionObservation `json:"position,omitempty" tf:"position,omitempty"`

	// (Block List, Max: 1) Configure whether to automatically rerun the task on failure. If not specified no retries will be attempted (see below for nested schema)
	// Configure whether to automatically rerun the task on failure. If not specified no retries will be attempted
	Retry []RetryObservation `json:"retry,omitempty" tf:"retry,omitempty"`

	// (String) Specifies a default task timeout in seconds. 15 * 60 (15min) is used when not set. Minimum 1. Maximum 604800
	// Specifies a default task timeout in seconds. 15 * 60 (15min) is used when not set. Minimum 1. Maximum 604800
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// with the current number available for scripting using the expression {{ _.item }}
	// Iterates over items in a list, allowing actions to be executed repeatedly. Example: Specifying `item in [1, 2, 3]` here will execute the task three times for the numbers 1, 2 and 3 - with the current number available for scripting using the expression `{{ _.item }}`
	WithItems *string `json:"withItems,omitempty" tf:"with_items,omitempty"`
}

type TaskParameters struct {

	// function, dynatrace.automations:run-javascript and dynatrace.automations:execute-dql-query
	// Currently known and supported values are `dynatrace.automations:http-function`, `dynatrace.automations:run-javascript` and `dynatrace.automations:execute-dql-query`
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// (Boolean) Specifies whether a task should be skipped as a no operation or not
	// Specifies whether a task should be skipped as a no operation or not
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) Required if with_items is specified. By default loops execute sequentially with concurrency set to 1. You can increase how often it runs in parallel
	// Required if `with_items` is specified. By default loops execute sequentially with concurrency set to 1. You can increase how often it runs in parallel
	// +kubebuilder:validation:Optional
	Concurrency *string `json:"concurrency,omitempty" tf:"concurrency,omitempty"`

	// (Block List, Max: 1) Conditions that have to be met in order to execute that task (see below for nested schema)
	// Conditions that have to be met in order to execute that task
	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) An optional description for the workflow
	// A description for this task
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// determined by the attribute action
	// Parameters and values for this task as JSON code. Contents depend on the kind of task - determined by the attribute `action`
	// +kubebuilder:validation:Optional
	Input *string `json:"input,omitempty" tf:"input,omitempty"`

	// (String) The name of the task
	// The name of the task
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Block List, Max: 1) Layouting information about the task tile when visualized. If not specified Dynatrace will position the task tiles automatically (see below for nested schema)
	// Layouting information about the task tile when visualized. If not specified Dynatrace will position the task tiles automatically
	// +kubebuilder:validation:Optional
	Position []PositionParameters `json:"position,omitempty" tf:"position,omitempty"`

	// (Block List, Max: 1) Configure whether to automatically rerun the task on failure. If not specified no retries will be attempted (see below for nested schema)
	// Configure whether to automatically rerun the task on failure. If not specified no retries will be attempted
	// +kubebuilder:validation:Optional
	Retry []RetryParameters `json:"retry,omitempty" tf:"retry,omitempty"`

	// (String) Specifies a default task timeout in seconds. 15 * 60 (15min) is used when not set. Minimum 1. Maximum 604800
	// Specifies a default task timeout in seconds. 15 * 60 (15min) is used when not set. Minimum 1. Maximum 604800
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// with the current number available for scripting using the expression {{ _.item }}
	// Iterates over items in a list, allowing actions to be executed repeatedly. Example: Specifying `item in [1, 2, 3]` here will execute the task three times for the numbers 1, 2 and 3 - with the current number available for scripting using the expression `{{ _.item }}`
	// +kubebuilder:validation:Optional
	WithItems *string `json:"withItems,omitempty" tf:"with_items,omitempty"`
}

type TasksInitParameters struct {

	// (Block Set) TODO: No documentation available (see below for nested schema)
	// TODO: No documentation available
	Task []TaskInitParameters `json:"task,omitempty" tf:"task,omitempty"`
}

type TasksObservation struct {

	// (Block Set) TODO: No documentation available (see below for nested schema)
	// TODO: No documentation available
	Task []TaskObservation `json:"task,omitempty" tf:"task,omitempty"`
}

type TasksParameters struct {

	// (Block Set) TODO: No documentation available (see below for nested schema)
	// TODO: No documentation available
	// +kubebuilder:validation:Optional
	Task []TaskParameters `json:"task,omitempty" tf:"task,omitempty"`
}

type TriggerInitParameters struct {

	// (Block List, Max: 1) If specified the workflow is getting triggered based on events (see below for nested schema)
	// If specified the workflow is getting triggered based on events
	Event []EventInitParameters `json:"event,omitempty" tf:"event,omitempty"`

	// (Block List, Max: 1) If specified the workflow is getting triggered based on a schedule (see below for nested schema)
	// If specified the workflow is getting triggered based on a schedule
	Schedule []ScheduleInitParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type TriggerObservation struct {

	// (Block List, Max: 1) If specified the workflow is getting triggered based on events (see below for nested schema)
	// If specified the workflow is getting triggered based on events
	Event []EventObservation `json:"event,omitempty" tf:"event,omitempty"`

	// (Block List, Max: 1) If specified the workflow is getting triggered based on a schedule (see below for nested schema)
	// If specified the workflow is getting triggered based on a schedule
	Schedule []ScheduleObservation `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

type TriggerParameters struct {

	// (Block List, Max: 1) If specified the workflow is getting triggered based on events (see below for nested schema)
	// If specified the workflow is getting triggered based on events
	// +kubebuilder:validation:Optional
	Event []EventParameters `json:"event,omitempty" tf:"event,omitempty"`

	// (Block List, Max: 1) If specified the workflow is getting triggered based on a schedule (see below for nested schema)
	// If specified the workflow is getting triggered based on a schedule
	// +kubebuilder:validation:Optional
	Schedule []ScheduleParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`
}

// AutomationWorkflowSpec defines the desired state of AutomationWorkflow
type AutomationWorkflowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AutomationWorkflowParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AutomationWorkflowInitParameters `json:"initProvider,omitempty"`
}

// AutomationWorkflowStatus defines the observed state of AutomationWorkflow.
type AutomationWorkflowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AutomationWorkflowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AutomationWorkflow is the Schema for the AutomationWorkflows API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type AutomationWorkflow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tasks) || (has(self.initProvider) && has(self.initProvider.tasks))",message="spec.forProvider.tasks is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.title) || (has(self.initProvider) && has(self.initProvider.title))",message="spec.forProvider.title is a required parameter"
	Spec   AutomationWorkflowSpec   `json:"spec"`
	Status AutomationWorkflowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutomationWorkflowList contains a list of AutomationWorkflows
type AutomationWorkflowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutomationWorkflow `json:"items"`
}

// Repository type metadata.
var (
	AutomationWorkflow_Kind             = "AutomationWorkflow"
	AutomationWorkflow_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AutomationWorkflow_Kind}.String()
	AutomationWorkflow_KindAPIVersion   = AutomationWorkflow_Kind + "." + CRDGroupVersion.String()
	AutomationWorkflow_GroupVersionKind = CRDGroupVersion.WithKind(AutomationWorkflow_Kind)
)

func init() {
	SchemeBuilder.Register(&AutomationWorkflow{}, &AutomationWorkflowList{})
}
