// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertingProfileInitParameters struct {

	// (String) The name of the alerting profile, displayed in the UI
	// The name of the alerting profile, displayed in the UI
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// negated ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies (see below for nested schema)
	// The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
	EventTypeFilters []EventTypeFiltersInitParameters `json:"eventTypeFilters,omitempty" tf:"event_type_filters,omitempty"`

	// (Block List, Max: 1, Deprecated) metadata exists for backwards compatibility but shouldn't get specified anymore (see below for nested schema)
	// `metadata` exists for backwards compatibility but shouldn't get specified anymore
	Metadata []MetadataInitParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The ID of the management zone to which the alerting profile applies
	// The ID of the management zone to which the alerting profile applies
	MzID *string `json:"mzId,omitempty" tf:"mz_id,omitempty"`

	// (Block List) A list of rules for management zone usage.  Each rule is evaluated independently of all other rules (see below for nested schema)
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type AlertingProfileObservation struct {

	// (String) The name of the alerting profile, displayed in the UI
	// The name of the alerting profile, displayed in the UI
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// negated ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies (see below for nested schema)
	// The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
	EventTypeFilters []EventTypeFiltersObservation `json:"eventTypeFilters,omitempty" tf:"event_type_filters,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1, Deprecated) metadata exists for backwards compatibility but shouldn't get specified anymore (see below for nested schema)
	// `metadata` exists for backwards compatibility but shouldn't get specified anymore
	Metadata []MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The ID of the management zone to which the alerting profile applies
	// The ID of the management zone to which the alerting profile applies
	MzID *string `json:"mzId,omitempty" tf:"mz_id,omitempty"`

	// (Block List) A list of rules for management zone usage.  Each rule is evaluated independently of all other rules (see below for nested schema)
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type AlertingProfileParameters struct {

	// (String) The name of the alerting profile, displayed in the UI
	// The name of the alerting profile, displayed in the UI
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// negated ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies (see below for nested schema)
	// The list of event filters.  For all filters that are *negated* inside of these event filters, that is all `Predefined` as well as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.  If you specify both severity rule and event filter, the AND logic applies
	// +kubebuilder:validation:Optional
	EventTypeFilters []EventTypeFiltersParameters `json:"eventTypeFilters,omitempty" tf:"event_type_filters,omitempty"`

	// (Block List, Max: 1, Deprecated) metadata exists for backwards compatibility but shouldn't get specified anymore (see below for nested schema)
	// `metadata` exists for backwards compatibility but shouldn't get specified anymore
	// +kubebuilder:validation:Optional
	Metadata []MetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The ID of the management zone to which the alerting profile applies
	// The ID of the management zone to which the alerting profile applies
	// +kubebuilder:validation:Optional
	MzID *string `json:"mzId,omitempty" tf:"mz_id,omitempty"`

	// (Block List) A list of rules for management zone usage.  Each rule is evaluated independently of all other rules (see below for nested schema)
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomDescriptionFilterInitParameters struct {

	// (Boolean) The condition is case sensitive (false) or case insensitive (true).   If not set, then false is used, making the condition case sensitive
	// The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
	CaseInsensitive *bool `json:"caseInsensitive,omitempty" tf:"case_insensitive,omitempty"`

	// (Boolean) The filter is enabled (true) or disabled (false)
	// The filter is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Reverses the comparison operator. For example it turns the begins with into does not begin with
	// Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison.   You can reverse it by setting negate to true. Possible values are BEGINS_WITH, CONTAINS, CONTAINS_REGEX, ENDS_WITH and EQUALS
	// Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `CONTAINS_REGEX`, `ENDS_WITH` and `EQUALS`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomDescriptionFilterObservation struct {

	// (Boolean) The condition is case sensitive (false) or case insensitive (true).   If not set, then false is used, making the condition case sensitive
	// The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
	CaseInsensitive *bool `json:"caseInsensitive,omitempty" tf:"case_insensitive,omitempty"`

	// (Boolean) The filter is enabled (true) or disabled (false)
	// The filter is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Reverses the comparison operator. For example it turns the begins with into does not begin with
	// Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison.   You can reverse it by setting negate to true. Possible values are BEGINS_WITH, CONTAINS, CONTAINS_REGEX, ENDS_WITH and EQUALS
	// Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `CONTAINS_REGEX`, `ENDS_WITH` and `EQUALS`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomDescriptionFilterParameters struct {

	// (Boolean) The condition is case sensitive (false) or case insensitive (true).   If not set, then false is used, making the condition case sensitive
	// The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
	// +kubebuilder:validation:Optional
	CaseInsensitive *bool `json:"caseInsensitive,omitempty" tf:"case_insensitive,omitempty"`

	// (Boolean) The filter is enabled (true) or disabled (false)
	// The filter is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Reverses the comparison operator. For example it turns the begins with into does not begin with
	// Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison.   You can reverse it by setting negate to true. Possible values are BEGINS_WITH, CONTAINS, CONTAINS_REGEX, ENDS_WITH and EQUALS
	// Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `CONTAINS_REGEX`, `ENDS_WITH` and `EQUALS`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type CustomEventFilterInitParameters struct {

	// (Block List) Configuration of a matching filter (see below for nested schema)
	// Configuration of a matching filter
	CustomDescriptionFilter []CustomDescriptionFilterInitParameters `json:"customDescriptionFilter,omitempty" tf:"custom_description_filter,omitempty"`

	// (Block List) Configuration of a matching filter (see below for nested schema)
	// Configuration of a matching filter
	CustomTitleFilter []CustomTitleFilterInitParameters `json:"customTitleFilter,omitempty" tf:"custom_title_filter,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomEventFilterObservation struct {

	// (Block List) Configuration of a matching filter (see below for nested schema)
	// Configuration of a matching filter
	CustomDescriptionFilter []CustomDescriptionFilterObservation `json:"customDescriptionFilter,omitempty" tf:"custom_description_filter,omitempty"`

	// (Block List) Configuration of a matching filter (see below for nested schema)
	// Configuration of a matching filter
	CustomTitleFilter []CustomTitleFilterObservation `json:"customTitleFilter,omitempty" tf:"custom_title_filter,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomEventFilterParameters struct {

	// (Block List) Configuration of a matching filter (see below for nested schema)
	// Configuration of a matching filter
	// +kubebuilder:validation:Optional
	CustomDescriptionFilter []CustomDescriptionFilterParameters `json:"customDescriptionFilter,omitempty" tf:"custom_description_filter,omitempty"`

	// (Block List) Configuration of a matching filter (see below for nested schema)
	// Configuration of a matching filter
	// +kubebuilder:validation:Optional
	CustomTitleFilter []CustomTitleFilterParameters `json:"customTitleFilter,omitempty" tf:"custom_title_filter,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomTitleFilterInitParameters struct {

	// (Boolean) The condition is case sensitive (false) or case insensitive (true).   If not set, then false is used, making the condition case sensitive
	// The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
	CaseInsensitive *bool `json:"caseInsensitive,omitempty" tf:"case_insensitive,omitempty"`

	// (Boolean) The filter is enabled (true) or disabled (false)
	// The filter is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Reverses the comparison operator. For example it turns the begins with into does not begin with
	// Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison.   You can reverse it by setting negate to true. Possible values are BEGINS_WITH, CONTAINS, CONTAINS_REGEX, ENDS_WITH and EQUALS
	// Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `CONTAINS_REGEX`, `ENDS_WITH` and `EQUALS`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomTitleFilterObservation struct {

	// (Boolean) The condition is case sensitive (false) or case insensitive (true).   If not set, then false is used, making the condition case sensitive
	// The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
	CaseInsensitive *bool `json:"caseInsensitive,omitempty" tf:"case_insensitive,omitempty"`

	// (Boolean) The filter is enabled (true) or disabled (false)
	// The filter is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Reverses the comparison operator. For example it turns the begins with into does not begin with
	// Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison.   You can reverse it by setting negate to true. Possible values are BEGINS_WITH, CONTAINS, CONTAINS_REGEX, ENDS_WITH and EQUALS
	// Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `CONTAINS_REGEX`, `ENDS_WITH` and `EQUALS`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomTitleFilterParameters struct {

	// (Boolean) The condition is case sensitive (false) or case insensitive (true).   If not set, then false is used, making the condition case sensitive
	// The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
	// +kubebuilder:validation:Optional
	CaseInsensitive *bool `json:"caseInsensitive,omitempty" tf:"case_insensitive,omitempty"`

	// (Boolean) The filter is enabled (true) or disabled (false)
	// The filter is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Boolean) Reverses the comparison operator. For example it turns the begins with into does not begin with
	// Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison.   You can reverse it by setting negate to true. Possible values are BEGINS_WITH, CONTAINS, CONTAINS_REGEX, ENDS_WITH and EQUALS
	// Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `CONTAINS_REGEX`, `ENDS_WITH` and `EQUALS`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type EventTypeFiltersInitParameters struct {

	// (Block List) Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies (see below for nested schema)
	// Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
	CustomEventFilter []CustomEventFilterInitParameters `json:"customEventFilter,omitempty" tf:"custom_event_filter,omitempty"`

	// (Block List) Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies (see below for nested schema)
	// Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
	PredefinedEventFilter []PredefinedEventFilterInitParameters `json:"predefinedEventFilter,omitempty" tf:"predefined_event_filter,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type EventTypeFiltersObservation struct {

	// (Block List) Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies (see below for nested schema)
	// Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
	CustomEventFilter []CustomEventFilterObservation `json:"customEventFilter,omitempty" tf:"custom_event_filter,omitempty"`

	// (Block List) Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies (see below for nested schema)
	// Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
	PredefinedEventFilter []PredefinedEventFilterObservation `json:"predefinedEventFilter,omitempty" tf:"predefined_event_filter,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type EventTypeFiltersParameters struct {

	// (Block List) Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies (see below for nested schema)
	// Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
	// +kubebuilder:validation:Optional
	CustomEventFilter []CustomEventFilterParameters `json:"customEventFilter,omitempty" tf:"custom_event_filter,omitempty"`

	// (Block List) Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies (see below for nested schema)
	// Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
	// +kubebuilder:validation:Optional
	PredefinedEventFilter []PredefinedEventFilterParameters `json:"predefinedEventFilter,omitempty" tf:"predefined_event_filter,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type MetadataInitParameters struct {

	// (String) Dynatrace server version
	// Dynatrace server version
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// (List of Number) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	ConfigurationVersions []*float64 `json:"configurationVersions,omitempty" tf:"configuration_versions,omitempty"`

	// (List of String) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	CurrentConfigurationVersions []*string `json:"currentConfigurationVersions,omitempty" tf:"current_configuration_versions,omitempty"`
}

type MetadataObservation struct {

	// (String) Dynatrace server version
	// Dynatrace server version
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// (List of Number) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	ConfigurationVersions []*float64 `json:"configurationVersions,omitempty" tf:"configuration_versions,omitempty"`

	// (List of String) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	CurrentConfigurationVersions []*string `json:"currentConfigurationVersions,omitempty" tf:"current_configuration_versions,omitempty"`
}

type MetadataParameters struct {

	// (String) Dynatrace server version
	// Dynatrace server version
	// +kubebuilder:validation:Optional
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// (List of Number) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	// +kubebuilder:validation:Optional
	ConfigurationVersions []*float64 `json:"configurationVersions,omitempty" tf:"configuration_versions,omitempty"`

	// (List of String) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	// +kubebuilder:validation:Optional
	CurrentConfigurationVersions []*string `json:"currentConfigurationVersions,omitempty" tf:"current_configuration_versions,omitempty"`
}

type PredefinedEventFilterInitParameters struct {

	// (String) The type of the predefined event. Possible values are APPLICATION_ERROR_RATE_INCREASED, APPLICATION_SLOWDOWN, APPLICATION_UNEXPECTED_HIGH_LOAD, APPLICATION_UNEXPECTED_LOW_LOAD, AWS_LAMBDA_HIGH_ERROR_RATE, CUSTOM_APPLICATION_ERROR_RATE_INCREASED, CUSTOM_APPLICATION_SLOWDOWN, CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD, CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD, CUSTOM_APP_CRASH_RATE_INCREASED, DATABASE_CONNECTION_FAILURE, DATA_CENTER_SERVICE_PERFORMANCE_DEGRADATION, DATA_CENTER_SERVICE_UNAVAILABLE, EBS_VOLUME_HIGH_LATENCY, EC2_HIGH_CPU, ELB_HIGH_BACKEND_ERROR_RATE, ENTERPRICE_APPLICATION_PERFORMANCE_DEGRADATION, ENTERPRISE_APPLICATION_UNAVAILABLE, ESXI_GUEST_ACTIVE_SWAP_WAIT, ESXI_GUEST_CPU_LIMIT_REACHED, ESXI_HOST_CPU_SATURATION, ESXI_HOST_DATASTORE_LOW_DISK_SPACE, ESXI_HOST_DISK_QUEUE_SLOW, ESXI_HOST_DISK_SLOW, ESXI_HOST_MEMORY_SATURATION, ESXI_HOST_NETWORK_PROBLEMS, ESXI_HOST_OVERLOADED_STORAGE, ESXI_VM_IMPACT_HOST_CPU_SATURATION, ESXI_VM_IMPACT_HOST_MEMORY_SATURATION, EXTERNAL_SYNTHETIC_TEST_OUTAGE, EXTERNAL_SYNTHETIC_TEST_SLOWDOWN, HOST_OF_SERVICE_UNAVAILABLE, HTTP_CHECK_GLOBAL_OUTAGE, HTTP_CHECK_LOCAL_OUTAGE, HTTP_CHECK_TEST_LOCATION_SLOWDOWN, MOBILE_APPLICATION_ERROR_RATE_INCREASED, MOBILE_APPLICATION_SLOWDOWN, MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD, MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD, MOBILE_APP_CRASH_RATE_INCREASED, MONITORING_UNAVAILABLE, OSI_DISK_LOW_INODES, OSI_GRACEFULLY_SHUTDOWN, OSI_HIGH_CPU, OSI_HIGH_MEMORY, OSI_LOW_DISK_SPACE, OSI_NIC_DROPPED_PACKETS_HIGH, OSI_NIC_ERRORS_HIGH, OSI_NIC_UTILIZATION_HIGH, OSI_SLOW_DISK, OSI_UNEXPECTEDLY_UNAVAILABLE, PGI_OF_SERVICE_UNAVAILABLE, PGI_UNAVAILABLE, PG_LOW_INSTANCE_COUNT, PROCESS_CRASHED, PROCESS_HIGH_GC_ACTIVITY, PROCESS_MEMORY_RESOURCE_EXHAUSTED, PROCESS_NA_HIGH_CONN_FAIL_RATE, PROCESS_NA_HIGH_LOSS_RATE, PROCESS_THREADS_RESOURCE_EXHAUSTED, RDS_HIGH_CPU, RDS_HIGH_LATENCY, RDS_LOW_MEMORY, RDS_LOW_STORAGE_SPACE, RDS_OF_SERVICE_UNAVAILABLE, RDS_RESTART_SEQUENCE, SERVICE_ERROR_RATE_INCREASED, SERVICE_SLOWDOWN, SERVICE_UNEXPECTED_HIGH_LOAD, SERVICE_UNEXPECTED_LOW_LOAD, SYNTHETIC_GLOBAL_OUTAGE, SYNTHETIC_LOCAL_OUTAGE, SYNTHETIC_NODE_OUTAGE, SYNTHETIC_PRIVATE_LOCATION_OUTAGE and SYNTHETIC_TEST_LOCATION_SLOWDOWN
	// The type of the predefined event. Possible values are `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_SLOWDOWN`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_SLOWDOWN`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `DATABASE_CONNECTION_FAILURE`, `DATA_CENTER_SERVICE_PERFORMANCE_DEGRADATION`, `DATA_CENTER_SERVICE_UNAVAILABLE`, `EBS_VOLUME_HIGH_LATENCY`, `EC2_HIGH_CPU`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ENTERPRICE_APPLICATION_PERFORMANCE_DEGRADATION`, `ENTERPRISE_APPLICATION_UNAVAILABLE`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `ESXI_HOST_DISK_QUEUE_SLOW`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_OVERLOADED_STORAGE`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MONITORING_UNAVAILABLE`, `OSI_DISK_LOW_INODES`, `OSI_GRACEFULLY_SHUTDOWN`, `OSI_HIGH_CPU`, `OSI_HIGH_MEMORY`, `OSI_LOW_DISK_SPACE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `OSI_NIC_ERRORS_HIGH`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_SLOW_DISK`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `PGI_OF_SERVICE_UNAVAILABLE`, `PGI_UNAVAILABLE`, `PG_LOW_INSTANCE_COUNT`, `PROCESS_CRASHED`, `PROCESS_HIGH_GC_ACTIVITY`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `RDS_HIGH_CPU`, `RDS_HIGH_LATENCY`, `RDS_LOW_MEMORY`, `RDS_LOW_STORAGE_SPACE`, `RDS_OF_SERVICE_UNAVAILABLE`, `RDS_RESTART_SEQUENCE`, `SERVICE_ERROR_RATE_INCREASED`, `SERVICE_SLOWDOWN`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE` and `SYNTHETIC_TEST_LOCATION_SLOWDOWN`
	EventType *string `json:"eventType,omitempty" tf:"event_type,omitempty"`

	// (Boolean) Reverses the comparison operator. For example it turns the begins with into does not begin with
	// The alert triggers when the problem of specified severity arises while the specified event **is** happening (`false`) or while the specified event is **not** happening (`true`).   For example, if you chose the Slowdown (`PERFORMANCE`) severity and Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event with **negate** set to `true`, the alerting profile will trigger only when the slowdown problem is raised while there is no unexpected high traffic event.  Consider the following use case as an example. The Slowdown (`PERFORMANCE`) severity rule is set. Depending on the configuration of the event filter (Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event is used as an example), the behavior of the alerting profile is one of the following:* **negate** is set to `false`: The alert triggers when the slowdown problem is raised while unexpected high traffic event is happening.  * **negate** is set to `true`: The alert triggers when the slowdown problem is raised while there is no unexpected high traffic event.  * no event rule is set: The alert triggers when the slowdown problem is raised, regardless of any events
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type PredefinedEventFilterObservation struct {

	// (String) The type of the predefined event. Possible values are APPLICATION_ERROR_RATE_INCREASED, APPLICATION_SLOWDOWN, APPLICATION_UNEXPECTED_HIGH_LOAD, APPLICATION_UNEXPECTED_LOW_LOAD, AWS_LAMBDA_HIGH_ERROR_RATE, CUSTOM_APPLICATION_ERROR_RATE_INCREASED, CUSTOM_APPLICATION_SLOWDOWN, CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD, CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD, CUSTOM_APP_CRASH_RATE_INCREASED, DATABASE_CONNECTION_FAILURE, DATA_CENTER_SERVICE_PERFORMANCE_DEGRADATION, DATA_CENTER_SERVICE_UNAVAILABLE, EBS_VOLUME_HIGH_LATENCY, EC2_HIGH_CPU, ELB_HIGH_BACKEND_ERROR_RATE, ENTERPRICE_APPLICATION_PERFORMANCE_DEGRADATION, ENTERPRISE_APPLICATION_UNAVAILABLE, ESXI_GUEST_ACTIVE_SWAP_WAIT, ESXI_GUEST_CPU_LIMIT_REACHED, ESXI_HOST_CPU_SATURATION, ESXI_HOST_DATASTORE_LOW_DISK_SPACE, ESXI_HOST_DISK_QUEUE_SLOW, ESXI_HOST_DISK_SLOW, ESXI_HOST_MEMORY_SATURATION, ESXI_HOST_NETWORK_PROBLEMS, ESXI_HOST_OVERLOADED_STORAGE, ESXI_VM_IMPACT_HOST_CPU_SATURATION, ESXI_VM_IMPACT_HOST_MEMORY_SATURATION, EXTERNAL_SYNTHETIC_TEST_OUTAGE, EXTERNAL_SYNTHETIC_TEST_SLOWDOWN, HOST_OF_SERVICE_UNAVAILABLE, HTTP_CHECK_GLOBAL_OUTAGE, HTTP_CHECK_LOCAL_OUTAGE, HTTP_CHECK_TEST_LOCATION_SLOWDOWN, MOBILE_APPLICATION_ERROR_RATE_INCREASED, MOBILE_APPLICATION_SLOWDOWN, MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD, MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD, MOBILE_APP_CRASH_RATE_INCREASED, MONITORING_UNAVAILABLE, OSI_DISK_LOW_INODES, OSI_GRACEFULLY_SHUTDOWN, OSI_HIGH_CPU, OSI_HIGH_MEMORY, OSI_LOW_DISK_SPACE, OSI_NIC_DROPPED_PACKETS_HIGH, OSI_NIC_ERRORS_HIGH, OSI_NIC_UTILIZATION_HIGH, OSI_SLOW_DISK, OSI_UNEXPECTEDLY_UNAVAILABLE, PGI_OF_SERVICE_UNAVAILABLE, PGI_UNAVAILABLE, PG_LOW_INSTANCE_COUNT, PROCESS_CRASHED, PROCESS_HIGH_GC_ACTIVITY, PROCESS_MEMORY_RESOURCE_EXHAUSTED, PROCESS_NA_HIGH_CONN_FAIL_RATE, PROCESS_NA_HIGH_LOSS_RATE, PROCESS_THREADS_RESOURCE_EXHAUSTED, RDS_HIGH_CPU, RDS_HIGH_LATENCY, RDS_LOW_MEMORY, RDS_LOW_STORAGE_SPACE, RDS_OF_SERVICE_UNAVAILABLE, RDS_RESTART_SEQUENCE, SERVICE_ERROR_RATE_INCREASED, SERVICE_SLOWDOWN, SERVICE_UNEXPECTED_HIGH_LOAD, SERVICE_UNEXPECTED_LOW_LOAD, SYNTHETIC_GLOBAL_OUTAGE, SYNTHETIC_LOCAL_OUTAGE, SYNTHETIC_NODE_OUTAGE, SYNTHETIC_PRIVATE_LOCATION_OUTAGE and SYNTHETIC_TEST_LOCATION_SLOWDOWN
	// The type of the predefined event. Possible values are `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_SLOWDOWN`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_SLOWDOWN`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `DATABASE_CONNECTION_FAILURE`, `DATA_CENTER_SERVICE_PERFORMANCE_DEGRADATION`, `DATA_CENTER_SERVICE_UNAVAILABLE`, `EBS_VOLUME_HIGH_LATENCY`, `EC2_HIGH_CPU`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ENTERPRICE_APPLICATION_PERFORMANCE_DEGRADATION`, `ENTERPRISE_APPLICATION_UNAVAILABLE`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `ESXI_HOST_DISK_QUEUE_SLOW`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_OVERLOADED_STORAGE`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MONITORING_UNAVAILABLE`, `OSI_DISK_LOW_INODES`, `OSI_GRACEFULLY_SHUTDOWN`, `OSI_HIGH_CPU`, `OSI_HIGH_MEMORY`, `OSI_LOW_DISK_SPACE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `OSI_NIC_ERRORS_HIGH`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_SLOW_DISK`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `PGI_OF_SERVICE_UNAVAILABLE`, `PGI_UNAVAILABLE`, `PG_LOW_INSTANCE_COUNT`, `PROCESS_CRASHED`, `PROCESS_HIGH_GC_ACTIVITY`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `RDS_HIGH_CPU`, `RDS_HIGH_LATENCY`, `RDS_LOW_MEMORY`, `RDS_LOW_STORAGE_SPACE`, `RDS_OF_SERVICE_UNAVAILABLE`, `RDS_RESTART_SEQUENCE`, `SERVICE_ERROR_RATE_INCREASED`, `SERVICE_SLOWDOWN`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE` and `SYNTHETIC_TEST_LOCATION_SLOWDOWN`
	EventType *string `json:"eventType,omitempty" tf:"event_type,omitempty"`

	// (Boolean) Reverses the comparison operator. For example it turns the begins with into does not begin with
	// The alert triggers when the problem of specified severity arises while the specified event **is** happening (`false`) or while the specified event is **not** happening (`true`).   For example, if you chose the Slowdown (`PERFORMANCE`) severity and Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event with **negate** set to `true`, the alerting profile will trigger only when the slowdown problem is raised while there is no unexpected high traffic event.  Consider the following use case as an example. The Slowdown (`PERFORMANCE`) severity rule is set. Depending on the configuration of the event filter (Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event is used as an example), the behavior of the alerting profile is one of the following:* **negate** is set to `false`: The alert triggers when the slowdown problem is raised while unexpected high traffic event is happening.  * **negate** is set to `true`: The alert triggers when the slowdown problem is raised while there is no unexpected high traffic event.  * no event rule is set: The alert triggers when the slowdown problem is raised, regardless of any events
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type PredefinedEventFilterParameters struct {

	// (String) The type of the predefined event. Possible values are APPLICATION_ERROR_RATE_INCREASED, APPLICATION_SLOWDOWN, APPLICATION_UNEXPECTED_HIGH_LOAD, APPLICATION_UNEXPECTED_LOW_LOAD, AWS_LAMBDA_HIGH_ERROR_RATE, CUSTOM_APPLICATION_ERROR_RATE_INCREASED, CUSTOM_APPLICATION_SLOWDOWN, CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD, CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD, CUSTOM_APP_CRASH_RATE_INCREASED, DATABASE_CONNECTION_FAILURE, DATA_CENTER_SERVICE_PERFORMANCE_DEGRADATION, DATA_CENTER_SERVICE_UNAVAILABLE, EBS_VOLUME_HIGH_LATENCY, EC2_HIGH_CPU, ELB_HIGH_BACKEND_ERROR_RATE, ENTERPRICE_APPLICATION_PERFORMANCE_DEGRADATION, ENTERPRISE_APPLICATION_UNAVAILABLE, ESXI_GUEST_ACTIVE_SWAP_WAIT, ESXI_GUEST_CPU_LIMIT_REACHED, ESXI_HOST_CPU_SATURATION, ESXI_HOST_DATASTORE_LOW_DISK_SPACE, ESXI_HOST_DISK_QUEUE_SLOW, ESXI_HOST_DISK_SLOW, ESXI_HOST_MEMORY_SATURATION, ESXI_HOST_NETWORK_PROBLEMS, ESXI_HOST_OVERLOADED_STORAGE, ESXI_VM_IMPACT_HOST_CPU_SATURATION, ESXI_VM_IMPACT_HOST_MEMORY_SATURATION, EXTERNAL_SYNTHETIC_TEST_OUTAGE, EXTERNAL_SYNTHETIC_TEST_SLOWDOWN, HOST_OF_SERVICE_UNAVAILABLE, HTTP_CHECK_GLOBAL_OUTAGE, HTTP_CHECK_LOCAL_OUTAGE, HTTP_CHECK_TEST_LOCATION_SLOWDOWN, MOBILE_APPLICATION_ERROR_RATE_INCREASED, MOBILE_APPLICATION_SLOWDOWN, MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD, MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD, MOBILE_APP_CRASH_RATE_INCREASED, MONITORING_UNAVAILABLE, OSI_DISK_LOW_INODES, OSI_GRACEFULLY_SHUTDOWN, OSI_HIGH_CPU, OSI_HIGH_MEMORY, OSI_LOW_DISK_SPACE, OSI_NIC_DROPPED_PACKETS_HIGH, OSI_NIC_ERRORS_HIGH, OSI_NIC_UTILIZATION_HIGH, OSI_SLOW_DISK, OSI_UNEXPECTEDLY_UNAVAILABLE, PGI_OF_SERVICE_UNAVAILABLE, PGI_UNAVAILABLE, PG_LOW_INSTANCE_COUNT, PROCESS_CRASHED, PROCESS_HIGH_GC_ACTIVITY, PROCESS_MEMORY_RESOURCE_EXHAUSTED, PROCESS_NA_HIGH_CONN_FAIL_RATE, PROCESS_NA_HIGH_LOSS_RATE, PROCESS_THREADS_RESOURCE_EXHAUSTED, RDS_HIGH_CPU, RDS_HIGH_LATENCY, RDS_LOW_MEMORY, RDS_LOW_STORAGE_SPACE, RDS_OF_SERVICE_UNAVAILABLE, RDS_RESTART_SEQUENCE, SERVICE_ERROR_RATE_INCREASED, SERVICE_SLOWDOWN, SERVICE_UNEXPECTED_HIGH_LOAD, SERVICE_UNEXPECTED_LOW_LOAD, SYNTHETIC_GLOBAL_OUTAGE, SYNTHETIC_LOCAL_OUTAGE, SYNTHETIC_NODE_OUTAGE, SYNTHETIC_PRIVATE_LOCATION_OUTAGE and SYNTHETIC_TEST_LOCATION_SLOWDOWN
	// The type of the predefined event. Possible values are `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_SLOWDOWN`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_SLOWDOWN`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `DATABASE_CONNECTION_FAILURE`, `DATA_CENTER_SERVICE_PERFORMANCE_DEGRADATION`, `DATA_CENTER_SERVICE_UNAVAILABLE`, `EBS_VOLUME_HIGH_LATENCY`, `EC2_HIGH_CPU`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ENTERPRICE_APPLICATION_PERFORMANCE_DEGRADATION`, `ENTERPRISE_APPLICATION_UNAVAILABLE`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `ESXI_HOST_DISK_QUEUE_SLOW`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_OVERLOADED_STORAGE`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MONITORING_UNAVAILABLE`, `OSI_DISK_LOW_INODES`, `OSI_GRACEFULLY_SHUTDOWN`, `OSI_HIGH_CPU`, `OSI_HIGH_MEMORY`, `OSI_LOW_DISK_SPACE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `OSI_NIC_ERRORS_HIGH`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_SLOW_DISK`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `PGI_OF_SERVICE_UNAVAILABLE`, `PGI_UNAVAILABLE`, `PG_LOW_INSTANCE_COUNT`, `PROCESS_CRASHED`, `PROCESS_HIGH_GC_ACTIVITY`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `RDS_HIGH_CPU`, `RDS_HIGH_LATENCY`, `RDS_LOW_MEMORY`, `RDS_LOW_STORAGE_SPACE`, `RDS_OF_SERVICE_UNAVAILABLE`, `RDS_RESTART_SEQUENCE`, `SERVICE_ERROR_RATE_INCREASED`, `SERVICE_SLOWDOWN`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE` and `SYNTHETIC_TEST_LOCATION_SLOWDOWN`
	// +kubebuilder:validation:Optional
	EventType *string `json:"eventType" tf:"event_type,omitempty"`

	// (Boolean) Reverses the comparison operator. For example it turns the begins with into does not begin with
	// The alert triggers when the problem of specified severity arises while the specified event **is** happening (`false`) or while the specified event is **not** happening (`true`).   For example, if you chose the Slowdown (`PERFORMANCE`) severity and Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event with **negate** set to `true`, the alerting profile will trigger only when the slowdown problem is raised while there is no unexpected high traffic event.  Consider the following use case as an example. The Slowdown (`PERFORMANCE`) severity rule is set. Depending on the configuration of the event filter (Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event is used as an example), the behavior of the alerting profile is one of the following:* **negate** is set to `false`: The alert triggers when the slowdown problem is raised while unexpected high traffic event is happening.  * **negate** is set to `true`: The alert triggers when the slowdown problem is raised while there is no unexpected high traffic event.  * no event rule is set: The alert triggers when the slowdown problem is raised, regardless of any events
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type RulesInitParameters struct {

	// (Number) Send a notification if a problem remains open longer than X minutes
	// Send a notification if a problem remains open longer than *X* minutes
	DelayInMinutes *float64 `json:"delayInMinutes,omitempty" tf:"delay_in_minutes,omitempty"`

	// (String) The severity level to trigger the alert. Possible values are AVAILABILITY,	CUSTOM_ALERT,	ERROR,MONITORING_UNAVAILABLE,PERFORMANCE and RESOURCE_CONTENTION.
	// The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
	SeverityLevel *string `json:"severityLevel,omitempty" tf:"severity_level,omitempty"`

	// (Block List, Min: 1) Configuration of the tag filtering of the alerting profile (see below for nested schema)
	// Configuration of the tag filtering of the alerting profile
	TagFilter []TagFilterInitParameters `json:"tagFilter,omitempty" tf:"tag_filter,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type RulesObservation struct {

	// (Number) Send a notification if a problem remains open longer than X minutes
	// Send a notification if a problem remains open longer than *X* minutes
	DelayInMinutes *float64 `json:"delayInMinutes,omitempty" tf:"delay_in_minutes,omitempty"`

	// (String) The severity level to trigger the alert. Possible values are AVAILABILITY,	CUSTOM_ALERT,	ERROR,MONITORING_UNAVAILABLE,PERFORMANCE and RESOURCE_CONTENTION.
	// The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
	SeverityLevel *string `json:"severityLevel,omitempty" tf:"severity_level,omitempty"`

	// (Block List, Min: 1) Configuration of the tag filtering of the alerting profile (see below for nested schema)
	// Configuration of the tag filtering of the alerting profile
	TagFilter []TagFilterObservation `json:"tagFilter,omitempty" tf:"tag_filter,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type RulesParameters struct {

	// (Number) Send a notification if a problem remains open longer than X minutes
	// Send a notification if a problem remains open longer than *X* minutes
	// +kubebuilder:validation:Optional
	DelayInMinutes *float64 `json:"delayInMinutes" tf:"delay_in_minutes,omitempty"`

	// (String) The severity level to trigger the alert. Possible values are AVAILABILITY,	CUSTOM_ALERT,	ERROR,MONITORING_UNAVAILABLE,PERFORMANCE and RESOURCE_CONTENTION.
	// The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
	// +kubebuilder:validation:Optional
	SeverityLevel *string `json:"severityLevel" tf:"severity_level,omitempty"`

	// (Block List, Min: 1) Configuration of the tag filtering of the alerting profile (see below for nested schema)
	// Configuration of the tag filtering of the alerting profile
	// +kubebuilder:validation:Optional
	TagFilter []TagFilterParameters `json:"tagFilter" tf:"tag_filter,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TagFilterInitParameters struct {

	// (String) The filtering mode:  * INCLUDE_ANY: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * INCLUDE_ALL: The rule applies to monitored entities that have all of the specified tags. You can specify up to 10 tags.  * NONE: The rule applies to all monitored entities
	// The filtering mode:  * `INCLUDE_ANY`: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * `INCLUDE_ALL`: The rule applies to monitored entities that have **all** of the specified tags. You can specify up to 10 tags.  * `NONE`: The rule applies to all monitored entities
	IncludeMode *string `json:"includeMode,omitempty" tf:"include_mode,omitempty"`

	// (Block List) A list of required tags (see below for nested schema)
	// A list of required tags
	TagFilters []TagFiltersInitParameters `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TagFilterObservation struct {

	// (String) The filtering mode:  * INCLUDE_ANY: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * INCLUDE_ALL: The rule applies to monitored entities that have all of the specified tags. You can specify up to 10 tags.  * NONE: The rule applies to all monitored entities
	// The filtering mode:  * `INCLUDE_ANY`: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * `INCLUDE_ALL`: The rule applies to monitored entities that have **all** of the specified tags. You can specify up to 10 tags.  * `NONE`: The rule applies to all monitored entities
	IncludeMode *string `json:"includeMode,omitempty" tf:"include_mode,omitempty"`

	// (Block List) A list of required tags (see below for nested schema)
	// A list of required tags
	TagFilters []TagFiltersObservation `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TagFilterParameters struct {

	// (String) The filtering mode:  * INCLUDE_ANY: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * INCLUDE_ALL: The rule applies to monitored entities that have all of the specified tags. You can specify up to 10 tags.  * NONE: The rule applies to all monitored entities
	// The filtering mode:  * `INCLUDE_ANY`: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * `INCLUDE_ALL`: The rule applies to monitored entities that have **all** of the specified tags. You can specify up to 10 tags.  * `NONE`: The rule applies to all monitored entities
	// +kubebuilder:validation:Optional
	IncludeMode *string `json:"includeMode" tf:"include_mode,omitempty"`

	// (Block List) A list of required tags (see below for nested schema)
	// A list of required tags
	// +kubebuilder:validation:Optional
	TagFilters []TagFiltersParameters `json:"tagFilters,omitempty" tf:"tag_filters,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TagFiltersInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag. Custom tags have the tag value here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagFiltersObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag. Custom tags have the tag value here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagFiltersParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (String) The key of the tag. Custom tags have the tag value here
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// AlertingProfileSpec defines the desired state of AlertingProfile
type AlertingProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlertingProfileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AlertingProfileInitParameters `json:"initProvider,omitempty"`
}

// AlertingProfileStatus defines the observed state of AlertingProfile.
type AlertingProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlertingProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AlertingProfile is the Schema for the AlertingProfiles API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type AlertingProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	Spec   AlertingProfileSpec   `json:"spec"`
	Status AlertingProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlertingProfileList contains a list of AlertingProfiles
type AlertingProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlertingProfile `json:"items"`
}

// Repository type metadata.
var (
	AlertingProfile_Kind             = "AlertingProfile"
	AlertingProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlertingProfile_Kind}.String()
	AlertingProfile_KindAPIVersion   = AlertingProfile_Kind + "." + CRDGroupVersion.String()
	AlertingProfile_GroupVersionKind = CRDGroupVersion.WithKind(AlertingProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&AlertingProfile{}, &AlertingProfileList{})
}
