// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AvailabilityInitParameters struct {

	// (String) How to monitor the availability of the process group:  * PROCESS_IMPACT: Alert if any process of the group becomes unavailable.  * MINIMUM_THRESHOLD: Alert if the number of active processes in the group falls below the specified threshold.  * OFF: Availability monitoring is disabled.
	// How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Number) Alert if the number of active processes in the group is lower than this value.
	// Alert if the number of active processes in the group is lower than this value.
	MinimumThreshold *float64 `json:"minimumThreshold,omitempty" tf:"minimum_threshold,omitempty"`
}

type AvailabilityObservation struct {

	// (String) How to monitor the availability of the process group:  * PROCESS_IMPACT: Alert if any process of the group becomes unavailable.  * MINIMUM_THRESHOLD: Alert if the number of active processes in the group falls below the specified threshold.  * OFF: Availability monitoring is disabled.
	// How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// (Number) Alert if the number of active processes in the group is lower than this value.
	// Alert if the number of active processes in the group is lower than this value.
	MinimumThreshold *float64 `json:"minimumThreshold,omitempty" tf:"minimum_threshold,omitempty"`
}

type AvailabilityParameters struct {

	// (String) How to monitor the availability of the process group:  * PROCESS_IMPACT: Alert if any process of the group becomes unavailable.  * MINIMUM_THRESHOLD: Alert if the number of active processes in the group falls below the specified threshold.  * OFF: Availability monitoring is disabled.
	// How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
	// +kubebuilder:validation:Optional
	Method *string `json:"method" tf:"method,omitempty"`

	// (Number) Alert if the number of active processes in the group is lower than this value.
	// Alert if the number of active processes in the group is lower than this value.
	// +kubebuilder:validation:Optional
	MinimumThreshold *float64 `json:"minimumThreshold,omitempty" tf:"minimum_threshold,omitempty"`
}

type PgAnomaliesInitParameters struct {

	// (Block List, Max: 1) Configuration of the availability monitoring for the process group. (see below for nested schema)
	// Configuration of the availability monitoring for the process group.
	Availability []AvailabilityInitParameters `json:"availability,omitempty" tf:"availability,omitempty"`

	// (String) The ID of the process group
	// The ID of the process group
	PgID *string `json:"pgId,omitempty" tf:"pg_id,omitempty"`
}

type PgAnomaliesObservation struct {

	// (Block List, Max: 1) Configuration of the availability monitoring for the process group. (see below for nested schema)
	// Configuration of the availability monitoring for the process group.
	Availability []AvailabilityObservation `json:"availability,omitempty" tf:"availability,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The ID of the process group
	// The ID of the process group
	PgID *string `json:"pgId,omitempty" tf:"pg_id,omitempty"`
}

type PgAnomaliesParameters struct {

	// (Block List, Max: 1) Configuration of the availability monitoring for the process group. (see below for nested schema)
	// Configuration of the availability monitoring for the process group.
	// +kubebuilder:validation:Optional
	Availability []AvailabilityParameters `json:"availability,omitempty" tf:"availability,omitempty"`

	// (String) The ID of the process group
	// The ID of the process group
	// +kubebuilder:validation:Optional
	PgID *string `json:"pgId,omitempty" tf:"pg_id,omitempty"`
}

// PgAnomaliesSpec defines the desired state of PgAnomalies
type PgAnomaliesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PgAnomaliesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PgAnomaliesInitParameters `json:"initProvider,omitempty"`
}

// PgAnomaliesStatus defines the observed state of PgAnomalies.
type PgAnomaliesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PgAnomaliesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PgAnomalies is the Schema for the PgAnomaliess API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type PgAnomalies struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pgId) || (has(self.initProvider) && has(self.initProvider.pgId))",message="spec.forProvider.pgId is a required parameter"
	Spec   PgAnomaliesSpec   `json:"spec"`
	Status PgAnomaliesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PgAnomaliesList contains a list of PgAnomaliess
type PgAnomaliesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PgAnomalies `json:"items"`
}

// Repository type metadata.
var (
	PgAnomalies_Kind             = "PgAnomalies"
	PgAnomalies_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PgAnomalies_Kind}.String()
	PgAnomalies_KindAPIVersion   = PgAnomalies_Kind + "." + CRDGroupVersion.String()
	PgAnomalies_GroupVersionKind = CRDGroupVersion.WithKind(PgAnomalies_Kind)
)

func init() {
	SchemeBuilder.Register(&PgAnomalies{}, &PgAnomaliesList{})
}
