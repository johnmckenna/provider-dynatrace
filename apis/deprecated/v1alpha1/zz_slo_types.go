// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ErrorBudgetBurnRateInitParameters struct {

	// (Boolean) The error budget burn rate calculation is enabled (true) or disabled (false).
	// The error budget burn rate calculation is enabled (true) or disabled (false).
	BurnRateVisualizationEnabled *bool `json:"burnRateVisualizationEnabled,omitempty" tf:"burn_rate_visualization_enabled,omitempty"`

	// (Number) The threshold between a slow and a fast burn rate.
	// The threshold between a slow and a fast burn rate.
	FastBurnThreshold *float64 `json:"fastBurnThreshold,omitempty" tf:"fast_burn_threshold,omitempty"`
}

type ErrorBudgetBurnRateObservation struct {

	// (Boolean) The error budget burn rate calculation is enabled (true) or disabled (false).
	// The error budget burn rate calculation is enabled (true) or disabled (false).
	BurnRateVisualizationEnabled *bool `json:"burnRateVisualizationEnabled,omitempty" tf:"burn_rate_visualization_enabled,omitempty"`

	// (Number) The threshold between a slow and a fast burn rate.
	// The threshold between a slow and a fast burn rate.
	FastBurnThreshold *float64 `json:"fastBurnThreshold,omitempty" tf:"fast_burn_threshold,omitempty"`
}

type ErrorBudgetBurnRateParameters struct {

	// (Boolean) The error budget burn rate calculation is enabled (true) or disabled (false).
	// The error budget burn rate calculation is enabled (true) or disabled (false).
	// +kubebuilder:validation:Optional
	BurnRateVisualizationEnabled *bool `json:"burnRateVisualizationEnabled,omitempty" tf:"burn_rate_visualization_enabled,omitempty"`

	// (Number) The threshold between a slow and a fast burn rate.
	// The threshold between a slow and a fast burn rate.
	// +kubebuilder:validation:Optional
	FastBurnThreshold *float64 `json:"fastBurnThreshold,omitempty" tf:"fast_burn_threshold,omitempty"`
}

type SLOInitParameters struct {

	// (String) The total count metric (the denominator in rate calculation)
	// The total count metric (the denominator in rate calculation)
	Denominator *string `json:"denominator,omitempty" tf:"denominator,omitempty"`

	// (String) The custom description of the SLO
	// The custom description of the SLO (optional)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) The SLO is enabled (false) or disabled (true)
	// The SLO is enabled (`false`) or disabled (`true`)
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// level objective (SLO). (see below for nested schema)
	// Error budget burn rate configuration of a service-level objective (SLO).
	ErrorBudgetBurnRate []ErrorBudgetBurnRateInitParameters `json:"errorBudgetBurnRate,omitempty" tf:"error_budget_burn_rate,omitempty"`

	// (String) The evaluation type of the SLO. Currently only AGGREGATE is supported
	// The evaluation type of the SLO. Currently only `AGGREGATE` is supported
	Evaluation *string `json:"evaluation,omitempty" tf:"evaluation,omitempty"`

	// (String) The entity filter for the SLO evaluation. Use the syntax of entity selector
	// The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// based metric expression for the calculation of the SLO
	// The percentage-based metric expression for the calculation of the SLO
	MetricExpression *string `json:"metricExpression,omitempty" tf:"metric_expression,omitempty"`

	// (String) The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
	// The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// (String) The name of the rule
	// The name of the rule
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Deprecated) The metric for the count of successes (the numerator in rate calculation)
	// The metric for the count of successes (the numerator in rate calculation)
	Numerator *string `json:"numerator,omitempty" tf:"numerator,omitempty"`

	// based metric for the calculation of the SLO
	// The percentage-based metric for the calculation of the SLO
	Rate *string `json:"rate,omitempty" tf:"rate,omitempty"`

	// (Number) The target value of the SLO
	// The target value of the SLO
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
	// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// (Number) The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
	// The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
	Warning *float64 `json:"warning,omitempty" tf:"warning,omitempty"`
}

type SLOObservation struct {

	// (String) The total count metric (the denominator in rate calculation)
	// The total count metric (the denominator in rate calculation)
	Denominator *string `json:"denominator,omitempty" tf:"denominator,omitempty"`

	// (String) The custom description of the SLO
	// The custom description of the SLO (optional)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) The SLO is enabled (false) or disabled (true)
	// The SLO is enabled (`false`) or disabled (`true`)
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// level objective (SLO). (see below for nested schema)
	// Error budget burn rate configuration of a service-level objective (SLO).
	ErrorBudgetBurnRate []ErrorBudgetBurnRateObservation `json:"errorBudgetBurnRate,omitempty" tf:"error_budget_burn_rate,omitempty"`

	// (String) The evaluation type of the SLO. Currently only AGGREGATE is supported
	// The evaluation type of the SLO. Currently only `AGGREGATE` is supported
	Evaluation *string `json:"evaluation,omitempty" tf:"evaluation,omitempty"`

	// (String) The entity filter for the SLO evaluation. Use the syntax of entity selector
	// The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// based metric expression for the calculation of the SLO
	// The percentage-based metric expression for the calculation of the SLO
	MetricExpression *string `json:"metricExpression,omitempty" tf:"metric_expression,omitempty"`

	// (String) The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
	// The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// (String) The name of the rule
	// The name of the rule
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Deprecated) The metric for the count of successes (the numerator in rate calculation)
	// The metric for the count of successes (the numerator in rate calculation)
	Numerator *string `json:"numerator,omitempty" tf:"numerator,omitempty"`

	// based metric for the calculation of the SLO
	// The percentage-based metric for the calculation of the SLO
	Rate *string `json:"rate,omitempty" tf:"rate,omitempty"`

	// (Number) The target value of the SLO
	// The target value of the SLO
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
	// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// (Number) The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
	// The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
	Warning *float64 `json:"warning,omitempty" tf:"warning,omitempty"`
}

type SLOParameters struct {

	// (String) The total count metric (the denominator in rate calculation)
	// The total count metric (the denominator in rate calculation)
	// +kubebuilder:validation:Optional
	Denominator *string `json:"denominator,omitempty" tf:"denominator,omitempty"`

	// (String) The custom description of the SLO
	// The custom description of the SLO (optional)
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) The SLO is enabled (false) or disabled (true)
	// The SLO is enabled (`false`) or disabled (`true`)
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// level objective (SLO). (see below for nested schema)
	// Error budget burn rate configuration of a service-level objective (SLO).
	// +kubebuilder:validation:Optional
	ErrorBudgetBurnRate []ErrorBudgetBurnRateParameters `json:"errorBudgetBurnRate,omitempty" tf:"error_budget_burn_rate,omitempty"`

	// (String) The evaluation type of the SLO. Currently only AGGREGATE is supported
	// The evaluation type of the SLO. Currently only `AGGREGATE` is supported
	// +kubebuilder:validation:Optional
	Evaluation *string `json:"evaluation,omitempty" tf:"evaluation,omitempty"`

	// (String) The entity filter for the SLO evaluation. Use the syntax of entity selector
	// The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)
	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// based metric expression for the calculation of the SLO
	// The percentage-based metric expression for the calculation of the SLO
	// +kubebuilder:validation:Optional
	MetricExpression *string `json:"metricExpression,omitempty" tf:"metric_expression,omitempty"`

	// (String) The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
	// The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// (String) The name of the rule
	// The name of the rule
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Deprecated) The metric for the count of successes (the numerator in rate calculation)
	// The metric for the count of successes (the numerator in rate calculation)
	// +kubebuilder:validation:Optional
	Numerator *string `json:"numerator,omitempty" tf:"numerator,omitempty"`

	// based metric for the calculation of the SLO
	// The percentage-based metric for the calculation of the SLO
	// +kubebuilder:validation:Optional
	Rate *string `json:"rate,omitempty" tf:"rate,omitempty"`

	// (Number) The target value of the SLO
	// The target value of the SLO
	// +kubebuilder:validation:Optional
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
	// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// (Number) The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
	// The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure
	// +kubebuilder:validation:Optional
	Warning *float64 `json:"warning,omitempty" tf:"warning,omitempty"`
}

// SLOSpec defines the desired state of SLO
type SLOSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SLOParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SLOInitParameters `json:"initProvider,omitempty"`
}

// SLOStatus defines the observed state of SLO.
type SLOStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SLOObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SLO is the Schema for the SLOs API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type SLO struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.evaluation) || (has(self.initProvider) && has(self.initProvider.evaluation))",message="spec.forProvider.evaluation is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.target) || (has(self.initProvider) && has(self.initProvider.target))",message="spec.forProvider.target is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timeframe) || (has(self.initProvider) && has(self.initProvider.timeframe))",message="spec.forProvider.timeframe is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.warning) || (has(self.initProvider) && has(self.initProvider.warning))",message="spec.forProvider.warning is a required parameter"
	Spec   SLOSpec   `json:"spec"`
	Status SLOStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SLOList contains a list of SLOs
type SLOList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SLO `json:"items"`
}

// Repository type metadata.
var (
	SLO_Kind             = "SLO"
	SLO_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SLO_Kind}.String()
	SLO_KindAPIVersion   = SLO_Kind + "." + CRDGroupVersion.String()
	SLO_GroupVersionKind = CRDGroupVersion.WithKind(SLO_Kind)
)

func init() {
	SchemeBuilder.Register(&SLO{}, &SLOList{})
}
