// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DduPoolInitParameters struct {

	// (Block List, Max: 1) DDU pool settings for Events (see below for nested schema)
	// DDU pool settings for Events
	Events []EventsInitParameters `json:"events,omitempty" tf:"events,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Log Monitoring (see below for nested schema)
	// DDU pool settings for Log Monitoring
	LogMonitoring []LogMonitoringInitParameters `json:"logMonitoring,omitempty" tf:"log_monitoring,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Metrics (see below for nested schema)
	// DDU pool settings for Metrics
	Metrics []MetricsInitParameters `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Serverless (see below for nested schema)
	// DDU pool settings for Serverless
	Serverless []ServerlessInitParameters `json:"serverless,omitempty" tf:"serverless,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Traces (see below for nested schema)
	// DDU pool settings for Traces
	Traces []TracesInitParameters `json:"traces,omitempty" tf:"traces,omitempty"`
}

type DduPoolObservation struct {

	// (Block List, Max: 1) DDU pool settings for Events (see below for nested schema)
	// DDU pool settings for Events
	Events []EventsObservation `json:"events,omitempty" tf:"events,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Log Monitoring (see below for nested schema)
	// DDU pool settings for Log Monitoring
	LogMonitoring []LogMonitoringObservation `json:"logMonitoring,omitempty" tf:"log_monitoring,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Metrics (see below for nested schema)
	// DDU pool settings for Metrics
	Metrics []MetricsObservation `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Serverless (see below for nested schema)
	// DDU pool settings for Serverless
	Serverless []ServerlessObservation `json:"serverless,omitempty" tf:"serverless,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Traces (see below for nested schema)
	// DDU pool settings for Traces
	Traces []TracesObservation `json:"traces,omitempty" tf:"traces,omitempty"`
}

type DduPoolParameters struct {

	// (Block List, Max: 1) DDU pool settings for Events (see below for nested schema)
	// DDU pool settings for Events
	// +kubebuilder:validation:Optional
	Events []EventsParameters `json:"events,omitempty" tf:"events,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Log Monitoring (see below for nested schema)
	// DDU pool settings for Log Monitoring
	// +kubebuilder:validation:Optional
	LogMonitoring []LogMonitoringParameters `json:"logMonitoring,omitempty" tf:"log_monitoring,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Metrics (see below for nested schema)
	// DDU pool settings for Metrics
	// +kubebuilder:validation:Optional
	Metrics []MetricsParameters `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Serverless (see below for nested schema)
	// DDU pool settings for Serverless
	// +kubebuilder:validation:Optional
	Serverless []ServerlessParameters `json:"serverless,omitempty" tf:"serverless,omitempty"`

	// (Block List, Max: 1) DDU pool settings for Traces (see below for nested schema)
	// DDU pool settings for Traces
	// +kubebuilder:validation:Optional
	Traces []TracesParameters `json:"traces,omitempty" tf:"traces,omitempty"`
}

type EventsInitParameters struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type EventsObservation struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type EventsParameters struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type LogMonitoringInitParameters struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type LogMonitoringObservation struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type LogMonitoringParameters struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type MetricsInitParameters struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type MetricsObservation struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type MetricsParameters struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ServerlessInitParameters struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ServerlessObservation struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ServerlessParameters struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type TracesInitParameters struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type TracesObservation struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type TracesParameters struct {

	// (Boolean) Is the limit configuration enabled
	// Is the limit configuration enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (String) Type of the limit applied: MONTHLY or ANNUAL
	// Type of the limit applied: MONTHLY or ANNUAL
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Value of the DDU limit applied for provided timerange
	// Value of the DDU limit applied for provided timerange
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

// DduPoolSpec defines the desired state of DduPool
type DduPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DduPoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DduPoolInitParameters `json:"initProvider,omitempty"`
}

// DduPoolStatus defines the observed state of DduPool.
type DduPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DduPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DduPool is the Schema for the DduPools API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type DduPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DduPoolSpec   `json:"spec"`
	Status            DduPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DduPoolList contains a list of DduPools
type DduPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DduPool `json:"items"`
}

// Repository type metadata.
var (
	DduPool_Kind             = "DduPool"
	DduPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DduPool_Kind}.String()
	DduPool_KindAPIVersion   = DduPool_Kind + "." + CRDGroupVersion.String()
	DduPool_GroupVersionKind = CRDGroupVersion.WithKind(DduPool_Kind)
)

func init() {
	SchemeBuilder.Register(&DduPool{}, &DduPoolList{})
}
