// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionInitParameters struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The reference value for comparison. For conditions of the `DIMENSION` type, specify the key here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) How to compare. Possible values are
	// How to compare. Possible values are
	// - `BEGINS_WITH`
	// - `EQUALS`
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of the condition. Possible values are
	// - `DIMENSION`
	// - `LOG_FILE_NAME`
	// - `METRIC_KEY`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the dimension. Only applicable when type is set to `DIMENSION`
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionObservation struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The reference value for comparison. For conditions of the `DIMENSION` type, specify the key here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) How to compare. Possible values are
	// How to compare. Possible values are
	// - `BEGINS_WITH`
	// - `EQUALS`
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of the condition. Possible values are
	// - `DIMENSION`
	// - `LOG_FILE_NAME`
	// - `METRIC_KEY`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the dimension. Only applicable when type is set to `DIMENSION`
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionParameters struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The reference value for comparison. For conditions of the `DIMENSION` type, specify the key here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) How to compare. Possible values are
	// How to compare. Possible values are
	// - `BEGINS_WITH`
	// - `EQUALS`
	// +kubebuilder:validation:Optional
	Match *string `json:"match" tf:"match,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of the condition. Possible values are
	// - `DIMENSION`
	// - `LOG_FILE_NAME`
	// - `METRIC_KEY`
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the dimension. Only applicable when type is set to `DIMENSION`
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsApplicationTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be APPLICATION_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsApplicationTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be APPLICATION_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsApplicationTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be APPLICATION_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsApplicationTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsApplicationTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsApplicationTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureComputeModeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are DEDICATED or SHARED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureComputeModeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are DEDICATED or SHARED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureComputeModeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are DEDICATED or SHARED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureComputeModeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are DEDICATED or SHARED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureComputeModeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are DEDICATED or SHARED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureComputeModeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are DEDICATED or SHARED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureSkuComparisionInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be AZURE_SKU
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureSkuComparisionObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be AZURE_SKU
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureSkuComparisionParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be AZURE_SKU
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureSkuInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureSkuObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsAzureSkuParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsBaseComparisonBasicInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of comparison
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsBaseComparisonBasicObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of comparison
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsBaseComparisonBasicParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of comparison
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsBaseConditionKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) The type of the condition. Possible values are
	// Defines the actual set of fields depending on the value
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsBaseConditionKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) The type of the condition. Possible values are
	// Defines the actual set of fields depending on the value
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsBaseConditionKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (String) The type of the condition. Possible values are
	// Defines the actual set of fields depending on the value
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsBitnessComparisionInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be BITNESS
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are 32 and 64.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsBitnessComparisionObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be BITNESS
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are 32 and 64.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsBitnessComparisionParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be BITNESS
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are 32 and 64.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsBitnessInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are 32 and 64.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsBitnessObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are 32 and 64.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsBitnessParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are 32 and 64.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCloudTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be CLOUD_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCloudTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be CLOUD_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCloudTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be CLOUD_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCloudTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCloudTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCloudTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of comparison
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of comparison
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of comparison
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomApplicationTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be CUSTOM_APPLICATION_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCustomApplicationTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be CUSTOM_APPLICATION_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCustomApplicationTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be CUSTOM_APPLICATION_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCustomApplicationTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCustomApplicationTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCustomApplicationTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsCustomHostMetadataConditionKeyDynamicKeyInitParameters struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomHostMetadataConditionKeyDynamicKeyObservation struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomHostMetadataConditionKeyDynamicKeyParameters struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomHostMetadataConditionKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []ConditionsCustomHostMetadataConditionKeyDynamicKeyInitParameters `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be HOST_CUSTOM_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomHostMetadataConditionKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []ConditionsCustomHostMetadataConditionKeyDynamicKeyObservation `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be HOST_CUSTOM_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomHostMetadataConditionKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	// +kubebuilder:validation:Optional
	DynamicKey []ConditionsCustomHostMetadataConditionKeyDynamicKeyParameters `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be HOST_CUSTOM_METADATA_KEY
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomHostMetadataInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []CustomHostMetadataDynamicKeyInitParameters `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomHostMetadataObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []CustomHostMetadataDynamicKeyObservation `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomHostMetadataParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	// +kubebuilder:validation:Optional
	DynamicKey []CustomHostMetadataDynamicKeyParameters `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataConditionKeyDynamicKeyInitParameters struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataConditionKeyDynamicKeyObservation struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataConditionKeyDynamicKeyParameters struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataConditionKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []ConditionsCustomProcessMetadataConditionKeyDynamicKeyInitParameters `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataConditionKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []ConditionsCustomProcessMetadataConditionKeyDynamicKeyObservation `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataConditionKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	// +kubebuilder:validation:Optional
	DynamicKey []ConditionsCustomProcessMetadataConditionKeyDynamicKeyParameters `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataDynamicKeyInitParameters struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataDynamicKeyObservation struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataDynamicKeyParameters struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []ConditionsCustomProcessMetadataDynamicKeyInitParameters `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []ConditionsCustomProcessMetadataDynamicKeyObservation `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsCustomProcessMetadataParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	// +kubebuilder:validation:Optional
	DynamicKey []ConditionsCustomProcessMetadataDynamicKeyParameters `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsDatabaseTopologyComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be DATABASE_TOPOLOGY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDatabaseTopologyComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be DATABASE_TOPOLOGY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDatabaseTopologyComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be DATABASE_TOPOLOGY
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDatabaseTopologyInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDatabaseTopologyObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDatabaseTopologyParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDcrumDecoderComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be DCRUM_DECODER_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDcrumDecoderComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be DCRUM_DECODER_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDcrumDecoderComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be DCRUM_DECODER_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDcrumDecoderInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDcrumDecoderObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsDcrumDecoderParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsEntityIDComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be ENTITY_ID
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsEntityIDComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be ENTITY_ID
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsEntityIDComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be ENTITY_ID
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsEntityInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsEntityObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsEntityParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsHostTechInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value []HostTechValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsHostTechObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value []HostTechValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsHostTechParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value []HostTechValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsHypervisorInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsHypervisorObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsHypervisorParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsHypervisorTypeComparisionInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be HYPERVISOR_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsHypervisorTypeComparisionObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be HYPERVISOR_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsHypervisorTypeComparisionParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be HYPERVISOR_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedNameComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INDEXED_NAME
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedNameComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INDEXED_NAME
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedNameComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INDEXED_NAME
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedNameInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedNameObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedNameParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedStringComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INDEXED_STRING
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedStringComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INDEXED_STRING
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedStringComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INDEXED_STRING
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedStringInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedStringObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedStringParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INDEXED_TAG
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	Value []ConditionsIndexedTagComparisonValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INDEXED_TAG
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	Value []ConditionsIndexedTagComparisonValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INDEXED_TAG
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	// +kubebuilder:validation:Optional
	Value []ConditionsIndexedTagComparisonValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagComparisonValueInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagComparisonValueObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagComparisonValueParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	Value []ConditionsIndexedTagValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	Value []ConditionsIndexedTagValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	// +kubebuilder:validation:Optional
	Value []ConditionsIndexedTagValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagValueInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagValueObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIndexedTagValueParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIntegerComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INTEGER
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIntegerComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INTEGER
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIntegerComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be INTEGER
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIntegerInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIntegerObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIntegerParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIpaddressComparisonInitParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be IP_ADDRESS
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIpaddressComparisonObservation struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be IP_ADDRESS
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIpaddressComparisonParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	// +kubebuilder:validation:Optional
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be IP_ADDRESS
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIpaddressInitParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIpaddressObservation struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsIpaddressParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	// +kubebuilder:validation:Optional
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) The type of the condition. Possible values are
	// Defines the actual set of fields depending on the value
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) The type of the condition. Possible values are
	// Defines the actual set of fields depending on the value
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (String) The type of the condition. Possible values are
	// Defines the actual set of fields depending on the value
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsMobilePlatformComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be MOBILE_PLATFORM
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsMobilePlatformComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be MOBILE_PLATFORM
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsMobilePlatformComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be MOBILE_PLATFORM
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsMobilePlatformInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsMobilePlatformObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsMobilePlatformParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOsArchInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOsArchObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOsArchParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOsTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOsTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOsTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOsarchitectureComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be OS_ARCHITECTURE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOsarchitectureComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be OS_ARCHITECTURE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOsarchitectureComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be OS_ARCHITECTURE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOstypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be OS_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOstypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be OS_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsOstypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be OS_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsPaasTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be PAAS_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsPaasTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be PAAS_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsPaasTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be PAAS_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsPaasTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsPaasTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsPaasTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsProcessMetadataConditionKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsProcessMetadataConditionKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsProcessMetadataConditionKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	// +kubebuilder:validation:Optional
	DynamicKey *string `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsProcessMetadataInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsProcessMetadataObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsProcessMetadataParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	// +kubebuilder:validation:Optional
	DynamicKey *string `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsServiceTopologyComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SERVICE_TOPOLOGY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTopologyComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SERVICE_TOPOLOGY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTopologyComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SERVICE_TOPOLOGY
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTopologyInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTopologyObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTopologyParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SERVICE_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SERVICE_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SERVICE_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsServiceTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSimpleHostTechComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SIMPLE_HOST_TECH
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value []ConditionsSimpleHostTechComparisonValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSimpleHostTechComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SIMPLE_HOST_TECH
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value []ConditionsSimpleHostTechComparisonValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSimpleHostTechComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SIMPLE_HOST_TECH
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value []ConditionsSimpleHostTechComparisonValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSimpleHostTechComparisonValueInitParameters struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ConditionsSimpleHostTechComparisonValueObservation struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ConditionsSimpleHostTechComparisonValueParameters struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	// +kubebuilder:validation:Optional
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ConditionsSimpleTechComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SIMPLE_TECH
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value []ConditionsSimpleTechComparisonValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSimpleTechComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SIMPLE_TECH
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value []ConditionsSimpleTechComparisonValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSimpleTechComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SIMPLE_TECH
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value []ConditionsSimpleTechComparisonValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSimpleTechComparisonValueInitParameters struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ConditionsSimpleTechComparisonValueObservation struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ConditionsSimpleTechComparisonValueParameters struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	// +kubebuilder:validation:Optional
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ConditionsStringComparisonInitParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be STRING
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsStringComparisonObservation struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be STRING
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsStringComparisonParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	// +kubebuilder:validation:Optional
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be STRING
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsStringConditionKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be `STRING`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsStringConditionKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be `STRING`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsStringConditionKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	// +kubebuilder:validation:Optional
	DynamicKey *string `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be `STRING`
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsStringInitParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsStringKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsStringKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsStringKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	// +kubebuilder:validation:Optional
	DynamicKey *string `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsStringObservation struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsStringParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	// +kubebuilder:validation:Optional
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSyntheticEngineInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSyntheticEngineObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSyntheticEngineParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSyntheticEngineTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SYNTHETIC_ENGINE_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSyntheticEngineTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SYNTHETIC_ENGINE_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsSyntheticEngineTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be SYNTHETIC_ENGINE_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be TAG
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	Value []ConditionsTagComparisonValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be TAG
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	Value []ConditionsTagComparisonValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) The type of the condition. Possible values are
	// if specified, needs to be TAG
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	// +kubebuilder:validation:Optional
	Value []ConditionsTagComparisonValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagComparisonValueInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagComparisonValueObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagComparisonValueParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	Value []ConditionsTagValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	Value []ConditionsTagValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// Tag of a Dynatrace entity
	// +kubebuilder:validation:Optional
	Value []ConditionsTagValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagValueInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagValueObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTagValueParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTechInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value []ConditionsTechValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTechObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	Value []ConditionsTechValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTechParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value of the dimension. Only applicable when type is set to DIMENSION
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value []ConditionsTechValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionsTechValueInitParameters struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ConditionsTechValueObservation struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ConditionsTechValueParameters struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	// +kubebuilder:validation:Optional
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type CustomHostMetadataDynamicKeyInitParameters struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomHostMetadataDynamicKeyObservation struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomHostMetadataDynamicKeyParameters struct {

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// The actual key of the custom metadata
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DimensionalRuleInitParameters struct {

	// (String) The target of the rule. Possible values are
	// The target of the rule. Possible values are
	// - `ANY`
	// - `LOG`
	// - `METRIC`
	AppliesTo *string `json:"appliesTo,omitempty" tf:"applies_to,omitempty"`

	// (Block List) A list of conditions for the management zone. The management zone applies only if all conditions are fulfilled (see below for nested schema)
	// A list of conditions for the management zone. The management zone applies only if **all** conditions are fulfilled
	Condition []ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DimensionalRuleObservation struct {

	// (String) The target of the rule. Possible values are
	// The target of the rule. Possible values are
	// - `ANY`
	// - `LOG`
	// - `METRIC`
	AppliesTo *string `json:"appliesTo,omitempty" tf:"applies_to,omitempty"`

	// (Block List) A list of conditions for the management zone. The management zone applies only if all conditions are fulfilled (see below for nested schema)
	// A list of conditions for the management zone. The management zone applies only if **all** conditions are fulfilled
	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DimensionalRuleParameters struct {

	// (String) The target of the rule. Possible values are
	// The target of the rule. Possible values are
	// - `ANY`
	// - `LOG`
	// - `METRIC`
	// +kubebuilder:validation:Optional
	AppliesTo *string `json:"appliesTo" tf:"applies_to,omitempty"`

	// (Block List) A list of conditions for the management zone. The management zone applies only if all conditions are fulfilled (see below for nested schema)
	// A list of conditions for the management zone. The management zone applies only if **all** conditions are fulfilled
	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type HostTechValueInitParameters struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type HostTechValueObservation struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type HostTechValueParameters struct {

	// (String) The type of the condition. Possible values are
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	// +kubebuilder:validation:Optional
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ManagementZoneEntitySelectorBasedRuleInitParameters struct {

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The entity selector string, by which the entities are selected
	// The entity selector string, by which the entities are selected
	Selector *string `json:"selector,omitempty" tf:"selector,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ManagementZoneEntitySelectorBasedRuleObservation struct {

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The entity selector string, by which the entities are selected
	// The entity selector string, by which the entities are selected
	Selector *string `json:"selector,omitempty" tf:"selector,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ManagementZoneEntitySelectorBasedRuleParameters struct {

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The entity selector string, by which the entities are selected
	// The entity selector string, by which the entities are selected
	// +kubebuilder:validation:Optional
	Selector *string `json:"selector,omitempty" tf:"selector,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ManagementZoneInitParameters_2 struct {

	// (String) The description of the management zone
	// The description of the management zone
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block Set) A list of dimensional data rules for management zone usage. If several rules are specified, the or logic applies (see below for nested schema)
	// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
	DimensionalRule []DimensionalRuleInitParameters `json:"dimensionalRule,omitempty" tf:"dimensional_rule,omitempty"`

	// selector based rules for management zone usage. If several rules are specified, the or logic applies (see below for nested schema)
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRule []ManagementZoneEntitySelectorBasedRuleInitParameters `json:"entitySelectorBasedRule,omitempty" tf:"entity_selector_based_rule,omitempty"`

	// (String) The name of the management zone
	// The name of the management zone
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) A list of rules for management zone usage.  Each rule is evaluated independently of all other rules (see below for nested schema)
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules []ManagementZoneRulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ManagementZoneObservation_2 struct {

	// (String) The description of the management zone
	// The description of the management zone
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block Set) A list of dimensional data rules for management zone usage. If several rules are specified, the or logic applies (see below for nested schema)
	// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
	DimensionalRule []DimensionalRuleObservation `json:"dimensionalRule,omitempty" tf:"dimensional_rule,omitempty"`

	// selector based rules for management zone usage. If several rules are specified, the or logic applies (see below for nested schema)
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	EntitySelectorBasedRule []ManagementZoneEntitySelectorBasedRuleObservation `json:"entitySelectorBasedRule,omitempty" tf:"entity_selector_based_rule,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the management zone
	// The name of the management zone
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) A list of rules for management zone usage.  Each rule is evaluated independently of all other rules (see below for nested schema)
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	Rules []ManagementZoneRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ManagementZoneParameters_2 struct {

	// (String) The description of the management zone
	// The description of the management zone
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block Set) A list of dimensional data rules for management zone usage. If several rules are specified, the or logic applies (see below for nested schema)
	// A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies
	// +kubebuilder:validation:Optional
	DimensionalRule []DimensionalRuleParameters `json:"dimensionalRule,omitempty" tf:"dimensional_rule,omitempty"`

	// selector based rules for management zone usage. If several rules are specified, the or logic applies (see below for nested schema)
	// A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies
	// +kubebuilder:validation:Optional
	EntitySelectorBasedRule []ManagementZoneEntitySelectorBasedRuleParameters `json:"entitySelectorBasedRule,omitempty" tf:"entity_selector_based_rule,omitempty"`

	// (String) The name of the management zone
	// The name of the management zone
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block Set) A list of rules for management zone usage.  Each rule is evaluated independently of all other rules (see below for nested schema)
	// A list of rules for management zone usage.  Each rule is evaluated independently of all other rules
	// +kubebuilder:validation:Optional
	Rules []ManagementZoneRulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ManagementZoneRulesInitParameters struct {

	// (Block List) A list of matching rules for the management zone. The management zone applies only if all conditions are fulfilled (see below for nested schema)
	// A list of matching rules for the management zone. The management zone applies only if **all** conditions are fulfilled
	Conditions []RulesConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Set of String) How to apply the management zone to underlying entities:
	// How to apply the management zone to underlying entities:
	// - `SERVICE_TO_HOST_LIKE`: Apply to underlying hosts of matching services
	// - `SERVICE_TO_PROCESS_GROUP_LIKE`: Apply to underlying process groups of matching services
	// - `PROCESS_GROUP_TO_HOST`: Apply to underlying hosts of matching process groups
	// - `PROCESS_GROUP_TO_SERVICE`: Apply to all services provided by matching process groups
	// - `HOST_TO_PROCESS_GROUP_INSTANCE`: Apply to processes running on matching hosts
	// - `CUSTOM_DEVICE_GROUP_TO_CUSTOM_DEVICE`: Apply to custom devices in matching custom device groups
	// - `AZURE_TO_PG`: Apply to process groups connected to matching Azure entities
	// - `AZURE_TO_SERVICE`: Apply to services provided by matching Azure entities
	// +listType=set
	PropagationTypes []*string `json:"propagationTypes,omitempty" tf:"propagation_types,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of Dynatrace entities the management zone can be applied to
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ManagementZoneRulesObservation struct {

	// (Block List) A list of matching rules for the management zone. The management zone applies only if all conditions are fulfilled (see below for nested schema)
	// A list of matching rules for the management zone. The management zone applies only if **all** conditions are fulfilled
	Conditions []RulesConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Set of String) How to apply the management zone to underlying entities:
	// How to apply the management zone to underlying entities:
	// - `SERVICE_TO_HOST_LIKE`: Apply to underlying hosts of matching services
	// - `SERVICE_TO_PROCESS_GROUP_LIKE`: Apply to underlying process groups of matching services
	// - `PROCESS_GROUP_TO_HOST`: Apply to underlying hosts of matching process groups
	// - `PROCESS_GROUP_TO_SERVICE`: Apply to all services provided by matching process groups
	// - `HOST_TO_PROCESS_GROUP_INSTANCE`: Apply to processes running on matching hosts
	// - `CUSTOM_DEVICE_GROUP_TO_CUSTOM_DEVICE`: Apply to custom devices in matching custom device groups
	// - `AZURE_TO_PG`: Apply to process groups connected to matching Azure entities
	// - `AZURE_TO_SERVICE`: Apply to services provided by matching Azure entities
	// +listType=set
	PropagationTypes []*string `json:"propagationTypes,omitempty" tf:"propagation_types,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of Dynatrace entities the management zone can be applied to
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ManagementZoneRulesParameters struct {

	// (Block List) A list of matching rules for the management zone. The management zone applies only if all conditions are fulfilled (see below for nested schema)
	// A list of matching rules for the management zone. The management zone applies only if **all** conditions are fulfilled
	// +kubebuilder:validation:Optional
	Conditions []RulesConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Set of String) How to apply the management zone to underlying entities:
	// How to apply the management zone to underlying entities:
	// - `SERVICE_TO_HOST_LIKE`: Apply to underlying hosts of matching services
	// - `SERVICE_TO_PROCESS_GROUP_LIKE`: Apply to underlying process groups of matching services
	// - `PROCESS_GROUP_TO_HOST`: Apply to underlying hosts of matching process groups
	// - `PROCESS_GROUP_TO_SERVICE`: Apply to all services provided by matching process groups
	// - `HOST_TO_PROCESS_GROUP_INSTANCE`: Apply to processes running on matching hosts
	// - `CUSTOM_DEVICE_GROUP_TO_CUSTOM_DEVICE`: Apply to custom devices in matching custom device groups
	// - `AZURE_TO_PG`: Apply to process groups connected to matching Azure entities
	// - `AZURE_TO_SERVICE`: Apply to services provided by matching Azure entities
	// +kubebuilder:validation:Optional
	// +listType=set
	PropagationTypes []*string `json:"propagationTypes,omitempty" tf:"propagation_types,omitempty"`

	// (String) The type of the condition. Possible values are
	// The type of Dynatrace entities the management zone can be applied to
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type RulesConditionsInitParameters struct {

	// (Block List) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	ApplicationType []ConditionsApplicationTypeInitParameters `json:"applicationType,omitempty" tf:"application_type,omitempty"`

	// (Block List, Deprecated) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	ApplicationTypeComparison []ConditionsApplicationTypeComparisonInitParameters `json:"applicationTypeComparison,omitempty" tf:"application_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	AzureComputeMode []ConditionsAzureComputeModeInitParameters `json:"azureComputeMode,omitempty" tf:"azure_compute_mode,omitempty"`

	// (Block List) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	AzureComputeModeComparison []ConditionsAzureComputeModeComparisonInitParameters `json:"azureComputeModeComparison,omitempty" tf:"azure_compute_mode_comparison,omitempty"`

	// (Block List) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	AzureSku []ConditionsAzureSkuInitParameters `json:"azureSku,omitempty" tf:"azure_sku,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	AzureSkuComparision []ConditionsAzureSkuComparisionInitParameters `json:"azureSkuComparision,omitempty" tf:"azure_sku_comparision,omitempty"`

	// (Block List, Deprecated) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	BaseComparisonBasic []ConditionsBaseComparisonBasicInitParameters `json:"baseComparisonBasic,omitempty" tf:"base_comparison_basic,omitempty"`

	// (Block List, Deprecated) Fallback for not yet known type (see below for nested schema)
	// Fallback for not yet known type
	BaseConditionKey []ConditionsBaseConditionKeyInitParameters `json:"baseConditionKey,omitempty" tf:"base_condition_key,omitempty"`

	// (Block List) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	Bitness []ConditionsBitnessInitParameters `json:"bitness,omitempty" tf:"bitness,omitempty"`

	// (Block List, Deprecated) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	BitnessComparision []ConditionsBitnessComparisionInitParameters `json:"bitnessComparision,omitempty" tf:"bitness_comparision,omitempty"`

	// (Block List) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	CloudType []ConditionsCloudTypeInitParameters `json:"cloudType,omitempty" tf:"cloud_type,omitempty"`

	// (Block List, Deprecated) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	CloudTypeComparison []ConditionsCloudTypeComparisonInitParameters `json:"cloudTypeComparison,omitempty" tf:"cloud_type_comparison,omitempty"`

	// (Block List) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	Comparison []ConditionsComparisonInitParameters `json:"comparison,omitempty" tf:"comparison,omitempty"`

	// (Block List) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	CustomApplicationType []ConditionsCustomApplicationTypeInitParameters `json:"customApplicationType,omitempty" tf:"custom_application_type,omitempty"`

	// (Block List, Deprecated) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	CustomApplicationTypeComparison []ConditionsCustomApplicationTypeComparisonInitParameters `json:"customApplicationTypeComparison,omitempty" tf:"custom_application_type_comparison,omitempty"`

	// (Block List) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	CustomHostMetadata []ConditionsCustomHostMetadataInitParameters `json:"customHostMetadata,omitempty" tf:"custom_host_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	CustomHostMetadataConditionKey []ConditionsCustomHostMetadataConditionKeyInitParameters `json:"customHostMetadataConditionKey,omitempty" tf:"custom_host_metadata_condition_key,omitempty"`

	// (Block List) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	CustomProcessMetadata []ConditionsCustomProcessMetadataInitParameters `json:"customProcessMetadata,omitempty" tf:"custom_process_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	CustomProcessMetadataConditionKey []ConditionsCustomProcessMetadataConditionKeyInitParameters `json:"customProcessMetadataConditionKey,omitempty" tf:"custom_process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	DatabaseTopology []ConditionsDatabaseTopologyInitParameters `json:"databaseTopology,omitempty" tf:"database_topology,omitempty"`

	// (Block List, Deprecated) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	DatabaseTopologyComparison []ConditionsDatabaseTopologyComparisonInitParameters `json:"databaseTopologyComparison,omitempty" tf:"database_topology_comparison,omitempty"`

	// (Block List) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	DcrumDecoder []ConditionsDcrumDecoderInitParameters `json:"dcrumDecoder,omitempty" tf:"dcrum_decoder,omitempty"`

	// (Block List, Deprecated) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	DcrumDecoderComparison []ConditionsDcrumDecoderComparisonInitParameters `json:"dcrumDecoderComparison,omitempty" tf:"dcrum_decoder_comparison,omitempty"`

	// (Block List) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	Entity []ConditionsEntityInitParameters `json:"entity,omitempty" tf:"entity,omitempty"`

	// (Block List, Deprecated) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	EntityIDComparison []ConditionsEntityIDComparisonInitParameters `json:"entityIdComparison,omitempty" tf:"entity_id_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	HostTech []ConditionsHostTechInitParameters `json:"hostTech,omitempty" tf:"host_tech,omitempty"`

	// (Block List) Comparison for HYPERVISOR_TYPE attributes (see below for nested schema)
	// Comparison for `HYPERVISOR_TYPE` attributes
	Hypervisor []ConditionsHypervisorInitParameters `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	// (Block List, Deprecated) hypervisor_type_comparision is deprecated. Use hypervisor instead (see below for nested schema)
	// `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
	HypervisorTypeComparision []ConditionsHypervisorTypeComparisionInitParameters `json:"hypervisorTypeComparision,omitempty" tf:"hypervisor_type_comparision,omitempty"`

	// (Block List) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	IndexedName []ConditionsIndexedNameInitParameters `json:"indexedName,omitempty" tf:"indexed_name,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	IndexedNameComparison []ConditionsIndexedNameComparisonInitParameters `json:"indexedNameComparison,omitempty" tf:"indexed_name_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	IndexedString []ConditionsIndexedStringInitParameters `json:"indexedString,omitempty" tf:"indexed_string,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	IndexedStringComparison []ConditionsIndexedStringComparisonInitParameters `json:"indexedStringComparison,omitempty" tf:"indexed_string_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	IndexedTag []ConditionsIndexedTagInitParameters `json:"indexedTag,omitempty" tf:"indexed_tag,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	IndexedTagComparison []ConditionsIndexedTagComparisonInitParameters `json:"indexedTagComparison,omitempty" tf:"indexed_tag_comparison,omitempty"`

	// (Block List) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	Integer []ConditionsIntegerInitParameters `json:"integer,omitempty" tf:"integer,omitempty"`

	// (Block List, Deprecated) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	IntegerComparison []ConditionsIntegerComparisonInitParameters `json:"integerComparison,omitempty" tf:"integer_comparison,omitempty"`

	// (Block List) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	Ipaddress []ConditionsIpaddressInitParameters `json:"ipaddress,omitempty" tf:"ipaddress,omitempty"`

	// (Block List, Deprecated) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	IpaddressComparison []ConditionsIpaddressComparisonInitParameters `json:"ipaddressComparison,omitempty" tf:"ipaddress_comparison,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// Fallback for not yet known type
	Key []ConditionsKeyInitParameters `json:"key,omitempty" tf:"key,omitempty"`

	// (Block List) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	MobilePlatform []ConditionsMobilePlatformInitParameters `json:"mobilePlatform,omitempty" tf:"mobile_platform,omitempty"`

	// (Block List, Deprecated) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	MobilePlatformComparison []ConditionsMobilePlatformComparisonInitParameters `json:"mobilePlatformComparison,omitempty" tf:"mobile_platform_comparison,omitempty"`

	// (Block List) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	OsArch []ConditionsOsArchInitParameters `json:"osArch,omitempty" tf:"os_arch,omitempty"`

	// (Block List) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	OsType []ConditionsOsTypeInitParameters `json:"osType,omitempty" tf:"os_type,omitempty"`

	// (Block List, Deprecated) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	OsarchitectureComparison []ConditionsOsarchitectureComparisonInitParameters `json:"osarchitectureComparison,omitempty" tf:"osarchitecture_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	OstypeComparison []ConditionsOstypeComparisonInitParameters `json:"ostypeComparison,omitempty" tf:"ostype_comparison,omitempty"`

	// (Block List) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	PaasType []ConditionsPaasTypeInitParameters `json:"paasType,omitempty" tf:"paas_type,omitempty"`

	// (Block List, Deprecated) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	PaasTypeComparison []ConditionsPaasTypeComparisonInitParameters `json:"paasTypeComparison,omitempty" tf:"paas_type_comparison,omitempty"`

	// (Block List) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	ProcessMetadata []ConditionsProcessMetadataInitParameters `json:"processMetadata,omitempty" tf:"process_metadata,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	ProcessMetadataConditionKey []ConditionsProcessMetadataConditionKeyInitParameters `json:"processMetadataConditionKey,omitempty" tf:"process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	ServiceTopology []ConditionsServiceTopologyInitParameters `json:"serviceTopology,omitempty" tf:"service_topology,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	ServiceTopologyComparison []ConditionsServiceTopologyComparisonInitParameters `json:"serviceTopologyComparison,omitempty" tf:"service_topology_comparison,omitempty"`

	// (Block List) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	ServiceType []ConditionsServiceTypeInitParameters `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	ServiceTypeComparison []ConditionsServiceTypeComparisonInitParameters `json:"serviceTypeComparison,omitempty" tf:"service_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	SimpleHostTechComparison []ConditionsSimpleHostTechComparisonInitParameters `json:"simpleHostTechComparison,omitempty" tf:"simple_host_tech_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	SimpleTechComparison []ConditionsSimpleTechComparisonInitParameters `json:"simpleTechComparison,omitempty" tf:"simple_tech_comparison,omitempty"`

	// (Block List) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	String []ConditionsStringInitParameters `json:"string,omitempty" tf:"string,omitempty"`

	// (Block List, Deprecated) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	StringComparison []ConditionsStringComparisonInitParameters `json:"stringComparison,omitempty" tf:"string_comparison,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	StringConditionKey []ConditionsStringConditionKeyInitParameters `json:"stringConditionKey,omitempty" tf:"string_condition_key,omitempty"`

	// (Block List) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	StringKey []ConditionsStringKeyInitParameters `json:"stringKey,omitempty" tf:"string_key,omitempty"`

	// (Block List) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	SyntheticEngine []ConditionsSyntheticEngineInitParameters `json:"syntheticEngine,omitempty" tf:"synthetic_engine,omitempty"`

	// (Block List, Deprecated) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	SyntheticEngineTypeComparison []ConditionsSyntheticEngineTypeComparisonInitParameters `json:"syntheticEngineTypeComparison,omitempty" tf:"synthetic_engine_type_comparison,omitempty"`

	// (Block List) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	Tag []ConditionsTagInitParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// (Block List, Deprecated) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	TagComparison []ConditionsTagComparisonInitParameters `json:"tagComparison,omitempty" tf:"tag_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	Tech []ConditionsTechInitParameters `json:"tech,omitempty" tf:"tech,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type RulesConditionsObservation struct {

	// (Block List) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	ApplicationType []ConditionsApplicationTypeObservation `json:"applicationType,omitempty" tf:"application_type,omitempty"`

	// (Block List, Deprecated) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	ApplicationTypeComparison []ConditionsApplicationTypeComparisonObservation `json:"applicationTypeComparison,omitempty" tf:"application_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	AzureComputeMode []ConditionsAzureComputeModeObservation `json:"azureComputeMode,omitempty" tf:"azure_compute_mode,omitempty"`

	// (Block List) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	AzureComputeModeComparison []ConditionsAzureComputeModeComparisonObservation `json:"azureComputeModeComparison,omitempty" tf:"azure_compute_mode_comparison,omitempty"`

	// (Block List) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	AzureSku []ConditionsAzureSkuObservation `json:"azureSku,omitempty" tf:"azure_sku,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	AzureSkuComparision []ConditionsAzureSkuComparisionObservation `json:"azureSkuComparision,omitempty" tf:"azure_sku_comparision,omitempty"`

	// (Block List, Deprecated) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	BaseComparisonBasic []ConditionsBaseComparisonBasicObservation `json:"baseComparisonBasic,omitempty" tf:"base_comparison_basic,omitempty"`

	// (Block List, Deprecated) Fallback for not yet known type (see below for nested schema)
	// Fallback for not yet known type
	BaseConditionKey []ConditionsBaseConditionKeyObservation `json:"baseConditionKey,omitempty" tf:"base_condition_key,omitempty"`

	// (Block List) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	Bitness []ConditionsBitnessObservation `json:"bitness,omitempty" tf:"bitness,omitempty"`

	// (Block List, Deprecated) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	BitnessComparision []ConditionsBitnessComparisionObservation `json:"bitnessComparision,omitempty" tf:"bitness_comparision,omitempty"`

	// (Block List) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	CloudType []ConditionsCloudTypeObservation `json:"cloudType,omitempty" tf:"cloud_type,omitempty"`

	// (Block List, Deprecated) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	CloudTypeComparison []ConditionsCloudTypeComparisonObservation `json:"cloudTypeComparison,omitempty" tf:"cloud_type_comparison,omitempty"`

	// (Block List) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	Comparison []ConditionsComparisonObservation `json:"comparison,omitempty" tf:"comparison,omitempty"`

	// (Block List) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	CustomApplicationType []ConditionsCustomApplicationTypeObservation `json:"customApplicationType,omitempty" tf:"custom_application_type,omitempty"`

	// (Block List, Deprecated) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	CustomApplicationTypeComparison []ConditionsCustomApplicationTypeComparisonObservation `json:"customApplicationTypeComparison,omitempty" tf:"custom_application_type_comparison,omitempty"`

	// (Block List) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	CustomHostMetadata []ConditionsCustomHostMetadataObservation `json:"customHostMetadata,omitempty" tf:"custom_host_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	CustomHostMetadataConditionKey []ConditionsCustomHostMetadataConditionKeyObservation `json:"customHostMetadataConditionKey,omitempty" tf:"custom_host_metadata_condition_key,omitempty"`

	// (Block List) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	CustomProcessMetadata []ConditionsCustomProcessMetadataObservation `json:"customProcessMetadata,omitempty" tf:"custom_process_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	CustomProcessMetadataConditionKey []ConditionsCustomProcessMetadataConditionKeyObservation `json:"customProcessMetadataConditionKey,omitempty" tf:"custom_process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	DatabaseTopology []ConditionsDatabaseTopologyObservation `json:"databaseTopology,omitempty" tf:"database_topology,omitempty"`

	// (Block List, Deprecated) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	DatabaseTopologyComparison []ConditionsDatabaseTopologyComparisonObservation `json:"databaseTopologyComparison,omitempty" tf:"database_topology_comparison,omitempty"`

	// (Block List) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	DcrumDecoder []ConditionsDcrumDecoderObservation `json:"dcrumDecoder,omitempty" tf:"dcrum_decoder,omitempty"`

	// (Block List, Deprecated) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	DcrumDecoderComparison []ConditionsDcrumDecoderComparisonObservation `json:"dcrumDecoderComparison,omitempty" tf:"dcrum_decoder_comparison,omitempty"`

	// (Block List) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	Entity []ConditionsEntityObservation `json:"entity,omitempty" tf:"entity,omitempty"`

	// (Block List, Deprecated) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	EntityIDComparison []ConditionsEntityIDComparisonObservation `json:"entityIdComparison,omitempty" tf:"entity_id_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	HostTech []ConditionsHostTechObservation `json:"hostTech,omitempty" tf:"host_tech,omitempty"`

	// (Block List) Comparison for HYPERVISOR_TYPE attributes (see below for nested schema)
	// Comparison for `HYPERVISOR_TYPE` attributes
	Hypervisor []ConditionsHypervisorObservation `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	// (Block List, Deprecated) hypervisor_type_comparision is deprecated. Use hypervisor instead (see below for nested schema)
	// `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
	HypervisorTypeComparision []ConditionsHypervisorTypeComparisionObservation `json:"hypervisorTypeComparision,omitempty" tf:"hypervisor_type_comparision,omitempty"`

	// (Block List) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	IndexedName []ConditionsIndexedNameObservation `json:"indexedName,omitempty" tf:"indexed_name,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	IndexedNameComparison []ConditionsIndexedNameComparisonObservation `json:"indexedNameComparison,omitempty" tf:"indexed_name_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	IndexedString []ConditionsIndexedStringObservation `json:"indexedString,omitempty" tf:"indexed_string,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	IndexedStringComparison []ConditionsIndexedStringComparisonObservation `json:"indexedStringComparison,omitempty" tf:"indexed_string_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	IndexedTag []ConditionsIndexedTagObservation `json:"indexedTag,omitempty" tf:"indexed_tag,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	IndexedTagComparison []ConditionsIndexedTagComparisonObservation `json:"indexedTagComparison,omitempty" tf:"indexed_tag_comparison,omitempty"`

	// (Block List) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	Integer []ConditionsIntegerObservation `json:"integer,omitempty" tf:"integer,omitempty"`

	// (Block List, Deprecated) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	IntegerComparison []ConditionsIntegerComparisonObservation `json:"integerComparison,omitempty" tf:"integer_comparison,omitempty"`

	// (Block List) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	Ipaddress []ConditionsIpaddressObservation `json:"ipaddress,omitempty" tf:"ipaddress,omitempty"`

	// (Block List, Deprecated) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	IpaddressComparison []ConditionsIpaddressComparisonObservation `json:"ipaddressComparison,omitempty" tf:"ipaddress_comparison,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// Fallback for not yet known type
	Key []ConditionsKeyObservation `json:"key,omitempty" tf:"key,omitempty"`

	// (Block List) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	MobilePlatform []ConditionsMobilePlatformObservation `json:"mobilePlatform,omitempty" tf:"mobile_platform,omitempty"`

	// (Block List, Deprecated) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	MobilePlatformComparison []ConditionsMobilePlatformComparisonObservation `json:"mobilePlatformComparison,omitempty" tf:"mobile_platform_comparison,omitempty"`

	// (Block List) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	OsArch []ConditionsOsArchObservation `json:"osArch,omitempty" tf:"os_arch,omitempty"`

	// (Block List) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	OsType []ConditionsOsTypeObservation `json:"osType,omitempty" tf:"os_type,omitempty"`

	// (Block List, Deprecated) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	OsarchitectureComparison []ConditionsOsarchitectureComparisonObservation `json:"osarchitectureComparison,omitempty" tf:"osarchitecture_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	OstypeComparison []ConditionsOstypeComparisonObservation `json:"ostypeComparison,omitempty" tf:"ostype_comparison,omitempty"`

	// (Block List) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	PaasType []ConditionsPaasTypeObservation `json:"paasType,omitempty" tf:"paas_type,omitempty"`

	// (Block List, Deprecated) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	PaasTypeComparison []ConditionsPaasTypeComparisonObservation `json:"paasTypeComparison,omitempty" tf:"paas_type_comparison,omitempty"`

	// (Block List) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	ProcessMetadata []ConditionsProcessMetadataObservation `json:"processMetadata,omitempty" tf:"process_metadata,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	ProcessMetadataConditionKey []ConditionsProcessMetadataConditionKeyObservation `json:"processMetadataConditionKey,omitempty" tf:"process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	ServiceTopology []ConditionsServiceTopologyObservation `json:"serviceTopology,omitempty" tf:"service_topology,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	ServiceTopologyComparison []ConditionsServiceTopologyComparisonObservation `json:"serviceTopologyComparison,omitempty" tf:"service_topology_comparison,omitempty"`

	// (Block List) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	ServiceType []ConditionsServiceTypeObservation `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	ServiceTypeComparison []ConditionsServiceTypeComparisonObservation `json:"serviceTypeComparison,omitempty" tf:"service_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	SimpleHostTechComparison []ConditionsSimpleHostTechComparisonObservation `json:"simpleHostTechComparison,omitempty" tf:"simple_host_tech_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	SimpleTechComparison []ConditionsSimpleTechComparisonObservation `json:"simpleTechComparison,omitempty" tf:"simple_tech_comparison,omitempty"`

	// (Block List) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	String []ConditionsStringObservation `json:"string,omitempty" tf:"string,omitempty"`

	// (Block List, Deprecated) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	StringComparison []ConditionsStringComparisonObservation `json:"stringComparison,omitempty" tf:"string_comparison,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	StringConditionKey []ConditionsStringConditionKeyObservation `json:"stringConditionKey,omitempty" tf:"string_condition_key,omitempty"`

	// (Block List) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	StringKey []ConditionsStringKeyObservation `json:"stringKey,omitempty" tf:"string_key,omitempty"`

	// (Block List) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	SyntheticEngine []ConditionsSyntheticEngineObservation `json:"syntheticEngine,omitempty" tf:"synthetic_engine,omitempty"`

	// (Block List, Deprecated) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	SyntheticEngineTypeComparison []ConditionsSyntheticEngineTypeComparisonObservation `json:"syntheticEngineTypeComparison,omitempty" tf:"synthetic_engine_type_comparison,omitempty"`

	// (Block List) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	Tag []ConditionsTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// (Block List, Deprecated) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	TagComparison []ConditionsTagComparisonObservation `json:"tagComparison,omitempty" tf:"tag_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	Tech []ConditionsTechObservation `json:"tech,omitempty" tf:"tech,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type RulesConditionsParameters struct {

	// (Block List) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	// +kubebuilder:validation:Optional
	ApplicationType []ConditionsApplicationTypeParameters `json:"applicationType,omitempty" tf:"application_type,omitempty"`

	// (Block List, Deprecated) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	// +kubebuilder:validation:Optional
	ApplicationTypeComparison []ConditionsApplicationTypeComparisonParameters `json:"applicationTypeComparison,omitempty" tf:"application_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	// +kubebuilder:validation:Optional
	AzureComputeMode []ConditionsAzureComputeModeParameters `json:"azureComputeMode,omitempty" tf:"azure_compute_mode,omitempty"`

	// (Block List) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	// +kubebuilder:validation:Optional
	AzureComputeModeComparison []ConditionsAzureComputeModeComparisonParameters `json:"azureComputeModeComparison,omitempty" tf:"azure_compute_mode_comparison,omitempty"`

	// (Block List) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	// +kubebuilder:validation:Optional
	AzureSku []ConditionsAzureSkuParameters `json:"azureSku,omitempty" tf:"azure_sku,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	// +kubebuilder:validation:Optional
	AzureSkuComparision []ConditionsAzureSkuComparisionParameters `json:"azureSkuComparision,omitempty" tf:"azure_sku_comparision,omitempty"`

	// (Block List, Deprecated) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	// +kubebuilder:validation:Optional
	BaseComparisonBasic []ConditionsBaseComparisonBasicParameters `json:"baseComparisonBasic,omitempty" tf:"base_comparison_basic,omitempty"`

	// (Block List, Deprecated) Fallback for not yet known type (see below for nested schema)
	// Fallback for not yet known type
	// +kubebuilder:validation:Optional
	BaseConditionKey []ConditionsBaseConditionKeyParameters `json:"baseConditionKey,omitempty" tf:"base_condition_key,omitempty"`

	// (Block List) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	// +kubebuilder:validation:Optional
	Bitness []ConditionsBitnessParameters `json:"bitness,omitempty" tf:"bitness,omitempty"`

	// (Block List, Deprecated) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	// +kubebuilder:validation:Optional
	BitnessComparision []ConditionsBitnessComparisionParameters `json:"bitnessComparision,omitempty" tf:"bitness_comparision,omitempty"`

	// (Block List) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	// +kubebuilder:validation:Optional
	CloudType []ConditionsCloudTypeParameters `json:"cloudType,omitempty" tf:"cloud_type,omitempty"`

	// (Block List, Deprecated) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	// +kubebuilder:validation:Optional
	CloudTypeComparison []ConditionsCloudTypeComparisonParameters `json:"cloudTypeComparison,omitempty" tf:"cloud_type_comparison,omitempty"`

	// (Block List) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	// +kubebuilder:validation:Optional
	Comparison []ConditionsComparisonParameters `json:"comparison,omitempty" tf:"comparison,omitempty"`

	// (Block List) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	// +kubebuilder:validation:Optional
	CustomApplicationType []ConditionsCustomApplicationTypeParameters `json:"customApplicationType,omitempty" tf:"custom_application_type,omitempty"`

	// (Block List, Deprecated) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	// +kubebuilder:validation:Optional
	CustomApplicationTypeComparison []ConditionsCustomApplicationTypeComparisonParameters `json:"customApplicationTypeComparison,omitempty" tf:"custom_application_type_comparison,omitempty"`

	// (Block List) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	// +kubebuilder:validation:Optional
	CustomHostMetadata []ConditionsCustomHostMetadataParameters `json:"customHostMetadata,omitempty" tf:"custom_host_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	// +kubebuilder:validation:Optional
	CustomHostMetadataConditionKey []ConditionsCustomHostMetadataConditionKeyParameters `json:"customHostMetadataConditionKey,omitempty" tf:"custom_host_metadata_condition_key,omitempty"`

	// (Block List) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	// +kubebuilder:validation:Optional
	CustomProcessMetadata []ConditionsCustomProcessMetadataParameters `json:"customProcessMetadata,omitempty" tf:"custom_process_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	// +kubebuilder:validation:Optional
	CustomProcessMetadataConditionKey []ConditionsCustomProcessMetadataConditionKeyParameters `json:"customProcessMetadataConditionKey,omitempty" tf:"custom_process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	// +kubebuilder:validation:Optional
	DatabaseTopology []ConditionsDatabaseTopologyParameters `json:"databaseTopology,omitempty" tf:"database_topology,omitempty"`

	// (Block List, Deprecated) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	// +kubebuilder:validation:Optional
	DatabaseTopologyComparison []ConditionsDatabaseTopologyComparisonParameters `json:"databaseTopologyComparison,omitempty" tf:"database_topology_comparison,omitempty"`

	// (Block List) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	// +kubebuilder:validation:Optional
	DcrumDecoder []ConditionsDcrumDecoderParameters `json:"dcrumDecoder,omitempty" tf:"dcrum_decoder,omitempty"`

	// (Block List, Deprecated) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	// +kubebuilder:validation:Optional
	DcrumDecoderComparison []ConditionsDcrumDecoderComparisonParameters `json:"dcrumDecoderComparison,omitempty" tf:"dcrum_decoder_comparison,omitempty"`

	// (Block List) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	// +kubebuilder:validation:Optional
	Entity []ConditionsEntityParameters `json:"entity,omitempty" tf:"entity,omitempty"`

	// (Block List, Deprecated) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	// +kubebuilder:validation:Optional
	EntityIDComparison []ConditionsEntityIDComparisonParameters `json:"entityIdComparison,omitempty" tf:"entity_id_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	// +kubebuilder:validation:Optional
	HostTech []ConditionsHostTechParameters `json:"hostTech,omitempty" tf:"host_tech,omitempty"`

	// (Block List) Comparison for HYPERVISOR_TYPE attributes (see below for nested schema)
	// Comparison for `HYPERVISOR_TYPE` attributes
	// +kubebuilder:validation:Optional
	Hypervisor []ConditionsHypervisorParameters `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	// (Block List, Deprecated) hypervisor_type_comparision is deprecated. Use hypervisor instead (see below for nested schema)
	// `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
	// +kubebuilder:validation:Optional
	HypervisorTypeComparision []ConditionsHypervisorTypeComparisionParameters `json:"hypervisorTypeComparision,omitempty" tf:"hypervisor_type_comparision,omitempty"`

	// (Block List) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	// +kubebuilder:validation:Optional
	IndexedName []ConditionsIndexedNameParameters `json:"indexedName,omitempty" tf:"indexed_name,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	// +kubebuilder:validation:Optional
	IndexedNameComparison []ConditionsIndexedNameComparisonParameters `json:"indexedNameComparison,omitempty" tf:"indexed_name_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	// +kubebuilder:validation:Optional
	IndexedString []ConditionsIndexedStringParameters `json:"indexedString,omitempty" tf:"indexed_string,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	// +kubebuilder:validation:Optional
	IndexedStringComparison []ConditionsIndexedStringComparisonParameters `json:"indexedStringComparison,omitempty" tf:"indexed_string_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	// +kubebuilder:validation:Optional
	IndexedTag []ConditionsIndexedTagParameters `json:"indexedTag,omitempty" tf:"indexed_tag,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	// +kubebuilder:validation:Optional
	IndexedTagComparison []ConditionsIndexedTagComparisonParameters `json:"indexedTagComparison,omitempty" tf:"indexed_tag_comparison,omitempty"`

	// (Block List) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	// +kubebuilder:validation:Optional
	Integer []ConditionsIntegerParameters `json:"integer,omitempty" tf:"integer,omitempty"`

	// (Block List, Deprecated) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	// +kubebuilder:validation:Optional
	IntegerComparison []ConditionsIntegerComparisonParameters `json:"integerComparison,omitempty" tf:"integer_comparison,omitempty"`

	// (Block List) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	// +kubebuilder:validation:Optional
	Ipaddress []ConditionsIpaddressParameters `json:"ipaddress,omitempty" tf:"ipaddress,omitempty"`

	// (Block List, Deprecated) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	// +kubebuilder:validation:Optional
	IpaddressComparison []ConditionsIpaddressComparisonParameters `json:"ipaddressComparison,omitempty" tf:"ipaddress_comparison,omitempty"`

	// (String) The reference value for comparison. For conditions of the DIMENSION type, specify the key here
	// Fallback for not yet known type
	// +kubebuilder:validation:Optional
	Key []ConditionsKeyParameters `json:"key,omitempty" tf:"key,omitempty"`

	// (Block List) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	// +kubebuilder:validation:Optional
	MobilePlatform []ConditionsMobilePlatformParameters `json:"mobilePlatform,omitempty" tf:"mobile_platform,omitempty"`

	// (Block List, Deprecated) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	// +kubebuilder:validation:Optional
	MobilePlatformComparison []ConditionsMobilePlatformComparisonParameters `json:"mobilePlatformComparison,omitempty" tf:"mobile_platform_comparison,omitempty"`

	// (Block List) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	// +kubebuilder:validation:Optional
	OsArch []ConditionsOsArchParameters `json:"osArch,omitempty" tf:"os_arch,omitempty"`

	// (Block List) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	// +kubebuilder:validation:Optional
	OsType []ConditionsOsTypeParameters `json:"osType,omitempty" tf:"os_type,omitempty"`

	// (Block List, Deprecated) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	// +kubebuilder:validation:Optional
	OsarchitectureComparison []ConditionsOsarchitectureComparisonParameters `json:"osarchitectureComparison,omitempty" tf:"osarchitecture_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	// +kubebuilder:validation:Optional
	OstypeComparison []ConditionsOstypeComparisonParameters `json:"ostypeComparison,omitempty" tf:"ostype_comparison,omitempty"`

	// (Block List) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	// +kubebuilder:validation:Optional
	PaasType []ConditionsPaasTypeParameters `json:"paasType,omitempty" tf:"paas_type,omitempty"`

	// (Block List, Deprecated) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	// +kubebuilder:validation:Optional
	PaasTypeComparison []ConditionsPaasTypeComparisonParameters `json:"paasTypeComparison,omitempty" tf:"paas_type_comparison,omitempty"`

	// (Block List) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	// +kubebuilder:validation:Optional
	ProcessMetadata []ConditionsProcessMetadataParameters `json:"processMetadata,omitempty" tf:"process_metadata,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	// +kubebuilder:validation:Optional
	ProcessMetadataConditionKey []ConditionsProcessMetadataConditionKeyParameters `json:"processMetadataConditionKey,omitempty" tf:"process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	// +kubebuilder:validation:Optional
	ServiceTopology []ConditionsServiceTopologyParameters `json:"serviceTopology,omitempty" tf:"service_topology,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	// +kubebuilder:validation:Optional
	ServiceTopologyComparison []ConditionsServiceTopologyComparisonParameters `json:"serviceTopologyComparison,omitempty" tf:"service_topology_comparison,omitempty"`

	// (Block List) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	// +kubebuilder:validation:Optional
	ServiceType []ConditionsServiceTypeParameters `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	// +kubebuilder:validation:Optional
	ServiceTypeComparison []ConditionsServiceTypeComparisonParameters `json:"serviceTypeComparison,omitempty" tf:"service_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	// +kubebuilder:validation:Optional
	SimpleHostTechComparison []ConditionsSimpleHostTechComparisonParameters `json:"simpleHostTechComparison,omitempty" tf:"simple_host_tech_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	// +kubebuilder:validation:Optional
	SimpleTechComparison []ConditionsSimpleTechComparisonParameters `json:"simpleTechComparison,omitempty" tf:"simple_tech_comparison,omitempty"`

	// (Block List) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	// +kubebuilder:validation:Optional
	String []ConditionsStringParameters `json:"string,omitempty" tf:"string,omitempty"`

	// (Block List, Deprecated) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	// +kubebuilder:validation:Optional
	StringComparison []ConditionsStringComparisonParameters `json:"stringComparison,omitempty" tf:"string_comparison,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	// +kubebuilder:validation:Optional
	StringConditionKey []ConditionsStringConditionKeyParameters `json:"stringConditionKey,omitempty" tf:"string_condition_key,omitempty"`

	// (Block List) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	// +kubebuilder:validation:Optional
	StringKey []ConditionsStringKeyParameters `json:"stringKey,omitempty" tf:"string_key,omitempty"`

	// (Block List) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	// +kubebuilder:validation:Optional
	SyntheticEngine []ConditionsSyntheticEngineParameters `json:"syntheticEngine,omitempty" tf:"synthetic_engine,omitempty"`

	// (Block List, Deprecated) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	// +kubebuilder:validation:Optional
	SyntheticEngineTypeComparison []ConditionsSyntheticEngineTypeComparisonParameters `json:"syntheticEngineTypeComparison,omitempty" tf:"synthetic_engine_type_comparison,omitempty"`

	// (Block List) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	// +kubebuilder:validation:Optional
	Tag []ConditionsTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// (Block List, Deprecated) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	// +kubebuilder:validation:Optional
	TagComparison []ConditionsTagComparisonParameters `json:"tagComparison,omitempty" tf:"tag_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	// +kubebuilder:validation:Optional
	Tech []ConditionsTechParameters `json:"tech,omitempty" tf:"tech,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

// ManagementZoneSpec defines the desired state of ManagementZone
type ManagementZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementZoneParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ManagementZoneInitParameters_2 `json:"initProvider,omitempty"`
}

// ManagementZoneStatus defines the observed state of ManagementZone.
type ManagementZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementZoneObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ManagementZone is the Schema for the ManagementZones API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ManagementZone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ManagementZoneSpec   `json:"spec"`
	Status ManagementZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementZoneList contains a list of ManagementZones
type ManagementZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementZone `json:"items"`
}

// Repository type metadata.
var (
	ManagementZone_Kind             = "ManagementZone"
	ManagementZone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementZone_Kind}.String()
	ManagementZone_KindAPIVersion   = ManagementZone_Kind + "." + CRDGroupVersion.String()
	ManagementZone_GroupVersionKind = CRDGroupVersion.WithKind(ManagementZone_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementZone{}, &ManagementZoneList{})
}
