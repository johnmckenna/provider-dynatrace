// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnsibleTowerInitParameters struct {

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	CustomMessage *string `json:"customMessage,omitempty" tf:"custom_message,omitempty"`

	// (Number) The ID of the target Ansible Tower job template
	// The ID of the target Ansible Tower job template
	JobTemplateID *float64 `json:"jobTemplateId,omitempty" tf:"job_template_id,omitempty"`

	// (String) The URL of the target Ansible Tower job template
	// The URL of the target Ansible Tower job template
	JobTemplateURL *string `json:"jobTemplateUrl,omitempty" tf:"job_template_url,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The password for the Ansible Tower account
	// The password for the Ansible Tower account
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The username of the Ansible Tower account
	// The username of the Ansible Tower account
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AnsibleTowerObservation struct {

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	CustomMessage *string `json:"customMessage,omitempty" tf:"custom_message,omitempty"`

	// (Number) The ID of the target Ansible Tower job template
	// The ID of the target Ansible Tower job template
	JobTemplateID *float64 `json:"jobTemplateId,omitempty" tf:"job_template_id,omitempty"`

	// (String) The URL of the target Ansible Tower job template
	// The URL of the target Ansible Tower job template
	JobTemplateURL *string `json:"jobTemplateUrl,omitempty" tf:"job_template_url,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The password for the Ansible Tower account
	// The password for the Ansible Tower account
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The username of the Ansible Tower account
	// The username of the Ansible Tower account
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AnsibleTowerParameters struct {

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	// +kubebuilder:validation:Optional
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate" tf:"accept_any_certificate,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Optional
	CustomMessage *string `json:"customMessage" tf:"custom_message,omitempty"`

	// (Number) The ID of the target Ansible Tower job template
	// The ID of the target Ansible Tower job template
	// +kubebuilder:validation:Optional
	JobTemplateID *float64 `json:"jobTemplateId" tf:"job_template_id,omitempty"`

	// (String) The URL of the target Ansible Tower job template
	// The URL of the target Ansible Tower job template
	// +kubebuilder:validation:Optional
	JobTemplateURL *string `json:"jobTemplateUrl" tf:"job_template_url,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The password for the Ansible Tower account
	// The password for the Ansible Tower account
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The username of the Ansible Tower account
	// The username of the Ansible Tower account
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`
}

type EmailInitParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// recipients
	// The list of the email BCC-recipients
	// +listType=set
	BccReceivers []*string `json:"bccReceivers,omitempty" tf:"bcc_receivers,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// recipients
	// The list of the email CC-recipients
	// +listType=set
	CcReceivers []*string `json:"ccReceivers,omitempty" tf:"cc_receivers,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) The list of the email recipients
	// The list of the email recipients
	// +listType=set
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// (String) The subject of the email notifications
	// The subject of the email notifications
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type EmailObservation struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// recipients
	// The list of the email BCC-recipients
	// +listType=set
	BccReceivers []*string `json:"bccReceivers,omitempty" tf:"bcc_receivers,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// recipients
	// The list of the email CC-recipients
	// +listType=set
	CcReceivers []*string `json:"ccReceivers,omitempty" tf:"cc_receivers,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) The list of the email recipients
	// The list of the email recipients
	// +listType=set
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// (String) The subject of the email notifications
	// The subject of the email notifications
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type EmailParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// recipients
	// The list of the email BCC-recipients
	// +kubebuilder:validation:Optional
	// +listType=set
	BccReceivers []*string `json:"bccReceivers,omitempty" tf:"bcc_receivers,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Optional
	Body *string `json:"body" tf:"body,omitempty"`

	// recipients
	// The list of the email CC-recipients
	// +kubebuilder:validation:Optional
	// +listType=set
	CcReceivers []*string `json:"ccReceivers,omitempty" tf:"cc_receivers,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) The list of the email recipients
	// The list of the email recipients
	// +kubebuilder:validation:Optional
	// +listType=set
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// (String) The subject of the email notifications
	// The subject of the email notifications
	// +kubebuilder:validation:Optional
	Subject *string `json:"subject" tf:"subject,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type HeaderInitParameters struct {

	// (String) The name of the notification configuration
	// The name of the HTTP header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the Authorization header, GET requests return the null value.  If you want update a notification configuration with an Authorization header which you want to remain intact, set the Authorization header with the null value
	// The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderObservation struct {

	// (String) The name of the notification configuration
	// The name of the HTTP header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the Authorization header, GET requests return the null value.  If you want update a notification configuration with an Authorization header which you want to remain intact, set the Authorization header with the null value
	// The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderParameters struct {

	// (String) The name of the notification configuration
	// The name of the HTTP header
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the Authorization header, GET requests return the null value.  If you want update a notification configuration with an Authorization header which you want to remain intact, set the Authorization header with the null value
	// The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type JiraInitParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	// The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The type of the Jira issue to be created by this notification
	// The type of the Jira issue to be created by this notification
	IssueType *string `json:"issueType,omitempty" tf:"issue_type,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The password for the Ansible Tower account
	// The password for the Jira profile
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (String) The project key of the Jira issue to be created by this notification
	// The project key of the Jira issue to be created by this notification
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the Jira API endpoint
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The username of the Ansible Tower account
	// The username of the Jira profile
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type JiraObservation struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	// The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The type of the Jira issue to be created by this notification
	// The type of the Jira issue to be created by this notification
	IssueType *string `json:"issueType,omitempty" tf:"issue_type,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The password for the Ansible Tower account
	// The password for the Jira profile
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (String) The project key of the Jira issue to be created by this notification
	// The project key of the Jira issue to be created by this notification
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the Jira API endpoint
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The username of the Ansible Tower account
	// The username of the Jira profile
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type JiraParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// (String) The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	// The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	// +kubebuilder:validation:Optional
	Description *string `json:"description" tf:"description,omitempty"`

	// (String) The type of the Jira issue to be created by this notification
	// The type of the Jira issue to be created by this notification
	// +kubebuilder:validation:Optional
	IssueType *string `json:"issueType" tf:"issue_type,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The password for the Ansible Tower account
	// The password for the Jira profile
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (String) The project key of the Jira issue to be created by this notification
	// The project key of the Jira issue to be created by this notification
	// +kubebuilder:validation:Optional
	ProjectKey *string `json:"projectKey" tf:"project_key,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Optional
	Summary *string `json:"summary" tf:"summary,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the Jira API endpoint
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The username of the Ansible Tower account
	// The username of the Jira profile
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`
}

type NotificationConfigInitParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// > EmailNotificationConfig  * PAGER_DUTY -> PagerDutyNotificationConfig  * WEBHOOK -> WebHookNotificationConfig  * SLACK -> SlackNotificationConfig  * HIPCHAT -> HipChatNotificationConfig  * VICTOROPS -> VictorOpsNotificationConfig  * SERVICE_NOW -> ServiceNowNotificationConfig  * XMATTERS -> XMattersNotificationConfig  * ANSIBLETOWER -> AnsibleTowerNotificationConfig  * OPS_GENIE -> OpsGenieNotificationConfig  * JIRA -> JiraNotificationConfig  * TRELLO -> TrelloNotificationConfig
	// Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` -> EmailNotificationConfig  * `PAGER_DUTY` -> PagerDutyNotificationConfig  * `WEBHOOK` -> WebHookNotificationConfig  * `SLACK` -> SlackNotificationConfig  * `HIPCHAT` -> HipChatNotificationConfig  * `VICTOROPS` -> VictorOpsNotificationConfig  * `SERVICE_NOW` -> ServiceNowNotificationConfig  * `XMATTERS` -> XMattersNotificationConfig  * `ANSIBLETOWER` -> AnsibleTowerNotificationConfig  * `OPS_GENIE` -> OpsGenieNotificationConfig  * `JIRA` -> JiraNotificationConfig  * `TRELLO` -> TrelloNotificationConfig
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type NotificationConfigObservation struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// > EmailNotificationConfig  * PAGER_DUTY -> PagerDutyNotificationConfig  * WEBHOOK -> WebHookNotificationConfig  * SLACK -> SlackNotificationConfig  * HIPCHAT -> HipChatNotificationConfig  * VICTOROPS -> VictorOpsNotificationConfig  * SERVICE_NOW -> ServiceNowNotificationConfig  * XMATTERS -> XMattersNotificationConfig  * ANSIBLETOWER -> AnsibleTowerNotificationConfig  * OPS_GENIE -> OpsGenieNotificationConfig  * JIRA -> JiraNotificationConfig  * TRELLO -> TrelloNotificationConfig
	// Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` -> EmailNotificationConfig  * `PAGER_DUTY` -> PagerDutyNotificationConfig  * `WEBHOOK` -> WebHookNotificationConfig  * `SLACK` -> SlackNotificationConfig  * `HIPCHAT` -> HipChatNotificationConfig  * `VICTOROPS` -> VictorOpsNotificationConfig  * `SERVICE_NOW` -> ServiceNowNotificationConfig  * `XMATTERS` -> XMattersNotificationConfig  * `ANSIBLETOWER` -> AnsibleTowerNotificationConfig  * `OPS_GENIE` -> OpsGenieNotificationConfig  * `JIRA` -> JiraNotificationConfig  * `TRELLO` -> TrelloNotificationConfig
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type NotificationConfigParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// > EmailNotificationConfig  * PAGER_DUTY -> PagerDutyNotificationConfig  * WEBHOOK -> WebHookNotificationConfig  * SLACK -> SlackNotificationConfig  * HIPCHAT -> HipChatNotificationConfig  * VICTOROPS -> VictorOpsNotificationConfig  * SERVICE_NOW -> ServiceNowNotificationConfig  * XMATTERS -> XMattersNotificationConfig  * ANSIBLETOWER -> AnsibleTowerNotificationConfig  * OPS_GENIE -> OpsGenieNotificationConfig  * JIRA -> JiraNotificationConfig  * TRELLO -> TrelloNotificationConfig
	// Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` -> EmailNotificationConfig  * `PAGER_DUTY` -> PagerDutyNotificationConfig  * `WEBHOOK` -> WebHookNotificationConfig  * `SLACK` -> SlackNotificationConfig  * `HIPCHAT` -> HipChatNotificationConfig  * `VICTOROPS` -> VictorOpsNotificationConfig  * `SERVICE_NOW` -> ServiceNowNotificationConfig  * `XMATTERS` -> XMattersNotificationConfig  * `ANSIBLETOWER` -> AnsibleTowerNotificationConfig  * `OPS_GENIE` -> OpsGenieNotificationConfig  * `JIRA` -> JiraNotificationConfig  * `TRELLO` -> TrelloNotificationConfig
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type NotificationInitParameters struct {

	// (Block List, Max: 1) Configuration for Ansible Tower Notification (see below for nested schema)
	// Configuration for Ansible Tower Notification
	AnsibleTower []AnsibleTowerInitParameters `json:"ansibleTower,omitempty" tf:"ansible_tower,omitempty"`

	// (Block List, Max: 1) Configuration for Generic Notification (see below for nested schema)
	// Configuration for Generic Notification
	Config []NotificationConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (Block List, Max: 1) Configuration for Email Notification (see below for nested schema)
	// Configuration for Email Notification
	Email []EmailInitParameters `json:"email,omitempty" tf:"email,omitempty"`

	// (Block List, Max: 1) Configuration for Jira Notification (see below for nested schema)
	// Configuration for Jira Notification
	Jira []JiraInitParameters `json:"jira,omitempty" tf:"jira,omitempty"`

	// (Block List, Max: 1) Configuration for OpsGenie Notification (see below for nested schema)
	// Configuration for OpsGenie Notification
	OpsGenie []OpsGenieInitParameters `json:"opsGenie,omitempty" tf:"ops_genie,omitempty"`

	// (Block List, Max: 1) Configuration for PagerDuty Notification (see below for nested schema)
	// Configuration for PagerDuty Notification
	PagerDuty []PagerDutyInitParameters `json:"pagerDuty,omitempty" tf:"pager_duty,omitempty"`

	// (Block List, Max: 1) Configuration for ServiceNow Notification (see below for nested schema)
	// Configuration for ServiceNow Notification
	ServiceNow []ServiceNowInitParameters `json:"serviceNow,omitempty" tf:"service_now,omitempty"`

	// (Block List, Max: 1) Configuration for Slack Notification (see below for nested schema)
	// Configuration for Slack Notification
	Slack []SlackInitParameters `json:"slack,omitempty" tf:"slack,omitempty"`

	// (Block List, Max: 1) Configuration for Trello Notification (see below for nested schema)
	// Configuration for Trello Notification
	Trello []TrelloInitParameters `json:"trello,omitempty" tf:"trello,omitempty"`

	// (Block List, Max: 1) Configuration for VictorOps Notification (see below for nested schema)
	// Configuration for VictorOps Notification
	VictorOps []VictorOpsInitParameters `json:"victorOps,omitempty" tf:"victor_ops,omitempty"`

	// (Block List, Max: 1) Configuration for WebHook Notification (see below for nested schema)
	// Configuration for WebHook Notification
	WebHook []WebHookInitParameters `json:"webHook,omitempty" tf:"web_hook,omitempty"`

	// (Block List, Max: 1) Configuration for XMatters Notification (see below for nested schema)
	// Configuration for XMatters Notification
	Xmatters []XmattersInitParameters `json:"xmatters,omitempty" tf:"xmatters,omitempty"`
}

type NotificationObservation struct {

	// (Block List, Max: 1) Configuration for Ansible Tower Notification (see below for nested schema)
	// Configuration for Ansible Tower Notification
	AnsibleTower []AnsibleTowerObservation `json:"ansibleTower,omitempty" tf:"ansible_tower,omitempty"`

	// (Block List, Max: 1) Configuration for Generic Notification (see below for nested schema)
	// Configuration for Generic Notification
	Config []NotificationConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// (Block List, Max: 1) Configuration for Email Notification (see below for nested schema)
	// Configuration for Email Notification
	Email []EmailObservation `json:"email,omitempty" tf:"email,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) Configuration for Jira Notification (see below for nested schema)
	// Configuration for Jira Notification
	Jira []JiraObservation `json:"jira,omitempty" tf:"jira,omitempty"`

	// (Block List, Max: 1) Configuration for OpsGenie Notification (see below for nested schema)
	// Configuration for OpsGenie Notification
	OpsGenie []OpsGenieObservation `json:"opsGenie,omitempty" tf:"ops_genie,omitempty"`

	// (Block List, Max: 1) Configuration for PagerDuty Notification (see below for nested schema)
	// Configuration for PagerDuty Notification
	PagerDuty []PagerDutyObservation `json:"pagerDuty,omitempty" tf:"pager_duty,omitempty"`

	// (Block List, Max: 1) Configuration for ServiceNow Notification (see below for nested schema)
	// Configuration for ServiceNow Notification
	ServiceNow []ServiceNowObservation `json:"serviceNow,omitempty" tf:"service_now,omitempty"`

	// (Block List, Max: 1) Configuration for Slack Notification (see below for nested schema)
	// Configuration for Slack Notification
	Slack []SlackObservation `json:"slack,omitempty" tf:"slack,omitempty"`

	// (Block List, Max: 1) Configuration for Trello Notification (see below for nested schema)
	// Configuration for Trello Notification
	Trello []TrelloObservation `json:"trello,omitempty" tf:"trello,omitempty"`

	// (Block List, Max: 1) Configuration for VictorOps Notification (see below for nested schema)
	// Configuration for VictorOps Notification
	VictorOps []VictorOpsObservation `json:"victorOps,omitempty" tf:"victor_ops,omitempty"`

	// (Block List, Max: 1) Configuration for WebHook Notification (see below for nested schema)
	// Configuration for WebHook Notification
	WebHook []WebHookObservation `json:"webHook,omitempty" tf:"web_hook,omitempty"`

	// (Block List, Max: 1) Configuration for XMatters Notification (see below for nested schema)
	// Configuration for XMatters Notification
	Xmatters []XmattersObservation `json:"xmatters,omitempty" tf:"xmatters,omitempty"`
}

type NotificationParameters struct {

	// (Block List, Max: 1) Configuration for Ansible Tower Notification (see below for nested schema)
	// Configuration for Ansible Tower Notification
	// +kubebuilder:validation:Optional
	AnsibleTower []AnsibleTowerParameters `json:"ansibleTower,omitempty" tf:"ansible_tower,omitempty"`

	// (Block List, Max: 1) Configuration for Generic Notification (see below for nested schema)
	// Configuration for Generic Notification
	// +kubebuilder:validation:Optional
	Config []NotificationConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (Block List, Max: 1) Configuration for Email Notification (see below for nested schema)
	// Configuration for Email Notification
	// +kubebuilder:validation:Optional
	Email []EmailParameters `json:"email,omitempty" tf:"email,omitempty"`

	// (Block List, Max: 1) Configuration for Jira Notification (see below for nested schema)
	// Configuration for Jira Notification
	// +kubebuilder:validation:Optional
	Jira []JiraParameters `json:"jira,omitempty" tf:"jira,omitempty"`

	// (Block List, Max: 1) Configuration for OpsGenie Notification (see below for nested schema)
	// Configuration for OpsGenie Notification
	// +kubebuilder:validation:Optional
	OpsGenie []OpsGenieParameters `json:"opsGenie,omitempty" tf:"ops_genie,omitempty"`

	// (Block List, Max: 1) Configuration for PagerDuty Notification (see below for nested schema)
	// Configuration for PagerDuty Notification
	// +kubebuilder:validation:Optional
	PagerDuty []PagerDutyParameters `json:"pagerDuty,omitempty" tf:"pager_duty,omitempty"`

	// (Block List, Max: 1) Configuration for ServiceNow Notification (see below for nested schema)
	// Configuration for ServiceNow Notification
	// +kubebuilder:validation:Optional
	ServiceNow []ServiceNowParameters `json:"serviceNow,omitempty" tf:"service_now,omitempty"`

	// (Block List, Max: 1) Configuration for Slack Notification (see below for nested schema)
	// Configuration for Slack Notification
	// +kubebuilder:validation:Optional
	Slack []SlackParameters `json:"slack,omitempty" tf:"slack,omitempty"`

	// (Block List, Max: 1) Configuration for Trello Notification (see below for nested schema)
	// Configuration for Trello Notification
	// +kubebuilder:validation:Optional
	Trello []TrelloParameters `json:"trello,omitempty" tf:"trello,omitempty"`

	// (Block List, Max: 1) Configuration for VictorOps Notification (see below for nested schema)
	// Configuration for VictorOps Notification
	// +kubebuilder:validation:Optional
	VictorOps []VictorOpsParameters `json:"victorOps,omitempty" tf:"victor_ops,omitempty"`

	// (Block List, Max: 1) Configuration for WebHook Notification (see below for nested schema)
	// Configuration for WebHook Notification
	// +kubebuilder:validation:Optional
	WebHook []WebHookParameters `json:"webHook,omitempty" tf:"web_hook,omitempty"`

	// (Block List, Max: 1) Configuration for XMatters Notification (see below for nested schema)
	// Configuration for XMatters Notification
	// +kubebuilder:validation:Optional
	Xmatters []XmattersParameters `json:"xmatters,omitempty" tf:"xmatters,omitempty"`
}

type OpsGenieInitParameters struct {

	// (String) The API key to access OpsGenie
	// The API key to access OpsGenie
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The region domain of the OpsGenie
	// The region domain of the OpsGenie
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) The content of the message.  You can use the following placeholders:  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem
	// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type OpsGenieObservation struct {

	// (String) The API key to access OpsGenie
	// The API key to access OpsGenie
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The region domain of the OpsGenie
	// The region domain of the OpsGenie
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) The content of the message.  You can use the following placeholders:  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem
	// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type OpsGenieParameters struct {

	// (String) The API key to access OpsGenie
	// The API key to access OpsGenie
	// +kubebuilder:validation:Optional
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// (String) The region domain of the OpsGenie
	// The region domain of the OpsGenie
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// (String) The content of the message.  You can use the following placeholders:  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem
	// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
	// +kubebuilder:validation:Optional
	Message *string `json:"message" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type PagerDutyInitParameters struct {

	// (String) The name of the PagerDuty account
	// The name of the PagerDuty account
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The API key to access PagerDuty
	// The API key to access PagerDuty
	ServiceAPIKey *string `json:"serviceApiKey,omitempty" tf:"service_api_key,omitempty"`

	// (String) The name of the service
	// The name of the service
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type PagerDutyObservation struct {

	// (String) The name of the PagerDuty account
	// The name of the PagerDuty account
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The API key to access PagerDuty
	// The API key to access PagerDuty
	ServiceAPIKey *string `json:"serviceApiKey,omitempty" tf:"service_api_key,omitempty"`

	// (String) The name of the service
	// The name of the service
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type PagerDutyParameters struct {

	// (String) The name of the PagerDuty account
	// The name of the PagerDuty account
	// +kubebuilder:validation:Optional
	Account *string `json:"account" tf:"account,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The API key to access PagerDuty
	// The API key to access PagerDuty
	// +kubebuilder:validation:Optional
	ServiceAPIKey *string `json:"serviceApiKey,omitempty" tf:"service_api_key,omitempty"`

	// (String) The name of the service
	// The name of the service
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ServiceNowInitParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the url field. You can only use one of them
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// (String) The content of the message.  You can use the following placeholders:  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem
	// The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The password for the Ansible Tower account
	// The username to the ServiceNow account
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (Boolean) Send events into ServiceNow ITOM (true)
	// Send events into ServiceNow ITOM (`true`)
	SendEvents *bool `json:"sendEvents,omitempty" tf:"send_events,omitempty"`

	// (Boolean) Send incidents into ServiceNow ITSM (true)
	// Send incidents into ServiceNow ITSM (`true`)
	SendIncidents *bool `json:"sendIncidents,omitempty" tf:"send_incidents,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The username of the Ansible Tower account
	// The username of the ServiceNow account.   Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ServiceNowObservation struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the url field. You can only use one of them
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// (String) The content of the message.  You can use the following placeholders:  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem
	// The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The password for the Ansible Tower account
	// The username to the ServiceNow account
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (Boolean) Send events into ServiceNow ITOM (true)
	// Send events into ServiceNow ITOM (`true`)
	SendEvents *bool `json:"sendEvents,omitempty" tf:"send_events,omitempty"`

	// (Boolean) Send incidents into ServiceNow ITSM (true)
	// Send incidents into ServiceNow ITSM (`true`)
	SendIncidents *bool `json:"sendIncidents,omitempty" tf:"send_incidents,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The username of the Ansible Tower account
	// The username of the ServiceNow account.   Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ServiceNowParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// (String) The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the url field. You can only use one of them
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// (String) The content of the message.  You can use the following placeholders:  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem
	// The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Optional
	Message *string `json:"message" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The password for the Ansible Tower account
	// The username to the ServiceNow account
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (Boolean) Send events into ServiceNow ITOM (true)
	// Send events into ServiceNow ITOM (`true`)
	// +kubebuilder:validation:Optional
	SendEvents *bool `json:"sendEvents" tf:"send_events,omitempty"`

	// (Boolean) Send incidents into ServiceNow ITSM (true)
	// Send incidents into ServiceNow ITSM (`true`)
	// +kubebuilder:validation:Optional
	SendIncidents *bool `json:"sendIncidents" tf:"send_incidents,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The username of the Ansible Tower account
	// The username of the ServiceNow account.   Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles
	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`
}

type SlackInitParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The channel (for example, #general) or the user (for example, @john.smith) to send the message to
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
	Channel *string `json:"channel,omitempty" tf:"channel,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type SlackObservation struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The channel (for example, #general) or the user (for example, @john.smith) to send the message to
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
	Channel *string `json:"channel,omitempty" tf:"channel,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type SlackParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// (String) The channel (for example, #general) or the user (for example, @john.smith) to send the message to
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
	// +kubebuilder:validation:Optional
	Channel *string `json:"channel" tf:"channel,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Optional
	Title *string `json:"title" tf:"title,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TrelloInitParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The application key for the Trello account
	// The application key for the Trello account
	ApplicationKey *string `json:"applicationKey,omitempty" tf:"application_key,omitempty"`

	// (String) The application token for the Trello account
	// The application token for the Trello account
	AuthorizationToken *string `json:"authorizationToken,omitempty" tf:"authorization_token,omitempty"`

	// (String) The Trello board to which the card should be assigned
	// The Trello board to which the card should be assigned
	BoardID *string `json:"boardId,omitempty" tf:"board_id,omitempty"`

	// (String) The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	// The description of the Trello card.   You can use same placeholders as in card text
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The Trello list to which the card should be assigned
	// The Trello list to which the card should be assigned
	ListID *string `json:"listId,omitempty" tf:"list_id,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The Trello list to which the card of the resolved problem should be assigned
	// The Trello list to which the card of the resolved problem should be assigned
	ResolvedListID *string `json:"resolvedListId,omitempty" tf:"resolved_list_id,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TrelloObservation struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The application key for the Trello account
	// The application key for the Trello account
	ApplicationKey *string `json:"applicationKey,omitempty" tf:"application_key,omitempty"`

	// (String) The application token for the Trello account
	// The application token for the Trello account
	AuthorizationToken *string `json:"authorizationToken,omitempty" tf:"authorization_token,omitempty"`

	// (String) The Trello board to which the card should be assigned
	// The Trello board to which the card should be assigned
	BoardID *string `json:"boardId,omitempty" tf:"board_id,omitempty"`

	// (String) The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	// The description of the Trello card.   You can use same placeholders as in card text
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The Trello list to which the card should be assigned
	// The Trello list to which the card should be assigned
	ListID *string `json:"listId,omitempty" tf:"list_id,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The Trello list to which the card of the resolved problem should be assigned
	// The Trello list to which the card of the resolved problem should be assigned
	ResolvedListID *string `json:"resolvedListId,omitempty" tf:"resolved_list_id,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TrelloParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// (String) The application key for the Trello account
	// The application key for the Trello account
	// +kubebuilder:validation:Optional
	ApplicationKey *string `json:"applicationKey" tf:"application_key,omitempty"`

	// (String) The application token for the Trello account
	// The application token for the Trello account
	// +kubebuilder:validation:Optional
	AuthorizationToken *string `json:"authorizationToken,omitempty" tf:"authorization_token,omitempty"`

	// (String) The Trello board to which the card should be assigned
	// The Trello board to which the card should be assigned
	// +kubebuilder:validation:Optional
	BoardID *string `json:"boardId" tf:"board_id,omitempty"`

	// (String) The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	// The description of the Trello card.   You can use same placeholders as in card text
	// +kubebuilder:validation:Optional
	Description *string `json:"description" tf:"description,omitempty"`

	// (String) The Trello list to which the card should be assigned
	// The Trello list to which the card should be assigned
	// +kubebuilder:validation:Optional
	ListID *string `json:"listId" tf:"list_id,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The Trello list to which the card of the resolved problem should be assigned
	// The Trello list to which the card of the resolved problem should be assigned
	// +kubebuilder:validation:Optional
	ResolvedListID *string `json:"resolvedListId" tf:"resolved_list_id,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Optional
	Text *string `json:"text" tf:"text,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type VictorOpsInitParameters struct {

	// (String) The API key to access OpsGenie
	// The API key for the target VictorOps account
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The content of the message.  You can use the following placeholders:  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The routing key, defining the group to be notified
	// The routing key, defining the group to be notified
	RoutingKey *string `json:"routingKey,omitempty" tf:"routing_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type VictorOpsObservation struct {

	// (String) The API key to access OpsGenie
	// The API key for the target VictorOps account
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (String) The content of the message.  You can use the following placeholders:  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The routing key, defining the group to be notified
	// The routing key, defining the group to be notified
	RoutingKey *string `json:"routingKey,omitempty" tf:"routing_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type VictorOpsParameters struct {

	// (String) The API key to access OpsGenie
	// The API key for the target VictorOps account
	// +kubebuilder:validation:Optional
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// (String) The content of the message.  You can use the following placeholders:  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem
	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
	// +kubebuilder:validation:Optional
	Message *string `json:"message" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The routing key, defining the group to be notified
	// The routing key, defining the group to be notified
	// +kubebuilder:validation:Optional
	RoutingKey *string `json:"routingKey" tf:"routing_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type WebHookInitParameters struct {

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (Block Set) A list of the additional HTTP headers (see below for nested schema)
	// A list of the additional HTTP headers
	Header []HeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Call webhook if new events merge into existing problems
	// Call webhook if new events merge into existing problems
	NotifyEventMerges *bool `json:"notifyEventMerges,omitempty" tf:"notify_event_merges,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the WebHook endpoint
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type WebHookObservation struct {

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (Block Set) A list of the additional HTTP headers (see below for nested schema)
	// A list of the additional HTTP headers
	Header []HeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) Call webhook if new events merge into existing problems
	// Call webhook if new events merge into existing problems
	NotifyEventMerges *bool `json:"notifyEventMerges,omitempty" tf:"notify_event_merges,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the WebHook endpoint
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type WebHookParameters struct {

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	// +kubebuilder:validation:Optional
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate" tf:"accept_any_certificate,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// (Block Set) A list of the additional HTTP headers (see below for nested schema)
	// A list of the additional HTTP headers
	// +kubebuilder:validation:Optional
	Header []HeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Boolean) Call webhook if new events merge into existing problems
	// Call webhook if new events merge into existing problems
	// +kubebuilder:validation:Optional
	NotifyEventMerges *bool `json:"notifyEventMerges,omitempty" tf:"notify_event_merges,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Optional
	Payload *string `json:"payload" tf:"payload,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the WebHook endpoint
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type XmattersHeaderInitParameters struct {

	// (String) The name of the notification configuration
	// The name of the HTTP header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the Authorization header, GET requests return the null value.  If you want update a notification configuration with an Authorization header which you want to remain intact, set the Authorization header with the null value
	// The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type XmattersHeaderObservation struct {

	// (String) The name of the notification configuration
	// The name of the HTTP header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the Authorization header, GET requests return the null value.  If you want update a notification configuration with an Authorization header which you want to remain intact, set the Authorization header with the null value
	// The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type XmattersHeaderParameters struct {

	// (String) The name of the notification configuration
	// The name of the HTTP header
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the Authorization header, GET requests return the null value.  If you want update a notification configuration with an Authorization header which you want to remain intact, set the Authorization header with the null value
	// The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type XmattersInitParameters struct {

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (Block Set) A list of the additional HTTP headers (see below for nested schema)
	// A list of the additional HTTP headers
	Header []XmattersHeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the xMatters WebHook
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type XmattersObservation struct {

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty" tf:"accept_any_certificate,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	AlertingProfile *string `json:"alertingProfile,omitempty" tf:"alerting_profile,omitempty"`

	// (Block Set) A list of the additional HTTP headers (see below for nested schema)
	// A list of the additional HTTP headers
	Header []XmattersHeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the xMatters WebHook
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type XmattersParameters struct {

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	// +kubebuilder:validation:Optional
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate" tf:"accept_any_certificate,omitempty"`

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active" tf:"active,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// (Block Set) A list of the additional HTTP headers (see below for nested schema)
	// A list of the additional HTTP headers
	// +kubebuilder:validation:Optional
	Header []XmattersHeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Optional
	Payload *string `json:"payload" tf:"payload,omitempty"`

	// (String) The URL of the Jira API endpoint
	// The URL of the xMatters WebHook
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

// NotificationSpec defines the desired state of Notification
type NotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NotificationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NotificationInitParameters `json:"initProvider,omitempty"`
}

// NotificationStatus defines the observed state of Notification.
type NotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Notification is the Schema for the Notifications API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type Notification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotificationSpec   `json:"spec"`
	Status            NotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationList contains a list of Notifications
type NotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Notification `json:"items"`
}

// Repository type metadata.
var (
	Notification_Kind             = "Notification"
	Notification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Notification_Kind}.String()
	Notification_KindAPIVersion   = Notification_Kind + "." + CRDGroupVersion.String()
	Notification_GroupVersionKind = CRDGroupVersion.WithKind(Notification_Kind)
)

func init() {
	SchemeBuilder.Register(&Notification{}, &NotificationList{})
}
