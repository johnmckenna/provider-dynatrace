// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskAnomaliesInitParameters struct {

	// (Block List, Max: 1) Narrows the rule usage down to disks, matching the specified criteria (see below for nested schema)
	// Narrows the rule usage down to disks, matching the specified criteria
	DiskName []DiskNameInitParameters `json:"diskName,omitempty" tf:"disk_name,omitempty"`

	// (Boolean) Disk event rule enabled/disabled
	// Disk event rule enabled/disabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
	// Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
	HostGroupID *string `json:"hostGroupId,omitempty" tf:"host_group_id,omitempty"`

	// (String) The metric to monitor. Possible values are: LOW_DISK_SPACE, LOW_INODES, READ_TIME_EXCEEDING and WRITE_TIME_EXCEEDING
	// The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the disk event rule
	// The name of the disk event rule
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The number of samples to evaluate
	// The number of samples to evaluate
	Samples *float64 `json:"samples,omitempty" tf:"samples,omitempty"`

	// (Block List, Max: 1) Narrows the rule usage down to the hosts matching the specified tags (see below for nested schema)
	// Narrows the rule usage down to the hosts matching the specified tags
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number) The threshold to trigger disk event.   * A percentage for LowDiskSpace or LowInodes metrics.   * In milliseconds for ReadTimeExceeding or WriteTimeExceeding metrics
	// The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// (Number) The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
	// The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
	ViolatingSamples *float64 `json:"violatingSamples,omitempty" tf:"violating_samples,omitempty"`
}

type DiskAnomaliesObservation struct {

	// (Block List, Max: 1) Narrows the rule usage down to disks, matching the specified criteria (see below for nested schema)
	// Narrows the rule usage down to disks, matching the specified criteria
	DiskName []DiskNameObservation `json:"diskName,omitempty" tf:"disk_name,omitempty"`

	// (Boolean) Disk event rule enabled/disabled
	// Disk event rule enabled/disabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
	// Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
	HostGroupID *string `json:"hostGroupId,omitempty" tf:"host_group_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The metric to monitor. Possible values are: LOW_DISK_SPACE, LOW_INODES, READ_TIME_EXCEEDING and WRITE_TIME_EXCEEDING
	// The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the disk event rule
	// The name of the disk event rule
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The number of samples to evaluate
	// The number of samples to evaluate
	Samples *float64 `json:"samples,omitempty" tf:"samples,omitempty"`

	// (Block List, Max: 1) Narrows the rule usage down to the hosts matching the specified tags (see below for nested schema)
	// Narrows the rule usage down to the hosts matching the specified tags
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number) The threshold to trigger disk event.   * A percentage for LowDiskSpace or LowInodes metrics.   * In milliseconds for ReadTimeExceeding or WriteTimeExceeding metrics
	// The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// (Number) The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
	// The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
	ViolatingSamples *float64 `json:"violatingSamples,omitempty" tf:"violating_samples,omitempty"`
}

type DiskAnomaliesParameters struct {

	// (Block List, Max: 1) Narrows the rule usage down to disks, matching the specified criteria (see below for nested schema)
	// Narrows the rule usage down to disks, matching the specified criteria
	// +kubebuilder:validation:Optional
	DiskName []DiskNameParameters `json:"diskName,omitempty" tf:"disk_name,omitempty"`

	// (Boolean) Disk event rule enabled/disabled
	// Disk event rule enabled/disabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
	// Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group
	// +kubebuilder:validation:Optional
	HostGroupID *string `json:"hostGroupId,omitempty" tf:"host_group_id,omitempty"`

	// (String) The metric to monitor. Possible values are: LOW_DISK_SPACE, LOW_INODES, READ_TIME_EXCEEDING and WRITE_TIME_EXCEEDING
	// The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and `WRITE_TIME_EXCEEDING`
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The name of the disk event rule
	// The name of the disk event rule
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The number of samples to evaluate
	// The number of samples to evaluate
	// +kubebuilder:validation:Optional
	Samples *float64 `json:"samples,omitempty" tf:"samples,omitempty"`

	// (Block List, Max: 1) Narrows the rule usage down to the hosts matching the specified tags (see below for nested schema)
	// Narrows the rule usage down to the hosts matching the specified tags
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number) The threshold to trigger disk event.   * A percentage for LowDiskSpace or LowInodes metrics.   * In milliseconds for ReadTimeExceeding or WriteTimeExceeding metrics
	// The threshold to trigger disk event.   * A percentage for `LowDiskSpace` or `LowInodes` metrics.   * In milliseconds for `ReadTimeExceeding` or `WriteTimeExceeding` metrics
	// +kubebuilder:validation:Optional
	Threshold *float64 `json:"threshold,omitempty" tf:"threshold,omitempty"`

	// (Number) The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
	// The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated samples
	// +kubebuilder:validation:Optional
	ViolatingSamples *float64 `json:"violatingSamples,omitempty" tf:"violating_samples,omitempty"`
}

type DiskNameInitParameters struct {

	// (String) Possible values are: CONTAINS, DOES_NOT_CONTAIN, DOES_NOT_EQUAL, DOES_NOT_START_WITH, EQUALS and STARTS_WITH
	// Possible values are: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS` and `STARTS_WITH`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Value to compare to
	// Value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DiskNameObservation struct {

	// (String) Possible values are: CONTAINS, DOES_NOT_CONTAIN, DOES_NOT_EQUAL, DOES_NOT_START_WITH, EQUALS and STARTS_WITH
	// Possible values are: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS` and `STARTS_WITH`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Value to compare to
	// Value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DiskNameParameters struct {

	// (String) Possible values are: CONTAINS, DOES_NOT_CONTAIN, DOES_NOT_EQUAL, DOES_NOT_START_WITH, EQUALS and STARTS_WITH
	// Possible values are: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS` and `STARTS_WITH`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) Value to compare to
	// Value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TagsFilterInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag. Custom tags have the tag value here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsFilterObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag. Custom tags have the tag value here
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsFilterParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (String) The key of the tag. Custom tags have the tag value here
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) Value to compare to
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsInitParameters struct {

	// (Block Set) A Tag Filter (see below for nested schema)
	// A Tag Filter
	Filter []TagsFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

type TagsObservation struct {

	// (Block Set) A Tag Filter (see below for nested schema)
	// A Tag Filter
	Filter []TagsFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`
}

type TagsParameters struct {

	// (Block Set) A Tag Filter (see below for nested schema)
	// A Tag Filter
	// +kubebuilder:validation:Optional
	Filter []TagsFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

// DiskAnomaliesSpec defines the desired state of DiskAnomalies
type DiskAnomaliesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiskAnomaliesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DiskAnomaliesInitParameters `json:"initProvider,omitempty"`
}

// DiskAnomaliesStatus defines the observed state of DiskAnomalies.
type DiskAnomaliesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiskAnomaliesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DiskAnomalies is the Schema for the DiskAnomaliess API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type DiskAnomalies struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metric) || (has(self.initProvider) && has(self.initProvider.metric))",message="spec.forProvider.metric is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.samples) || (has(self.initProvider) && has(self.initProvider.samples))",message="spec.forProvider.samples is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.threshold) || (has(self.initProvider) && has(self.initProvider.threshold))",message="spec.forProvider.threshold is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.violatingSamples) || (has(self.initProvider) && has(self.initProvider.violatingSamples))",message="spec.forProvider.violatingSamples is a required parameter"
	Spec   DiskAnomaliesSpec   `json:"spec"`
	Status DiskAnomaliesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiskAnomaliesList contains a list of DiskAnomaliess
type DiskAnomaliesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiskAnomalies `json:"items"`
}

// Repository type metadata.
var (
	DiskAnomalies_Kind             = "DiskAnomalies"
	DiskAnomalies_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DiskAnomalies_Kind}.String()
	DiskAnomalies_KindAPIVersion   = DiskAnomalies_Kind + "." + CRDGroupVersion.String()
	DiskAnomalies_GroupVersionKind = CRDGroupVersion.WithKind(DiskAnomalies_Kind)
)

func init() {
	SchemeBuilder.Register(&DiskAnomalies{}, &DiskAnomaliesList{})
}
