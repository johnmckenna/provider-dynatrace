// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BoundsInitParameters struct {

	// (Number) the height of the tile, in pixels
	// the height of the tile, in pixels
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (Number) the horizontal distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	// the horizontal distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	Left *float64 `json:"left,omitempty" tf:"left,omitempty"`

	// (Number) the vertical distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	// the vertical distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	Top *float64 `json:"top,omitempty" tf:"top,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (Number) the width of the tile, in pixels
	// the width of the tile, in pixels
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type BoundsObservation struct {

	// (Number) the height of the tile, in pixels
	// the height of the tile, in pixels
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (Number) the horizontal distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	// the horizontal distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	Left *float64 `json:"left,omitempty" tf:"left,omitempty"`

	// (Number) the vertical distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	// the vertical distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	Top *float64 `json:"top,omitempty" tf:"top,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (Number) the width of the tile, in pixels
	// the width of the tile, in pixels
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type BoundsParameters struct {

	// (Number) the height of the tile, in pixels
	// the height of the tile, in pixels
	// +kubebuilder:validation:Optional
	Height *float64 `json:"height" tf:"height,omitempty"`

	// (Number) the horizontal distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	// the horizontal distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	// +kubebuilder:validation:Optional
	Left *float64 `json:"left" tf:"left,omitempty"`

	// (Number) the vertical distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	// the vertical distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
	// +kubebuilder:validation:Optional
	Top *float64 `json:"top" tf:"top,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (Number) the width of the tile, in pixels
	// the width of the tile, in pixels
	// +kubebuilder:validation:Optional
	Width *float64 `json:"width" tf:"width,omitempty"`
}

type ChartConfigInitParameters struct {

	// axis limits
	// The optional custom y-axis limits
	// +mapType=granular
	AxisLimits map[string]*float64 `json:"axisLimits,omitempty" tf:"axis_limits,omitempty"`

	// (String) Either one of Bit, BitPerHour, BitPerMinute, BitPerSecond, Byte, BytePerHour, BytePerMinute, BytePerSecond, Cores, Count, Day, DecibelMilliWatt, GibiByte, Giga, GigaByte, Hour, KibiByte, KibiBytePerHour, KibiBytePerMinute, KibiBytePerSecond, Kilo, KiloByte, KiloBytePerHour, KiloBytePerMinute, KiloBytePerSecond, MebiByte, MebiBytePerHour, MebiBytePerMinute, MebiBytePerSecond, Mega, MegaByte, MegaBytePerHour, MegaBytePerMinute, MegaBytePerSecond, MicroSecond, MilliCores, MilliSecond, MilliSecondPerMinute, Minute, Month, NanoSecond, NanoSecondPerMinute, NotApplicable, PerHour, PerMinute, PerSecond, Percent, Pixel, Promille, Ratio, Second, State, Unspecified, Week, Year
	// Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
	LeftAxisCustomUnit *string `json:"leftAxisCustomUnit,omitempty" tf:"left_axis_custom_unit,omitempty"`

	// (Boolean) Defines if a legend should be shown
	// Defines if a legend should be shown
	Legend *bool `json:"legend,omitempty" tf:"legend,omitempty"`

	// (Block List) Additional information about charted metric (see below for nested schema)
	// Additional information about charted metric
	ResultMetadata []ResultMetadataInitParameters `json:"resultMetadata,omitempty" tf:"result_metadata,omitempty"`

	// (String) Either one of Bit, BitPerHour, BitPerMinute, BitPerSecond, Byte, BytePerHour, BytePerMinute, BytePerSecond, Cores, Count, Day, DecibelMilliWatt, GibiByte, Giga, GigaByte, Hour, KibiByte, KibiBytePerHour, KibiBytePerMinute, KibiBytePerSecond, Kilo, KiloByte, KiloBytePerHour, KiloBytePerMinute, KiloBytePerSecond, MebiByte, MebiBytePerHour, MebiBytePerMinute, MebiBytePerSecond, Mega, MegaByte, MegaBytePerHour, MegaBytePerMinute, MegaBytePerSecond, MicroSecond, MilliCores, MilliSecond, MilliSecondPerMinute, Minute, Month, NanoSecond, NanoSecondPerMinute, NotApplicable, PerHour, PerMinute, PerSecond, Percent, Pixel, Promille, Ratio, Second, State, Unspecified, Week, Year
	// Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
	RightAxisCustomUnit *string `json:"rightAxisCustomUnit,omitempty" tf:"right_axis_custom_unit,omitempty"`

	// (Block List) A list of charted metrics (see below for nested schema)
	// A list of charted metrics
	Series []SeriesInitParameters `json:"series,omitempty" tf:"series,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The type of the chart
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ChartConfigObservation struct {

	// axis limits
	// The optional custom y-axis limits
	// +mapType=granular
	AxisLimits map[string]*float64 `json:"axisLimits,omitempty" tf:"axis_limits,omitempty"`

	// (String) Either one of Bit, BitPerHour, BitPerMinute, BitPerSecond, Byte, BytePerHour, BytePerMinute, BytePerSecond, Cores, Count, Day, DecibelMilliWatt, GibiByte, Giga, GigaByte, Hour, KibiByte, KibiBytePerHour, KibiBytePerMinute, KibiBytePerSecond, Kilo, KiloByte, KiloBytePerHour, KiloBytePerMinute, KiloBytePerSecond, MebiByte, MebiBytePerHour, MebiBytePerMinute, MebiBytePerSecond, Mega, MegaByte, MegaBytePerHour, MegaBytePerMinute, MegaBytePerSecond, MicroSecond, MilliCores, MilliSecond, MilliSecondPerMinute, Minute, Month, NanoSecond, NanoSecondPerMinute, NotApplicable, PerHour, PerMinute, PerSecond, Percent, Pixel, Promille, Ratio, Second, State, Unspecified, Week, Year
	// Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
	LeftAxisCustomUnit *string `json:"leftAxisCustomUnit,omitempty" tf:"left_axis_custom_unit,omitempty"`

	// (Boolean) Defines if a legend should be shown
	// Defines if a legend should be shown
	Legend *bool `json:"legend,omitempty" tf:"legend,omitempty"`

	// (Block List) Additional information about charted metric (see below for nested schema)
	// Additional information about charted metric
	ResultMetadata []ResultMetadataObservation `json:"resultMetadata,omitempty" tf:"result_metadata,omitempty"`

	// (String) Either one of Bit, BitPerHour, BitPerMinute, BitPerSecond, Byte, BytePerHour, BytePerMinute, BytePerSecond, Cores, Count, Day, DecibelMilliWatt, GibiByte, Giga, GigaByte, Hour, KibiByte, KibiBytePerHour, KibiBytePerMinute, KibiBytePerSecond, Kilo, KiloByte, KiloBytePerHour, KiloBytePerMinute, KiloBytePerSecond, MebiByte, MebiBytePerHour, MebiBytePerMinute, MebiBytePerSecond, Mega, MegaByte, MegaBytePerHour, MegaBytePerMinute, MegaBytePerSecond, MicroSecond, MilliCores, MilliSecond, MilliSecondPerMinute, Minute, Month, NanoSecond, NanoSecondPerMinute, NotApplicable, PerHour, PerMinute, PerSecond, Percent, Pixel, Promille, Ratio, Second, State, Unspecified, Week, Year
	// Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
	RightAxisCustomUnit *string `json:"rightAxisCustomUnit,omitempty" tf:"right_axis_custom_unit,omitempty"`

	// (Block List) A list of charted metrics (see below for nested schema)
	// A list of charted metrics
	Series []SeriesObservation `json:"series,omitempty" tf:"series,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The type of the chart
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ChartConfigParameters struct {

	// axis limits
	// The optional custom y-axis limits
	// +kubebuilder:validation:Optional
	// +mapType=granular
	AxisLimits map[string]*float64 `json:"axisLimits,omitempty" tf:"axis_limits,omitempty"`

	// (String) Either one of Bit, BitPerHour, BitPerMinute, BitPerSecond, Byte, BytePerHour, BytePerMinute, BytePerSecond, Cores, Count, Day, DecibelMilliWatt, GibiByte, Giga, GigaByte, Hour, KibiByte, KibiBytePerHour, KibiBytePerMinute, KibiBytePerSecond, Kilo, KiloByte, KiloBytePerHour, KiloBytePerMinute, KiloBytePerSecond, MebiByte, MebiBytePerHour, MebiBytePerMinute, MebiBytePerSecond, Mega, MegaByte, MegaBytePerHour, MegaBytePerMinute, MegaBytePerSecond, MicroSecond, MilliCores, MilliSecond, MilliSecondPerMinute, Minute, Month, NanoSecond, NanoSecondPerMinute, NotApplicable, PerHour, PerMinute, PerSecond, Percent, Pixel, Promille, Ratio, Second, State, Unspecified, Week, Year
	// Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
	// +kubebuilder:validation:Optional
	LeftAxisCustomUnit *string `json:"leftAxisCustomUnit,omitempty" tf:"left_axis_custom_unit,omitempty"`

	// (Boolean) Defines if a legend should be shown
	// Defines if a legend should be shown
	// +kubebuilder:validation:Optional
	Legend *bool `json:"legend,omitempty" tf:"legend,omitempty"`

	// (Block List) Additional information about charted metric (see below for nested schema)
	// Additional information about charted metric
	// +kubebuilder:validation:Optional
	ResultMetadata []ResultMetadataParameters `json:"resultMetadata,omitempty" tf:"result_metadata,omitempty"`

	// (String) Either one of Bit, BitPerHour, BitPerMinute, BitPerSecond, Byte, BytePerHour, BytePerMinute, BytePerSecond, Cores, Count, Day, DecibelMilliWatt, GibiByte, Giga, GigaByte, Hour, KibiByte, KibiBytePerHour, KibiBytePerMinute, KibiBytePerSecond, Kilo, KiloByte, KiloBytePerHour, KiloBytePerMinute, KiloBytePerSecond, MebiByte, MebiBytePerHour, MebiBytePerMinute, MebiBytePerSecond, Mega, MegaByte, MegaBytePerHour, MegaBytePerMinute, MegaBytePerSecond, MicroSecond, MilliCores, MilliSecond, MilliSecondPerMinute, Minute, Month, NanoSecond, NanoSecondPerMinute, NotApplicable, PerHour, PerMinute, PerSecond, Percent, Pixel, Promille, Ratio, Second, State, Unspecified, Week, Year
	// Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
	// +kubebuilder:validation:Optional
	RightAxisCustomUnit *string `json:"rightAxisCustomUnit,omitempty" tf:"right_axis_custom_unit,omitempty"`

	// (Block List) A list of charted metrics (see below for nested schema)
	// A list of charted metrics
	// +kubebuilder:validation:Optional
	Series []SeriesParameters `json:"series,omitempty" tf:"series,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The type of the chart
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConfigInitParameters struct {

	// (String) The color of the metric in the chart, hex format
	// The color of the metric in the chart, hex format
	CustomColor *string `json:"customColor,omitempty" tf:"custom_color,omitempty"`

	// (String) A generated key by the Dynatrace Server
	// A generated key by the Dynatrace Server
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Number) The timestamp of the last metadata modification, in UTC milliseconds
	// The timestamp of the last metadata modification, in UTC milliseconds
	LastModified *float64 `json:"lastModified,omitempty" tf:"last_modified,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConfigObservation struct {

	// (String) The color of the metric in the chart, hex format
	// The color of the metric in the chart, hex format
	CustomColor *string `json:"customColor,omitempty" tf:"custom_color,omitempty"`

	// (String) A generated key by the Dynatrace Server
	// A generated key by the Dynatrace Server
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Number) The timestamp of the last metadata modification, in UTC milliseconds
	// The timestamp of the last metadata modification, in UTC milliseconds
	LastModified *float64 `json:"lastModified,omitempty" tf:"last_modified,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConfigParameters struct {

	// (String) The color of the metric in the chart, hex format
	// The color of the metric in the chart, hex format
	// +kubebuilder:validation:Optional
	CustomColor *string `json:"customColor,omitempty" tf:"custom_color,omitempty"`

	// (String) A generated key by the Dynatrace Server
	// A generated key by the Dynatrace Server
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Number) The timestamp of the last metadata modification, in UTC milliseconds
	// The timestamp of the last metadata modification, in UTC milliseconds
	// +kubebuilder:validation:Optional
	LastModified *float64 `json:"lastModified,omitempty" tf:"last_modified,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DashboardInitParameters struct {

	// (Block List, Max: 1) contains parameters of a dashboard (see below for nested schema)
	// contains parameters of a dashboard
	DashboardMetadata []DashboardMetadataInitParameters `json:"dashboardMetadata,omitempty" tf:"dashboard_metadata,omitempty"`

	// (Block List, Max: 1, Deprecated) metadata exists for backwards compatibility but shouldn't get specified anymore (see below for nested schema)
	// `metadata` exists for backwards compatibility but shouldn't get specified anymore
	Metadata []DashboardMetadataInitParameters_2 `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Block List) the tiles this Dashboard consist of (see below for nested schema)
	// the tiles this Dashboard consist of
	Tile []TileInitParameters `json:"tile,omitempty" tf:"tile,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DashboardMetadataFilterInitParameters struct {

	// (Block List) the management zone this dashboard applies to (see below for nested schema)
	// the management zone this dashboard applies to
	ManagementZone []FilterManagementZoneInitParameters `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// (String) the default timeframe of the dashboard
	// the default timeframe of the dashboard
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DashboardMetadataFilterObservation struct {

	// (Block List) the management zone this dashboard applies to (see below for nested schema)
	// the management zone this dashboard applies to
	ManagementZone []FilterManagementZoneObservation `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// (String) the default timeframe of the dashboard
	// the default timeframe of the dashboard
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DashboardMetadataFilterParameters struct {

	// (Block List) the management zone this dashboard applies to (see below for nested schema)
	// the management zone this dashboard applies to
	// +kubebuilder:validation:Optional
	ManagementZone []FilterManagementZoneParameters `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// (String) the default timeframe of the dashboard
	// the default timeframe of the dashboard
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DashboardMetadataInitParameters struct {

	// (Boolean) The tile uses consistent colors when rendering its content
	// The tile uses consistent colors when rendering its content
	ConsistentColors *bool `json:"consistentColors,omitempty" tf:"consistent_colors,omitempty"`

	// (Block List, Max: 1) Dashboard filter configuration of a dashboard (see below for nested schema)
	// Dashboard filter configuration of a dashboard
	DynamicFilters []DynamicFiltersInitParameters `json:"dynamicFilters,omitempty" tf:"dynamic_filters,omitempty"`

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	// Global filter Settings for the Dashboard
	Filter []DashboardMetadataFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) the name of the dashboard
	// the name of the dashboard
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) the owner of the dashboard
	// the owner of the dashboard
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) the dashboard is a preset (true) or not (false). Default is false.
	// the dashboard is a preset (`true`) or not (`false`). Default is `false`.
	Preset *bool `json:"preset,omitempty" tf:"preset,omitempty"`

	// (Boolean, Deprecated) the dashboard is shared (true) or private (false)
	// the dashboard is shared (`true`) or private (`false`)
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// (Block List, Max: 1, Deprecated) represents sharing configuration of a dashboard (see below for nested schema)
	// represents sharing configuration of a dashboard
	SharingDetails []SharingDetailsInitParameters `json:"sharingDetails,omitempty" tf:"sharing_details,omitempty"`

	// (Set of String) a set of tags assigned to the dashboard
	// a set of tags assigned to the dashboard
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) No documentation available
	// No documentation available
	TilesNameSize *string `json:"tilesNameSize,omitempty" tf:"tiles_name_size,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (Set of String) a set of all possible global dashboard filters that can be applied to dashboard
	// a set of all possible global dashboard filters that can be applied to dashboard
	// +listType=set
	ValidFilterKeys []*string `json:"validFilterKeys,omitempty" tf:"valid_filter_keys,omitempty"`
}

type DashboardMetadataInitParameters_2 struct {

	// (String) Dynatrace server version
	// Dynatrace server version
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// (List of Number) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	ConfigurationVersions []*float64 `json:"configurationVersions,omitempty" tf:"configuration_versions,omitempty"`

	// (List of String) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	CurrentConfigurationVersions []*string `json:"currentConfigurationVersions,omitempty" tf:"current_configuration_versions,omitempty"`
}

type DashboardMetadataObservation struct {

	// (Boolean) The tile uses consistent colors when rendering its content
	// The tile uses consistent colors when rendering its content
	ConsistentColors *bool `json:"consistentColors,omitempty" tf:"consistent_colors,omitempty"`

	// (Block List, Max: 1) Dashboard filter configuration of a dashboard (see below for nested schema)
	// Dashboard filter configuration of a dashboard
	DynamicFilters []DynamicFiltersObservation `json:"dynamicFilters,omitempty" tf:"dynamic_filters,omitempty"`

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	// Global filter Settings for the Dashboard
	Filter []DashboardMetadataFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) the name of the dashboard
	// the name of the dashboard
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) the owner of the dashboard
	// the owner of the dashboard
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) the dashboard is a preset (true) or not (false). Default is false.
	// the dashboard is a preset (`true`) or not (`false`). Default is `false`.
	Preset *bool `json:"preset,omitempty" tf:"preset,omitempty"`

	// (Boolean, Deprecated) the dashboard is shared (true) or private (false)
	// the dashboard is shared (`true`) or private (`false`)
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// (Block List, Max: 1, Deprecated) represents sharing configuration of a dashboard (see below for nested schema)
	// represents sharing configuration of a dashboard
	SharingDetails []SharingDetailsObservation `json:"sharingDetails,omitempty" tf:"sharing_details,omitempty"`

	// (Set of String) a set of tags assigned to the dashboard
	// a set of tags assigned to the dashboard
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) No documentation available
	// No documentation available
	TilesNameSize *string `json:"tilesNameSize,omitempty" tf:"tiles_name_size,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (Set of String) a set of all possible global dashboard filters that can be applied to dashboard
	// a set of all possible global dashboard filters that can be applied to dashboard
	// +listType=set
	ValidFilterKeys []*string `json:"validFilterKeys,omitempty" tf:"valid_filter_keys,omitempty"`
}

type DashboardMetadataObservation_2 struct {

	// (String) Dynatrace server version
	// Dynatrace server version
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// (List of Number) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	ConfigurationVersions []*float64 `json:"configurationVersions,omitempty" tf:"configuration_versions,omitempty"`

	// (List of String) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	CurrentConfigurationVersions []*string `json:"currentConfigurationVersions,omitempty" tf:"current_configuration_versions,omitempty"`
}

type DashboardMetadataParameters struct {

	// (Boolean) The tile uses consistent colors when rendering its content
	// The tile uses consistent colors when rendering its content
	// +kubebuilder:validation:Optional
	ConsistentColors *bool `json:"consistentColors,omitempty" tf:"consistent_colors,omitempty"`

	// (Block List, Max: 1) Dashboard filter configuration of a dashboard (see below for nested schema)
	// Dashboard filter configuration of a dashboard
	// +kubebuilder:validation:Optional
	DynamicFilters []DynamicFiltersParameters `json:"dynamicFilters,omitempty" tf:"dynamic_filters,omitempty"`

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	// Global filter Settings for the Dashboard
	// +kubebuilder:validation:Optional
	Filter []DashboardMetadataFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) the name of the dashboard
	// the name of the dashboard
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) the owner of the dashboard
	// the owner of the dashboard
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner" tf:"owner,omitempty"`

	// (Boolean) the dashboard is a preset (true) or not (false). Default is false.
	// the dashboard is a preset (`true`) or not (`false`). Default is `false`.
	// +kubebuilder:validation:Optional
	Preset *bool `json:"preset,omitempty" tf:"preset,omitempty"`

	// (Boolean, Deprecated) the dashboard is shared (true) or private (false)
	// the dashboard is shared (`true`) or private (`false`)
	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// (Block List, Max: 1, Deprecated) represents sharing configuration of a dashboard (see below for nested schema)
	// represents sharing configuration of a dashboard
	// +kubebuilder:validation:Optional
	SharingDetails []SharingDetailsParameters `json:"sharingDetails,omitempty" tf:"sharing_details,omitempty"`

	// (Set of String) a set of tags assigned to the dashboard
	// a set of tags assigned to the dashboard
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String) No documentation available
	// No documentation available
	// +kubebuilder:validation:Optional
	TilesNameSize *string `json:"tilesNameSize,omitempty" tf:"tiles_name_size,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (Set of String) a set of all possible global dashboard filters that can be applied to dashboard
	// a set of all possible global dashboard filters that can be applied to dashboard
	// +kubebuilder:validation:Optional
	// +listType=set
	ValidFilterKeys []*string `json:"validFilterKeys,omitempty" tf:"valid_filter_keys,omitempty"`
}

type DashboardMetadataParameters_2 struct {

	// (String) Dynatrace server version
	// Dynatrace server version
	// +kubebuilder:validation:Optional
	ClusterVersion *string `json:"clusterVersion,omitempty" tf:"cluster_version,omitempty"`

	// (List of Number) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	// +kubebuilder:validation:Optional
	ConfigurationVersions []*float64 `json:"configurationVersions,omitempty" tf:"configuration_versions,omitempty"`

	// (List of String) A Sorted list of the version numbers of the configuration
	// A Sorted list of the version numbers of the configuration
	// +kubebuilder:validation:Optional
	CurrentConfigurationVersions []*string `json:"currentConfigurationVersions,omitempty" tf:"current_configuration_versions,omitempty"`
}

type DashboardObservation struct {

	// (Block List, Max: 1) contains parameters of a dashboard (see below for nested schema)
	// contains parameters of a dashboard
	DashboardMetadata []DashboardMetadataObservation `json:"dashboardMetadata,omitempty" tf:"dashboard_metadata,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1, Deprecated) metadata exists for backwards compatibility but shouldn't get specified anymore (see below for nested schema)
	// `metadata` exists for backwards compatibility but shouldn't get specified anymore
	Metadata []DashboardMetadataObservation_2 `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Block List) the tiles this Dashboard consist of (see below for nested schema)
	// the tiles this Dashboard consist of
	Tile []TileObservation `json:"tile,omitempty" tf:"tile,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DashboardParameters struct {

	// (Block List, Max: 1) contains parameters of a dashboard (see below for nested schema)
	// contains parameters of a dashboard
	// +kubebuilder:validation:Optional
	DashboardMetadata []DashboardMetadataParameters `json:"dashboardMetadata,omitempty" tf:"dashboard_metadata,omitempty"`

	// (Block List, Max: 1, Deprecated) metadata exists for backwards compatibility but shouldn't get specified anymore (see below for nested schema)
	// `metadata` exists for backwards compatibility but shouldn't get specified anymore
	// +kubebuilder:validation:Optional
	Metadata []DashboardMetadataParameters_2 `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Block List) the tiles this Dashboard consist of (see below for nested schema)
	// the tiles this Dashboard consist of
	// +kubebuilder:validation:Optional
	Tile []TileParameters `json:"tile,omitempty" tf:"tile,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DynamicFiltersInitParameters struct {

	// (Set of String) A set of all possible global dashboard filters that can be applied to a dashboard
	// A set of all possible global dashboard filters that can be applied to a dashboard
	//
	// Currently supported values are:
	//
	// OS_TYPE,
	// SERVICE_TYPE,
	// DEPLOYMENT_TYPE,
	// APPLICATION_INJECTION_TYPE,
	// PAAS_VENDOR_TYPE,
	// DATABASE_VENDOR,
	// HOST_VIRTUALIZATION_TYPE,
	// HOST_MONITORING_MODE,
	// KUBERNETES_CLUSTER,
	// RELATED_CLOUD_APPLICATION,
	// RELATED_NAMESPACE,
	// TAG_KEY:<tagname>
	// +listType=set
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (Block List, Max: 1) A set of generic tag filters that can be applied to a dashboard (see below for nested schema)
	// A set of generic tag filters that can be applied to a dashboard
	GenericTagFilters []GenericTagFiltersInitParameters `json:"genericTagFilters,omitempty" tf:"generic_tag_filters,omitempty"`

	// (Set of String) A set of entities applied for tag filter suggestions. You can fetch the list of possible values with the GET all entity typesrequest.
	// A set of entities applied for tag filter suggestions. You can fetch the list of possible values with the [GET all entity types](https://dt-url.net/dw03s7h)request.
	//
	// Only applicable if the **filters** set includes `TAG_KEY:<tagname>`
	// +listType=set
	TagSuggestionTypes []*string `json:"tagSuggestionTypes,omitempty" tf:"tag_suggestion_types,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DynamicFiltersObservation struct {

	// (Set of String) A set of all possible global dashboard filters that can be applied to a dashboard
	// A set of all possible global dashboard filters that can be applied to a dashboard
	//
	// Currently supported values are:
	//
	// OS_TYPE,
	// SERVICE_TYPE,
	// DEPLOYMENT_TYPE,
	// APPLICATION_INJECTION_TYPE,
	// PAAS_VENDOR_TYPE,
	// DATABASE_VENDOR,
	// HOST_VIRTUALIZATION_TYPE,
	// HOST_MONITORING_MODE,
	// KUBERNETES_CLUSTER,
	// RELATED_CLOUD_APPLICATION,
	// RELATED_NAMESPACE,
	// TAG_KEY:<tagname>
	// +listType=set
	Filters []*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (Block List, Max: 1) A set of generic tag filters that can be applied to a dashboard (see below for nested schema)
	// A set of generic tag filters that can be applied to a dashboard
	GenericTagFilters []GenericTagFiltersObservation `json:"genericTagFilters,omitempty" tf:"generic_tag_filters,omitempty"`

	// (Set of String) A set of entities applied for tag filter suggestions. You can fetch the list of possible values with the GET all entity typesrequest.
	// A set of entities applied for tag filter suggestions. You can fetch the list of possible values with the [GET all entity types](https://dt-url.net/dw03s7h)request.
	//
	// Only applicable if the **filters** set includes `TAG_KEY:<tagname>`
	// +listType=set
	TagSuggestionTypes []*string `json:"tagSuggestionTypes,omitempty" tf:"tag_suggestion_types,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DynamicFiltersParameters struct {

	// (Set of String) A set of all possible global dashboard filters that can be applied to a dashboard
	// A set of all possible global dashboard filters that can be applied to a dashboard
	//
	// Currently supported values are:
	//
	// OS_TYPE,
	// SERVICE_TYPE,
	// DEPLOYMENT_TYPE,
	// APPLICATION_INJECTION_TYPE,
	// PAAS_VENDOR_TYPE,
	// DATABASE_VENDOR,
	// HOST_VIRTUALIZATION_TYPE,
	// HOST_MONITORING_MODE,
	// KUBERNETES_CLUSTER,
	// RELATED_CLOUD_APPLICATION,
	// RELATED_NAMESPACE,
	// TAG_KEY:<tagname>
	// +kubebuilder:validation:Optional
	// +listType=set
	Filters []*string `json:"filters" tf:"filters,omitempty"`

	// (Block List, Max: 1) A set of generic tag filters that can be applied to a dashboard (see below for nested schema)
	// A set of generic tag filters that can be applied to a dashboard
	// +kubebuilder:validation:Optional
	GenericTagFilters []GenericTagFiltersParameters `json:"genericTagFilters,omitempty" tf:"generic_tag_filters,omitempty"`

	// (Set of String) A set of entities applied for tag filter suggestions. You can fetch the list of possible values with the GET all entity typesrequest.
	// A set of entities applied for tag filter suggestions. You can fetch the list of possible values with the [GET all entity types](https://dt-url.net/dw03s7h)request.
	//
	// Only applicable if the **filters** set includes `TAG_KEY:<tagname>`
	// +kubebuilder:validation:Optional
	// +listType=set
	TagSuggestionTypes []*string `json:"tagSuggestionTypes,omitempty" tf:"tag_suggestion_types,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type FilterConfigInitParameters struct {

	// (Block List, Max: 1) Configuration of a custom chart (see below for nested schema)
	// Configuration of a custom chart
	ChartConfig []ChartConfigInitParameters `json:"chartConfig,omitempty" tf:"chart_config,omitempty"`

	// (String) The name of the tile, set by user
	// The name of the tile, set by user
	CustomName *string `json:"customName,omitempty" tf:"custom_name,omitempty"`

	// (String) The default name of the tile
	// The default name of the tile
	DefaultName *string `json:"defaultName,omitempty" tf:"default_name,omitempty"`

	// (Set of String) A set of all possible global dashboard filters that can be applied to a dashboard
	// Configuration of a custom chart
	Filters []FiltersInitParameters `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The type of the filter. Possible values are `ALB`, `APPLICATION`, `APPLICATION_METHOD`, `APPMON`, `ASG`, `AWS_CREDENTIALS`, `AWS_CUSTOM_SERVICE`, `AWS_LAMBDA_FUNCTION`, `CLOUD_APPLICATION`, `CLOUD_APPLICATION_INSTANCE`, `CLOUD_APPLICATION_NAMESPACE`, `CONTAINER_GROUP_INSTANCE`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICES`, `CUSTOM_SERVICES`, `DATABASE`, `DATABASE_KEY_REQUEST`, `DCRUM_APPLICATION`, `DCRUM_ENTITY`, `DYNAMO_DB`, `EBS`, `EC2`, `ELB`, `ENVIRONMENT`, `ESXI`, `EXTERNAL_SYNTHETIC_TEST`, `GLOBAL_BACKGROUND_ACTIVITY`, `HOST`, `IOT`, `KUBERNETES_CLUSTER`, `KUBERNETES_NODE`, `MDA_SERVICE`, `MIXED`, `MOBILE_APPLICATION`, `MONITORED_ENTITY`, `NLB`, `PG_BACKGROUND_ACTIVITY`, `PROBLEM`, `PROCESS_GROUP_INSTANCE`, `RDS`, `REMOTE_PLUGIN`, `SERVICE`, `SERVICE_KEY_REQUEST`, `SYNTHETIC_BROWSER_MONITOR`, `SYNTHETIC_HTTPCHECK`, `SYNTHETIC_HTTPCHECK_STEP`, `SYNTHETIC_LOCATION`, `SYNTHETIC_TEST`, `SYNTHETIC_TEST_STEP`, `UI_ENTITY`, `VIRTUAL_MACHINE`, `WEB_CHECK`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type FilterConfigObservation struct {

	// (Block List, Max: 1) Configuration of a custom chart (see below for nested schema)
	// Configuration of a custom chart
	ChartConfig []ChartConfigObservation `json:"chartConfig,omitempty" tf:"chart_config,omitempty"`

	// (String) The name of the tile, set by user
	// The name of the tile, set by user
	CustomName *string `json:"customName,omitempty" tf:"custom_name,omitempty"`

	// (String) The default name of the tile
	// The default name of the tile
	DefaultName *string `json:"defaultName,omitempty" tf:"default_name,omitempty"`

	// (Set of String) A set of all possible global dashboard filters that can be applied to a dashboard
	// Configuration of a custom chart
	Filters []FiltersObservation `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The type of the filter. Possible values are `ALB`, `APPLICATION`, `APPLICATION_METHOD`, `APPMON`, `ASG`, `AWS_CREDENTIALS`, `AWS_CUSTOM_SERVICE`, `AWS_LAMBDA_FUNCTION`, `CLOUD_APPLICATION`, `CLOUD_APPLICATION_INSTANCE`, `CLOUD_APPLICATION_NAMESPACE`, `CONTAINER_GROUP_INSTANCE`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICES`, `CUSTOM_SERVICES`, `DATABASE`, `DATABASE_KEY_REQUEST`, `DCRUM_APPLICATION`, `DCRUM_ENTITY`, `DYNAMO_DB`, `EBS`, `EC2`, `ELB`, `ENVIRONMENT`, `ESXI`, `EXTERNAL_SYNTHETIC_TEST`, `GLOBAL_BACKGROUND_ACTIVITY`, `HOST`, `IOT`, `KUBERNETES_CLUSTER`, `KUBERNETES_NODE`, `MDA_SERVICE`, `MIXED`, `MOBILE_APPLICATION`, `MONITORED_ENTITY`, `NLB`, `PG_BACKGROUND_ACTIVITY`, `PROBLEM`, `PROCESS_GROUP_INSTANCE`, `RDS`, `REMOTE_PLUGIN`, `SERVICE`, `SERVICE_KEY_REQUEST`, `SYNTHETIC_BROWSER_MONITOR`, `SYNTHETIC_HTTPCHECK`, `SYNTHETIC_HTTPCHECK_STEP`, `SYNTHETIC_LOCATION`, `SYNTHETIC_TEST`, `SYNTHETIC_TEST_STEP`, `UI_ENTITY`, `VIRTUAL_MACHINE`, `WEB_CHECK`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type FilterConfigParameters struct {

	// (Block List, Max: 1) Configuration of a custom chart (see below for nested schema)
	// Configuration of a custom chart
	// +kubebuilder:validation:Optional
	ChartConfig []ChartConfigParameters `json:"chartConfig,omitempty" tf:"chart_config,omitempty"`

	// (String) The name of the tile, set by user
	// The name of the tile, set by user
	// +kubebuilder:validation:Optional
	CustomName *string `json:"customName" tf:"custom_name,omitempty"`

	// (String) The default name of the tile
	// The default name of the tile
	// +kubebuilder:validation:Optional
	DefaultName *string `json:"defaultName" tf:"default_name,omitempty"`

	// (Set of String) A set of all possible global dashboard filters that can be applied to a dashboard
	// Configuration of a custom chart
	// +kubebuilder:validation:Optional
	Filters []FiltersParameters `json:"filters,omitempty" tf:"filters,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The type of the filter. Possible values are `ALB`, `APPLICATION`, `APPLICATION_METHOD`, `APPMON`, `ASG`, `AWS_CREDENTIALS`, `AWS_CUSTOM_SERVICE`, `AWS_LAMBDA_FUNCTION`, `CLOUD_APPLICATION`, `CLOUD_APPLICATION_INSTANCE`, `CLOUD_APPLICATION_NAMESPACE`, `CONTAINER_GROUP_INSTANCE`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICES`, `CUSTOM_SERVICES`, `DATABASE`, `DATABASE_KEY_REQUEST`, `DCRUM_APPLICATION`, `DCRUM_ENTITY`, `DYNAMO_DB`, `EBS`, `EC2`, `ELB`, `ENVIRONMENT`, `ESXI`, `EXTERNAL_SYNTHETIC_TEST`, `GLOBAL_BACKGROUND_ACTIVITY`, `HOST`, `IOT`, `KUBERNETES_CLUSTER`, `KUBERNETES_NODE`, `MDA_SERVICE`, `MIXED`, `MOBILE_APPLICATION`, `MONITORED_ENTITY`, `NLB`, `PG_BACKGROUND_ACTIVITY`, `PROBLEM`, `PROCESS_GROUP_INSTANCE`, `RDS`, `REMOTE_PLUGIN`, `SERVICE`, `SERVICE_KEY_REQUEST`, `SYNTHETIC_BROWSER_MONITOR`, `SYNTHETIC_HTTPCHECK`, `SYNTHETIC_HTTPCHECK_STEP`, `SYNTHETIC_LOCATION`, `SYNTHETIC_TEST`, `SYNTHETIC_TEST_STEP`, `UI_ENTITY`, `VIRTUAL_MACHINE`, `WEB_CHECK`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type FilterManagementZoneInitParameters struct {

	// (String) a short description of the Dynatrace entity
	// a short description of the Dynatrace entity
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	// the ID of the Dynatrace entity
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) the name of the dashboard
	// the name of the Dynatrace entity
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type FilterManagementZoneObservation struct {

	// (String) a short description of the Dynatrace entity
	// a short description of the Dynatrace entity
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	// the ID of the Dynatrace entity
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) the name of the dashboard
	// the name of the Dynatrace entity
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type FilterManagementZoneParameters struct {

	// (String) a short description of the Dynatrace entity
	// a short description of the Dynatrace entity
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	// the ID of the Dynatrace entity
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// (String) the name of the dashboard
	// the name of the Dynatrace entity
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type FiltersFilterInitParameters struct {

	// (String) The visualization of the timeseries chart
	// The entity type (e.g. HOST, SERVICE, ...)
	EntityType *string `json:"entityType,omitempty" tf:"entity_type,omitempty"`

	// (Block List) the tiles this Dashboard consist of (see below for nested schema)
	// the tiles this Dashboard consist of
	Match []MatchInitParameters `json:"match,omitempty" tf:"match,omitempty"`
}

type FiltersFilterObservation struct {

	// (String) The visualization of the timeseries chart
	// The entity type (e.g. HOST, SERVICE, ...)
	EntityType *string `json:"entityType,omitempty" tf:"entity_type,omitempty"`

	// (Block List) the tiles this Dashboard consist of (see below for nested schema)
	// the tiles this Dashboard consist of
	Match []MatchObservation `json:"match,omitempty" tf:"match,omitempty"`
}

type FiltersFilterParameters struct {

	// (String) The visualization of the timeseries chart
	// The entity type (e.g. HOST, SERVICE, ...)
	// +kubebuilder:validation:Optional
	EntityType *string `json:"entityType" tf:"entity_type,omitempty"`

	// (Block List) the tiles this Dashboard consist of (see below for nested schema)
	// the tiles this Dashboard consist of
	// +kubebuilder:validation:Optional
	Match []MatchParameters `json:"match,omitempty" tf:"match,omitempty"`
}

type FiltersInitParameters struct {

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	// the tiles this Dashboard consist of
	Filter []FiltersFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

type FiltersObservation struct {

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	// the tiles this Dashboard consist of
	Filter []FiltersFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`
}

type FiltersParameters struct {

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	// the tiles this Dashboard consist of
	// +kubebuilder:validation:Optional
	Filter []FiltersFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

type GenericTagFiltersFilterInitParameters struct {

	// (Set of String) Entity types affected by tag
	// Entity types affected by tag
	// +listType=set
	EntityTypes []*string `json:"entityTypes,omitempty" tf:"entity_types,omitempty"`

	// (String) the name of the dashboard
	// The display name used to identify this generic filter
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The entity type for which the suggestions should be provided.
	// The entity type for which the suggestions should be provided.
	SuggestionsFromEntityType *string `json:"suggestionsFromEntityType,omitempty" tf:"suggestions_from_entity_type,omitempty"`

	// (String) The tag key for this filter
	// The tag key for this filter
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`
}

type GenericTagFiltersFilterObservation struct {

	// (Set of String) Entity types affected by tag
	// Entity types affected by tag
	// +listType=set
	EntityTypes []*string `json:"entityTypes,omitempty" tf:"entity_types,omitempty"`

	// (String) the name of the dashboard
	// The display name used to identify this generic filter
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The entity type for which the suggestions should be provided.
	// The entity type for which the suggestions should be provided.
	SuggestionsFromEntityType *string `json:"suggestionsFromEntityType,omitempty" tf:"suggestions_from_entity_type,omitempty"`

	// (String) The tag key for this filter
	// The tag key for this filter
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`
}

type GenericTagFiltersFilterParameters struct {

	// (Set of String) Entity types affected by tag
	// Entity types affected by tag
	// +kubebuilder:validation:Optional
	// +listType=set
	EntityTypes []*string `json:"entityTypes" tf:"entity_types,omitempty"`

	// (String) the name of the dashboard
	// The display name used to identify this generic filter
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The entity type for which the suggestions should be provided.
	// The entity type for which the suggestions should be provided.
	// +kubebuilder:validation:Optional
	SuggestionsFromEntityType *string `json:"suggestionsFromEntityType,omitempty" tf:"suggestions_from_entity_type,omitempty"`

	// (String) The tag key for this filter
	// The tag key for this filter
	// +kubebuilder:validation:Optional
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`
}

type GenericTagFiltersInitParameters struct {

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	Filter []GenericTagFiltersFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

type GenericTagFiltersObservation struct {

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	Filter []GenericTagFiltersFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`
}

type GenericTagFiltersParameters struct {

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	// +kubebuilder:validation:Optional
	Filter []GenericTagFiltersFilterParameters `json:"filter" tf:"filter,omitempty"`
}

type MatchInitParameters struct {

	// (String) A generated key by the Dynatrace Server
	// The entity type (e.g. HOST, SERVICE, ...)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Set of String) The splitting value
	// the tiles this Dashboard consist of
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MatchObservation struct {

	// (String) A generated key by the Dynatrace Server
	// The entity type (e.g. HOST, SERVICE, ...)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Set of String) The splitting value
	// the tiles this Dashboard consist of
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MatchParameters struct {

	// (String) A generated key by the Dynatrace Server
	// The entity type (e.g. HOST, SERVICE, ...)
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (Set of String) The splitting value
	// the tiles this Dashboard consist of
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ResultMetadataInitParameters struct {

	// (Block List) Additional metadata for charted metric (see below for nested schema)
	// Additional metadata for charted metric
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`
}

type ResultMetadataObservation struct {

	// (Block List) Additional metadata for charted metric (see below for nested schema)
	// Additional metadata for charted metric
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`
}

type ResultMetadataParameters struct {

	// (Block List) Additional metadata for charted metric (see below for nested schema)
	// Additional metadata for charted metric
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`
}

type SeriesDimensionInitParameters struct {

	// (Boolean)
	EntityDimension *bool `json:"entityDimension,omitempty" tf:"entity_dimension,omitempty"`

	// (String) The ID of this resource.
	// The ID of the dimension by which the metric is split
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) the name of the dashboard
	// The name of the dimension by which the metric is split
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (Set of String) The splitting value
	// The splitting value
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SeriesDimensionObservation struct {

	// (Boolean)
	EntityDimension *bool `json:"entityDimension,omitempty" tf:"entity_dimension,omitempty"`

	// (String) The ID of this resource.
	// The ID of the dimension by which the metric is split
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) the name of the dashboard
	// The name of the dimension by which the metric is split
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (Set of String) The splitting value
	// The splitting value
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SeriesDimensionParameters struct {

	// (Boolean)
	// +kubebuilder:validation:Optional
	EntityDimension *bool `json:"entityDimension,omitempty" tf:"entity_dimension,omitempty"`

	// (String) The ID of this resource.
	// The ID of the dimension by which the metric is split
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// (String) the name of the dashboard
	// The name of the dimension by which the metric is split
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (Set of String) The splitting value
	// The splitting value
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SeriesInitParameters struct {

	// (String) The charted aggregation of the metric
	// The charted aggregation of the metric
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// (String)
	AggregationRate *string `json:"aggregationRate,omitempty" tf:"aggregation_rate,omitempty"`

	// (Block List) Configuration of the charted metric splitting (see below for nested schema)
	// Configuration of the charted metric splitting
	Dimension []SeriesDimensionInitParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// (String) The visualization of the timeseries chart
	// The visualization of the timeseries chart
	EntityType *string `json:"entityType,omitempty" tf:"entity_type,omitempty"`

	// (String) The metric assigned to the tile
	// The name of the charted metric
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (Number) The charted percentile. Only applicable if the aggregation is set to PERCENTILE
	// The charted percentile. Only applicable if the **aggregation** is set to `PERCENTILE`
	Percentile *float64 `json:"percentile,omitempty" tf:"percentile,omitempty"`

	// (Boolean) Sort ascending (true) or descending (false)
	// Sort ascending (`true`) or descending (`false`)
	SortAscending *bool `json:"sortAscending,omitempty" tf:"sort_ascending,omitempty"`

	// (Boolean) Sort the column (true) or (false)
	// Sort the column (`true`) or (`false`)
	SortColumn *bool `json:"sortColumn,omitempty" tf:"sort_column,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The visualization of the timeseries chart. Possible values are `AREA`, `BAR` and `LINE`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type SeriesObservation struct {

	// (String) The charted aggregation of the metric
	// The charted aggregation of the metric
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// (String)
	AggregationRate *string `json:"aggregationRate,omitempty" tf:"aggregation_rate,omitempty"`

	// (Block List) Configuration of the charted metric splitting (see below for nested schema)
	// Configuration of the charted metric splitting
	Dimension []SeriesDimensionObservation `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// (String) The visualization of the timeseries chart
	// The visualization of the timeseries chart
	EntityType *string `json:"entityType,omitempty" tf:"entity_type,omitempty"`

	// (String) The metric assigned to the tile
	// The name of the charted metric
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (Number) The charted percentile. Only applicable if the aggregation is set to PERCENTILE
	// The charted percentile. Only applicable if the **aggregation** is set to `PERCENTILE`
	Percentile *float64 `json:"percentile,omitempty" tf:"percentile,omitempty"`

	// (Boolean) Sort ascending (true) or descending (false)
	// Sort ascending (`true`) or descending (`false`)
	SortAscending *bool `json:"sortAscending,omitempty" tf:"sort_ascending,omitempty"`

	// (Boolean) Sort the column (true) or (false)
	// Sort the column (`true`) or (`false`)
	SortColumn *bool `json:"sortColumn,omitempty" tf:"sort_column,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The visualization of the timeseries chart. Possible values are `AREA`, `BAR` and `LINE`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type SeriesParameters struct {

	// (String) The charted aggregation of the metric
	// The charted aggregation of the metric
	// +kubebuilder:validation:Optional
	Aggregation *string `json:"aggregation" tf:"aggregation,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	AggregationRate *string `json:"aggregationRate,omitempty" tf:"aggregation_rate,omitempty"`

	// (Block List) Configuration of the charted metric splitting (see below for nested schema)
	// Configuration of the charted metric splitting
	// +kubebuilder:validation:Optional
	Dimension []SeriesDimensionParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// (String) The visualization of the timeseries chart
	// The visualization of the timeseries chart
	// +kubebuilder:validation:Optional
	EntityType *string `json:"entityType" tf:"entity_type,omitempty"`

	// (String) The metric assigned to the tile
	// The name of the charted metric
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric" tf:"metric,omitempty"`

	// (Number) The charted percentile. Only applicable if the aggregation is set to PERCENTILE
	// The charted percentile. Only applicable if the **aggregation** is set to `PERCENTILE`
	// +kubebuilder:validation:Optional
	Percentile *float64 `json:"percentile,omitempty" tf:"percentile,omitempty"`

	// (Boolean) Sort ascending (true) or descending (false)
	// Sort ascending (`true`) or descending (`false`)
	// +kubebuilder:validation:Optional
	SortAscending *bool `json:"sortAscending,omitempty" tf:"sort_ascending,omitempty"`

	// (Boolean) Sort the column (true) or (false)
	// Sort the column (`true`) or (`false`)
	// +kubebuilder:validation:Optional
	SortColumn *bool `json:"sortColumn,omitempty" tf:"sort_column,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The visualization of the timeseries chart. Possible values are `AREA`, `BAR` and `LINE`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type SharingDetailsInitParameters struct {

	// (Boolean) If true, the dashboard is shared via link and authenticated users with the link can view
	// If `true`, the dashboard is shared via link and authenticated users with the link can view
	LinkShared *bool `json:"linkShared,omitempty" tf:"link_shared,omitempty"`

	// (Boolean) If true, the dashboard is published to anyone on this environment
	// If `true`, the dashboard is published to anyone on this environment
	Published *bool `json:"published,omitempty" tf:"published,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type SharingDetailsObservation struct {

	// (Boolean) If true, the dashboard is shared via link and authenticated users with the link can view
	// If `true`, the dashboard is shared via link and authenticated users with the link can view
	LinkShared *bool `json:"linkShared,omitempty" tf:"link_shared,omitempty"`

	// (Boolean) If true, the dashboard is published to anyone on this environment
	// If `true`, the dashboard is published to anyone on this environment
	Published *bool `json:"published,omitempty" tf:"published,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type SharingDetailsParameters struct {

	// (Boolean) If true, the dashboard is shared via link and authenticated users with the link can view
	// If `true`, the dashboard is shared via link and authenticated users with the link can view
	// +kubebuilder:validation:Optional
	LinkShared *bool `json:"linkShared,omitempty" tf:"link_shared,omitempty"`

	// (Boolean) If true, the dashboard is published to anyone on this environment
	// If `true`, the dashboard is published to anyone on this environment
	// +kubebuilder:validation:Optional
	Published *bool `json:"published,omitempty" tf:"published,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TileFilterInitParameters struct {

	// (Block List) the management zone this dashboard applies to (see below for nested schema)
	// the management zone this tile applies to
	ManagementZone []TileFilterManagementZoneInitParameters `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// (String) the default timeframe of the dashboard
	// the default timeframe of the tile
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TileFilterManagementZoneInitParameters struct {

	// (String) a short description of the Dynatrace entity
	// a short description of the Dynatrace entity
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	// the ID of the Dynatrace entity
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) the name of the dashboard
	// the name of the Dynatrace entity
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TileFilterManagementZoneObservation struct {

	// (String) a short description of the Dynatrace entity
	// a short description of the Dynatrace entity
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	// the ID of the Dynatrace entity
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) the name of the dashboard
	// the name of the Dynatrace entity
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TileFilterManagementZoneParameters struct {

	// (String) a short description of the Dynatrace entity
	// a short description of the Dynatrace entity
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The ID of this resource.
	// the ID of the Dynatrace entity
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// (String) the name of the dashboard
	// the name of the Dynatrace entity
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TileFilterObservation struct {

	// (Block List) the management zone this dashboard applies to (see below for nested schema)
	// the management zone this tile applies to
	ManagementZone []TileFilterManagementZoneObservation `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// (String) the default timeframe of the dashboard
	// the default timeframe of the tile
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TileFilterParameters struct {

	// (Block List) the management zone this dashboard applies to (see below for nested schema)
	// the management zone this tile applies to
	// +kubebuilder:validation:Optional
	ManagementZone []TileFilterManagementZoneParameters `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// (String) the default timeframe of the dashboard
	// the default timeframe of the tile
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TileInitParameters struct {

	// (List of String) The list of Dynatrace entities, assigned to the tile
	// The list of Dynatrace entities, assigned to the tile
	AssignedEntities []*string `json:"assignedEntities,omitempty" tf:"assigned_entities,omitempty"`

	// (Boolean) Auto Refresh is disabled (true)
	// Auto Refresh is disabled (`true`)
	AutoRefreshDisabled *bool `json:"autoRefreshDisabled,omitempty" tf:"auto_refresh_disabled,omitempty"`

	// (Block List, Max: 1) the position and size of a tile (see below for nested schema)
	// the position and size of a tile
	Bounds []BoundsInitParameters `json:"bounds,omitempty" tf:"bounds,omitempty"`

	// (Boolean)
	ChartVisible *bool `json:"chartVisible,omitempty" tf:"chart_visible,omitempty"`

	// (Boolean) The tile is configured and ready to use (true) or just placed on the dashboard (false)
	// The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
	Configured *bool `json:"configured,omitempty" tf:"configured,omitempty"`

	// (String) The name of the tile, set by user
	// The name of the tile, set by user
	CustomName *string `json:"customName,omitempty" tf:"custom_name,omitempty"`

	// (Boolean) Include (false') or exclude (true`) maintenance windows from availability calculations
	// Include (`false') or exclude (`true`) maintenance windows from availability calculations
	ExcludeMaintenanceWindows *bool `json:"excludeMaintenanceWindows,omitempty" tf:"exclude_maintenance_windows,omitempty"`

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	// is filter applied to a tile. It overrides dashboard's filter
	Filter []TileFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block List, Max: 1) the position and size of a tile (see below for nested schema)
	// the position and size of a tile
	FilterConfig []FilterConfigInitParameters `json:"filterConfig,omitempty" tf:"filter_config,omitempty"`

	// (Number) The limit of the results, if not set will use the default value of the system
	// The limit of the results, if not set will use the default value of the system
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// formatted content of the tile
	// The markdown-formatted content of the tile
	Markdown *string `json:"markdown,omitempty" tf:"markdown,omitempty"`

	// (String) The metric assigned to the tile
	// The metric assigned to the tile
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) the name of the dashboard
	// the name of the tile
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The size of the tile name. Possible values are small, medium and large.
	// The size of the tile name. Possible values are `small`, `medium` and `large`.
	NameSize *string `json:"nameSize,omitempty" tf:"name_size,omitempty"`

	// (String) A user session query executed by the tile
	// A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) the type of the tile. Must be either APPLICATION_WORLDMAP, RESOURCES, THIRD_PARTY_MOST_ACTIVE, UEM_CONVERSIONS_PER_GOAL, PROCESS_GROUPS_ONE or HOST .
	// the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
	TileType *string `json:"tileType,omitempty" tf:"tile_type,omitempty"`

	// (String) The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
	// The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
	TimeFrameShift *string `json:"timeFrameShift,omitempty" tf:"time_frame_shift,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The visualization of the tile. Possible values are: COLUMN_CHART, FUNNEL, LINE_CHART, PIE_CHART, SINGLE_VALUE, TABLE
	// The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
	Visualization *string `json:"visualization,omitempty" tf:"visualization,omitempty"`

	// (Block List, Max: 1) Configuration of a User session query visualization tile (see below for nested schema)
	// Configuration of a User session query visualization tile
	VisualizationConfig []VisualizationConfigInitParameters `json:"visualizationConfig,omitempty" tf:"visualization_config,omitempty"`
}

type TileObservation struct {

	// (List of String) The list of Dynatrace entities, assigned to the tile
	// The list of Dynatrace entities, assigned to the tile
	AssignedEntities []*string `json:"assignedEntities,omitempty" tf:"assigned_entities,omitempty"`

	// (Boolean) Auto Refresh is disabled (true)
	// Auto Refresh is disabled (`true`)
	AutoRefreshDisabled *bool `json:"autoRefreshDisabled,omitempty" tf:"auto_refresh_disabled,omitempty"`

	// (Block List, Max: 1) the position and size of a tile (see below for nested schema)
	// the position and size of a tile
	Bounds []BoundsObservation `json:"bounds,omitempty" tf:"bounds,omitempty"`

	// (Boolean)
	ChartVisible *bool `json:"chartVisible,omitempty" tf:"chart_visible,omitempty"`

	// (Boolean) The tile is configured and ready to use (true) or just placed on the dashboard (false)
	// The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
	Configured *bool `json:"configured,omitempty" tf:"configured,omitempty"`

	// (String) The name of the tile, set by user
	// The name of the tile, set by user
	CustomName *string `json:"customName,omitempty" tf:"custom_name,omitempty"`

	// (Boolean) Include (false') or exclude (true`) maintenance windows from availability calculations
	// Include (`false') or exclude (`true`) maintenance windows from availability calculations
	ExcludeMaintenanceWindows *bool `json:"excludeMaintenanceWindows,omitempty" tf:"exclude_maintenance_windows,omitempty"`

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	// is filter applied to a tile. It overrides dashboard's filter
	Filter []TileFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block List, Max: 1) the position and size of a tile (see below for nested schema)
	// the position and size of a tile
	FilterConfig []FilterConfigObservation `json:"filterConfig,omitempty" tf:"filter_config,omitempty"`

	// (Number) The limit of the results, if not set will use the default value of the system
	// The limit of the results, if not set will use the default value of the system
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// formatted content of the tile
	// The markdown-formatted content of the tile
	Markdown *string `json:"markdown,omitempty" tf:"markdown,omitempty"`

	// (String) The metric assigned to the tile
	// The metric assigned to the tile
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) the name of the dashboard
	// the name of the tile
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The size of the tile name. Possible values are small, medium and large.
	// The size of the tile name. Possible values are `small`, `medium` and `large`.
	NameSize *string `json:"nameSize,omitempty" tf:"name_size,omitempty"`

	// (String) A user session query executed by the tile
	// A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) the type of the tile. Must be either APPLICATION_WORLDMAP, RESOURCES, THIRD_PARTY_MOST_ACTIVE, UEM_CONVERSIONS_PER_GOAL, PROCESS_GROUPS_ONE or HOST .
	// the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
	TileType *string `json:"tileType,omitempty" tf:"tile_type,omitempty"`

	// (String) The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
	// The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
	TimeFrameShift *string `json:"timeFrameShift,omitempty" tf:"time_frame_shift,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The visualization of the tile. Possible values are: COLUMN_CHART, FUNNEL, LINE_CHART, PIE_CHART, SINGLE_VALUE, TABLE
	// The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
	Visualization *string `json:"visualization,omitempty" tf:"visualization,omitempty"`

	// (Block List, Max: 1) Configuration of a User session query visualization tile (see below for nested schema)
	// Configuration of a User session query visualization tile
	VisualizationConfig []VisualizationConfigObservation `json:"visualizationConfig,omitempty" tf:"visualization_config,omitempty"`
}

type TileParameters struct {

	// (List of String) The list of Dynatrace entities, assigned to the tile
	// The list of Dynatrace entities, assigned to the tile
	// +kubebuilder:validation:Optional
	AssignedEntities []*string `json:"assignedEntities,omitempty" tf:"assigned_entities,omitempty"`

	// (Boolean) Auto Refresh is disabled (true)
	// Auto Refresh is disabled (`true`)
	// +kubebuilder:validation:Optional
	AutoRefreshDisabled *bool `json:"autoRefreshDisabled,omitempty" tf:"auto_refresh_disabled,omitempty"`

	// (Block List, Max: 1) the position and size of a tile (see below for nested schema)
	// the position and size of a tile
	// +kubebuilder:validation:Optional
	Bounds []BoundsParameters `json:"bounds,omitempty" tf:"bounds,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	ChartVisible *bool `json:"chartVisible,omitempty" tf:"chart_visible,omitempty"`

	// (Boolean) The tile is configured and ready to use (true) or just placed on the dashboard (false)
	// The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
	// +kubebuilder:validation:Optional
	Configured *bool `json:"configured,omitempty" tf:"configured,omitempty"`

	// (String) The name of the tile, set by user
	// The name of the tile, set by user
	// +kubebuilder:validation:Optional
	CustomName *string `json:"customName,omitempty" tf:"custom_name,omitempty"`

	// (Boolean) Include (false') or exclude (true`) maintenance windows from availability calculations
	// Include (`false') or exclude (`true`) maintenance windows from availability calculations
	// +kubebuilder:validation:Optional
	ExcludeMaintenanceWindows *bool `json:"excludeMaintenanceWindows,omitempty" tf:"exclude_maintenance_windows,omitempty"`

	// (Block List, Max: 1) Global filter Settings for the Dashboard (see below for nested schema)
	// is filter applied to a tile. It overrides dashboard's filter
	// +kubebuilder:validation:Optional
	Filter []TileFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Block List, Max: 1) the position and size of a tile (see below for nested schema)
	// the position and size of a tile
	// +kubebuilder:validation:Optional
	FilterConfig []FilterConfigParameters `json:"filterConfig,omitempty" tf:"filter_config,omitempty"`

	// (Number) The limit of the results, if not set will use the default value of the system
	// The limit of the results, if not set will use the default value of the system
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// formatted content of the tile
	// The markdown-formatted content of the tile
	// +kubebuilder:validation:Optional
	Markdown *string `json:"markdown,omitempty" tf:"markdown,omitempty"`

	// (String) The metric assigned to the tile
	// The metric assigned to the tile
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) the name of the dashboard
	// the name of the tile
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The size of the tile name. Possible values are small, medium and large.
	// The size of the tile name. Possible values are `small`, `medium` and `large`.
	// +kubebuilder:validation:Optional
	NameSize *string `json:"nameSize,omitempty" tf:"name_size,omitempty"`

	// (String) A user session query executed by the tile
	// A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) the type of the tile. Must be either APPLICATION_WORLDMAP, RESOURCES, THIRD_PARTY_MOST_ACTIVE, UEM_CONVERSIONS_PER_GOAL, PROCESS_GROUPS_ONE or HOST .
	// the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
	// +kubebuilder:validation:Optional
	TileType *string `json:"tileType" tf:"tile_type,omitempty"`

	// (String) The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
	// The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
	// +kubebuilder:validation:Optional
	TimeFrameShift *string `json:"timeFrameShift,omitempty" tf:"time_frame_shift,omitempty"`

	// (String) The attribute type exists for backwards compatibilty. Usage is discouraged. You should use visualization instead.
	// The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The visualization of the tile. Possible values are: COLUMN_CHART, FUNNEL, LINE_CHART, PIE_CHART, SINGLE_VALUE, TABLE
	// The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
	// +kubebuilder:validation:Optional
	Visualization *string `json:"visualization,omitempty" tf:"visualization,omitempty"`

	// (Block List, Max: 1) Configuration of a User session query visualization tile (see below for nested schema)
	// Configuration of a User session query visualization tile
	// +kubebuilder:validation:Optional
	VisualizationConfig []VisualizationConfigParameters `json:"visualizationConfig,omitempty" tf:"visualization_config,omitempty"`
}

type VisualizationConfigInitParameters struct {

	// (Boolean) The axis bucketing when enabled groups similar series in the same virtual axis
	// The axis bucketing when enabled groups similar series in the same virtual axis
	HasAxisBucketing *bool `json:"hasAxisBucketing,omitempty" tf:"has_axis_bucketing,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type VisualizationConfigObservation struct {

	// (Boolean) The axis bucketing when enabled groups similar series in the same virtual axis
	// The axis bucketing when enabled groups similar series in the same virtual axis
	HasAxisBucketing *bool `json:"hasAxisBucketing,omitempty" tf:"has_axis_bucketing,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type VisualizationConfigParameters struct {

	// (Boolean) The axis bucketing when enabled groups similar series in the same virtual axis
	// The axis bucketing when enabled groups similar series in the same virtual axis
	// +kubebuilder:validation:Optional
	HasAxisBucketing *bool `json:"hasAxisBucketing,omitempty" tf:"has_axis_bucketing,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

// DashboardSpec defines the desired state of Dashboard
type DashboardSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DashboardParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DashboardInitParameters `json:"initProvider,omitempty"`
}

// DashboardStatus defines the observed state of Dashboard.
type DashboardStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DashboardObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Dashboard is the Schema for the Dashboards API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type Dashboard struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DashboardSpec   `json:"spec"`
	Status            DashboardStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardList contains a list of Dashboards
type DashboardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Dashboard `json:"items"`
}

// Repository type metadata.
var (
	Dashboard_Kind             = "Dashboard"
	Dashboard_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Dashboard_Kind}.String()
	Dashboard_KindAPIVersion   = Dashboard_Kind + "." + CRDGroupVersion.String()
	Dashboard_GroupVersionKind = CRDGroupVersion.WithKind(Dashboard_Kind)
)

func init() {
	SchemeBuilder.Register(&Dashboard{}, &DashboardList{})
}
