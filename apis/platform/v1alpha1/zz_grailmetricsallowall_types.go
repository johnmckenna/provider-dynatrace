// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GrailMetricsAllowallInitParameters struct {

	// (Boolean) When enabled every custom metric will be ingested to Grail. Warning: this setting can cause unexpected billing!
	// When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
	AllowAll *bool `json:"allowAll,omitempty" tf:"allow_all,omitempty"`
}

type GrailMetricsAllowallObservation struct {

	// (Boolean) When enabled every custom metric will be ingested to Grail. Warning: this setting can cause unexpected billing!
	// When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
	AllowAll *bool `json:"allowAll,omitempty" tf:"allow_all,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GrailMetricsAllowallParameters struct {

	// (Boolean) When enabled every custom metric will be ingested to Grail. Warning: this setting can cause unexpected billing!
	// When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected billing!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)
	// +kubebuilder:validation:Optional
	AllowAll *bool `json:"allowAll,omitempty" tf:"allow_all,omitempty"`
}

// GrailMetricsAllowallSpec defines the desired state of GrailMetricsAllowall
type GrailMetricsAllowallSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GrailMetricsAllowallParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GrailMetricsAllowallInitParameters `json:"initProvider,omitempty"`
}

// GrailMetricsAllowallStatus defines the observed state of GrailMetricsAllowall.
type GrailMetricsAllowallStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GrailMetricsAllowallObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GrailMetricsAllowall is the Schema for the GrailMetricsAllowalls API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type GrailMetricsAllowall struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.allowAll) || (has(self.initProvider) && has(self.initProvider.allowAll))",message="spec.forProvider.allowAll is a required parameter"
	Spec   GrailMetricsAllowallSpec   `json:"spec"`
	Status GrailMetricsAllowallStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GrailMetricsAllowallList contains a list of GrailMetricsAllowalls
type GrailMetricsAllowallList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GrailMetricsAllowall `json:"items"`
}

// Repository type metadata.
var (
	GrailMetricsAllowall_Kind             = "GrailMetricsAllowall"
	GrailMetricsAllowall_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GrailMetricsAllowall_Kind}.String()
	GrailMetricsAllowall_KindAPIVersion   = GrailMetricsAllowall_Kind + "." + CRDGroupVersion.String()
	GrailMetricsAllowall_GroupVersionKind = CRDGroupVersion.WithKind(GrailMetricsAllowall_Kind)
)

func init() {
	SchemeBuilder.Register(&GrailMetricsAllowall{}, &GrailMetricsAllowallList{})
}
