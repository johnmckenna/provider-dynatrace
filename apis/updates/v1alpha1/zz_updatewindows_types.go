// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DailyRecurrenceInitParameters struct {

	// (Number) Every X days:
	// Every **X** days:
	// * `1` = every day,
	// * `2` = every two days,
	// * `3` = every three days,
	// * etc.
	Every *float64 `json:"every,omitempty" tf:"every,omitempty"`

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Recurrence range
	RecurrenceRange []RecurrenceRangeInitParameters `json:"recurrenceRange,omitempty" tf:"recurrence_range,omitempty"`

	// (Block List, Min: 1, Max: 1) Update time (see below for nested schema)
	// Update time
	UpdateTime []UpdateTimeInitParameters `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type DailyRecurrenceObservation struct {

	// (Number) Every X days:
	// Every **X** days:
	// * `1` = every day,
	// * `2` = every two days,
	// * `3` = every three days,
	// * etc.
	Every *float64 `json:"every,omitempty" tf:"every,omitempty"`

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Recurrence range
	RecurrenceRange []RecurrenceRangeObservation `json:"recurrenceRange,omitempty" tf:"recurrence_range,omitempty"`

	// (Block List, Min: 1, Max: 1) Update time (see below for nested schema)
	// Update time
	UpdateTime []UpdateTimeObservation `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type DailyRecurrenceParameters struct {

	// (Number) Every X days:
	// Every **X** days:
	// * `1` = every day,
	// * `2` = every two days,
	// * `3` = every three days,
	// * etc.
	// +kubebuilder:validation:Optional
	Every *float64 `json:"every" tf:"every,omitempty"`

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Recurrence range
	// +kubebuilder:validation:Optional
	RecurrenceRange []RecurrenceRangeParameters `json:"recurrenceRange" tf:"recurrence_range,omitempty"`

	// (Block List, Min: 1, Max: 1) Update time (see below for nested schema)
	// Update time
	// +kubebuilder:validation:Optional
	UpdateTime []UpdateTimeParameters `json:"updateTime" tf:"update_time,omitempty"`
}

type MonthlyRecurrenceInitParameters struct {

	// (Number) Every X days:
	// Every **X** months:
	// * `1` = every month,
	// * `2` = every two months,
	// * `3` = every three months,
	// * etc.
	Every *float64 `json:"every,omitempty" tf:"every,omitempty"`

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Recurrence range
	RecurrenceRange []MonthlyRecurrenceRecurrenceRangeInitParameters `json:"recurrenceRange,omitempty" tf:"recurrence_range,omitempty"`

	// (Number) Day of the month
	// Day of the month
	SelectedMonthDay *float64 `json:"selectedMonthDay,omitempty" tf:"selected_month_day,omitempty"`

	// (Block List, Min: 1, Max: 1) Update time (see below for nested schema)
	// Update time
	UpdateTime []MonthlyRecurrenceUpdateTimeInitParameters `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type MonthlyRecurrenceObservation struct {

	// (Number) Every X days:
	// Every **X** months:
	// * `1` = every month,
	// * `2` = every two months,
	// * `3` = every three months,
	// * etc.
	Every *float64 `json:"every,omitempty" tf:"every,omitempty"`

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Recurrence range
	RecurrenceRange []MonthlyRecurrenceRecurrenceRangeObservation `json:"recurrenceRange,omitempty" tf:"recurrence_range,omitempty"`

	// (Number) Day of the month
	// Day of the month
	SelectedMonthDay *float64 `json:"selectedMonthDay,omitempty" tf:"selected_month_day,omitempty"`

	// (Block List, Min: 1, Max: 1) Update time (see below for nested schema)
	// Update time
	UpdateTime []MonthlyRecurrenceUpdateTimeObservation `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type MonthlyRecurrenceParameters struct {

	// (Number) Every X days:
	// Every **X** months:
	// * `1` = every month,
	// * `2` = every two months,
	// * `3` = every three months,
	// * etc.
	// +kubebuilder:validation:Optional
	Every *float64 `json:"every" tf:"every,omitempty"`

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Recurrence range
	// +kubebuilder:validation:Optional
	RecurrenceRange []MonthlyRecurrenceRecurrenceRangeParameters `json:"recurrenceRange" tf:"recurrence_range,omitempty"`

	// (Number) Day of the month
	// Day of the month
	// +kubebuilder:validation:Optional
	SelectedMonthDay *float64 `json:"selectedMonthDay" tf:"selected_month_day,omitempty"`

	// (Block List, Min: 1, Max: 1) Update time (see below for nested schema)
	// Update time
	// +kubebuilder:validation:Optional
	UpdateTime []MonthlyRecurrenceUpdateTimeParameters `json:"updateTime" tf:"update_time,omitempty"`
}

type MonthlyRecurrenceRecurrenceRangeInitParameters struct {

	// (String) no documentation available
	// no documentation available
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type MonthlyRecurrenceRecurrenceRangeObservation struct {

	// (String) no documentation available
	// no documentation available
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type MonthlyRecurrenceRecurrenceRangeParameters struct {

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	End *string `json:"end" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Start *string `json:"start" tf:"start,omitempty"`
}

type MonthlyRecurrenceUpdateTimeInitParameters struct {

	// (Number) Duration (minutes)
	// Duration (minutes)
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// hour clock)
	// Start time (24-hour clock)
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// (String) Possible Values: GMT_06_00, GMT_12_00, GMT_10_00, GMT_07_00, GMT_00_00, GMT_11_00, GMT_03_00, GMT_01_00, GMT_05_00, GMT_09_00, GMT_02_00, GMT_04_00, GMT_08_00
	// Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type MonthlyRecurrenceUpdateTimeObservation struct {

	// (Number) Duration (minutes)
	// Duration (minutes)
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// hour clock)
	// Start time (24-hour clock)
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// (String) Possible Values: GMT_06_00, GMT_12_00, GMT_10_00, GMT_07_00, GMT_00_00, GMT_11_00, GMT_03_00, GMT_01_00, GMT_05_00, GMT_09_00, GMT_02_00, GMT_04_00, GMT_08_00
	// Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type MonthlyRecurrenceUpdateTimeParameters struct {

	// (Number) Duration (minutes)
	// Duration (minutes)
	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration" tf:"duration,omitempty"`

	// hour clock)
	// Start time (24-hour clock)
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime" tf:"start_time,omitempty"`

	// (String) Possible Values: GMT_06_00, GMT_12_00, GMT_10_00, GMT_07_00, GMT_00_00, GMT_11_00, GMT_03_00, GMT_01_00, GMT_05_00, GMT_09_00, GMT_02_00, GMT_04_00, GMT_08_00
	// Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone" tf:"time_zone,omitempty"`
}

type OnceRecurrenceInitParameters struct {

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Update time
	RecurrenceRange []OnceRecurrenceRecurrenceRangeInitParameters `json:"recurrenceRange,omitempty" tf:"recurrence_range,omitempty"`
}

type OnceRecurrenceObservation struct {

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Update time
	RecurrenceRange []OnceRecurrenceRecurrenceRangeObservation `json:"recurrenceRange,omitempty" tf:"recurrence_range,omitempty"`
}

type OnceRecurrenceParameters struct {

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Update time
	// +kubebuilder:validation:Optional
	RecurrenceRange []OnceRecurrenceRecurrenceRangeParameters `json:"recurrenceRange" tf:"recurrence_range,omitempty"`
}

type OnceRecurrenceRecurrenceRangeInitParameters struct {

	// (String) no documentation available
	// no documentation available
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type OnceRecurrenceRecurrenceRangeObservation struct {

	// (String) no documentation available
	// no documentation available
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type OnceRecurrenceRecurrenceRangeParameters struct {

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	End *string `json:"end" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Start *string `json:"start" tf:"start,omitempty"`
}

type RecurrenceRangeInitParameters struct {

	// (String) no documentation available
	// no documentation available
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type RecurrenceRangeObservation struct {

	// (String) no documentation available
	// no documentation available
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type RecurrenceRangeParameters struct {

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	End *string `json:"end" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Start *string `json:"start" tf:"start,omitempty"`
}

type SelectedWeekDaysInitParameters struct {

	// (Boolean) no documentation available
	// no documentation available
	Friday *bool `json:"friday,omitempty" tf:"friday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Monday *bool `json:"monday,omitempty" tf:"monday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Saturday *bool `json:"saturday,omitempty" tf:"saturday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Sunday *bool `json:"sunday,omitempty" tf:"sunday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Thursday *bool `json:"thursday,omitempty" tf:"thursday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Tuesday *bool `json:"tuesday,omitempty" tf:"tuesday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Wednesday *bool `json:"wednesday,omitempty" tf:"wednesday,omitempty"`
}

type SelectedWeekDaysObservation struct {

	// (Boolean) no documentation available
	// no documentation available
	Friday *bool `json:"friday,omitempty" tf:"friday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Monday *bool `json:"monday,omitempty" tf:"monday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Saturday *bool `json:"saturday,omitempty" tf:"saturday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Sunday *bool `json:"sunday,omitempty" tf:"sunday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Thursday *bool `json:"thursday,omitempty" tf:"thursday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Tuesday *bool `json:"tuesday,omitempty" tf:"tuesday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	Wednesday *bool `json:"wednesday,omitempty" tf:"wednesday,omitempty"`
}

type SelectedWeekDaysParameters struct {

	// (Boolean) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Friday *bool `json:"friday" tf:"friday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Monday *bool `json:"monday" tf:"monday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Saturday *bool `json:"saturday" tf:"saturday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Sunday *bool `json:"sunday" tf:"sunday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Thursday *bool `json:"thursday" tf:"thursday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Tuesday *bool `json:"tuesday" tf:"tuesday,omitempty"`

	// (Boolean) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Wednesday *bool `json:"wednesday" tf:"wednesday,omitempty"`
}

type UpdateTimeInitParameters struct {

	// (Number) Duration (minutes)
	// Duration (minutes)
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// hour clock)
	// Start time (24-hour clock)
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// (String) Possible Values: GMT_06_00, GMT_12_00, GMT_10_00, GMT_07_00, GMT_00_00, GMT_11_00, GMT_03_00, GMT_01_00, GMT_05_00, GMT_09_00, GMT_02_00, GMT_04_00, GMT_08_00
	// Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type UpdateTimeObservation struct {

	// (Number) Duration (minutes)
	// Duration (minutes)
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// hour clock)
	// Start time (24-hour clock)
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// (String) Possible Values: GMT_06_00, GMT_12_00, GMT_10_00, GMT_07_00, GMT_00_00, GMT_11_00, GMT_03_00, GMT_01_00, GMT_05_00, GMT_09_00, GMT_02_00, GMT_04_00, GMT_08_00
	// Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type UpdateTimeParameters struct {

	// (Number) Duration (minutes)
	// Duration (minutes)
	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration" tf:"duration,omitempty"`

	// hour clock)
	// Start time (24-hour clock)
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime" tf:"start_time,omitempty"`

	// (String) Possible Values: GMT_06_00, GMT_12_00, GMT_10_00, GMT_07_00, GMT_00_00, GMT_11_00, GMT_03_00, GMT_01_00, GMT_05_00, GMT_09_00, GMT_02_00, GMT_04_00, GMT_08_00
	// Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone" tf:"time_zone,omitempty"`
}

type UpdateWindowsInitParameters struct {

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	DailyRecurrence []DailyRecurrenceInitParameters `json:"dailyRecurrence,omitempty" tf:"daily_recurrence,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	MonthlyRecurrence []MonthlyRecurrenceInitParameters `json:"monthlyRecurrence,omitempty" tf:"monthly_recurrence,omitempty"`

	// (String) Name
	// Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	OnceRecurrence []OnceRecurrenceInitParameters `json:"onceRecurrence,omitempty" tf:"once_recurrence,omitempty"`

	// (String) Possible Values: MONTHLY, ONCE, DAILY, WEEKLY
	// Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
	Recurrence *string `json:"recurrence,omitempty" tf:"recurrence,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	WeeklyRecurrence []WeeklyRecurrenceInitParameters `json:"weeklyRecurrence,omitempty" tf:"weekly_recurrence,omitempty"`
}

type UpdateWindowsObservation struct {

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	DailyRecurrence []DailyRecurrenceObservation `json:"dailyRecurrence,omitempty" tf:"daily_recurrence,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	MonthlyRecurrence []MonthlyRecurrenceObservation `json:"monthlyRecurrence,omitempty" tf:"monthly_recurrence,omitempty"`

	// (String) Name
	// Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	OnceRecurrence []OnceRecurrenceObservation `json:"onceRecurrence,omitempty" tf:"once_recurrence,omitempty"`

	// (String) Possible Values: MONTHLY, ONCE, DAILY, WEEKLY
	// Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
	Recurrence *string `json:"recurrence,omitempty" tf:"recurrence,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	WeeklyRecurrence []WeeklyRecurrenceObservation `json:"weeklyRecurrence,omitempty" tf:"weekly_recurrence,omitempty"`
}

type UpdateWindowsParameters struct {

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	// +kubebuilder:validation:Optional
	DailyRecurrence []DailyRecurrenceParameters `json:"dailyRecurrence,omitempty" tf:"daily_recurrence,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	// +kubebuilder:validation:Optional
	MonthlyRecurrence []MonthlyRecurrenceParameters `json:"monthlyRecurrence,omitempty" tf:"monthly_recurrence,omitempty"`

	// (String) Name
	// Name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	// +kubebuilder:validation:Optional
	OnceRecurrence []OnceRecurrenceParameters `json:"onceRecurrence,omitempty" tf:"once_recurrence,omitempty"`

	// (String) Possible Values: MONTHLY, ONCE, DAILY, WEEKLY
	// Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`
	// +kubebuilder:validation:Optional
	Recurrence *string `json:"recurrence,omitempty" tf:"recurrence,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	// +kubebuilder:validation:Optional
	WeeklyRecurrence []WeeklyRecurrenceParameters `json:"weeklyRecurrence,omitempty" tf:"weekly_recurrence,omitempty"`
}

type WeeklyRecurrenceInitParameters struct {

	// (Number) Every X days:
	// Every **X** weeks:
	// * `1` = every week,
	// * `2` = every two weeks,
	// * `3` = every three weeks,
	// * etc.
	Every *float64 `json:"every,omitempty" tf:"every,omitempty"`

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Recurrence range
	RecurrenceRange []WeeklyRecurrenceRecurrenceRangeInitParameters `json:"recurrenceRange,omitempty" tf:"recurrence_range,omitempty"`

	// (Block List, Min: 1, Max: 1) Day of the week (see below for nested schema)
	// Day of the week
	SelectedWeekDays []SelectedWeekDaysInitParameters `json:"selectedWeekDays,omitempty" tf:"selected_week_days,omitempty"`

	// (Block List, Min: 1, Max: 1) Update time (see below for nested schema)
	// Update time
	UpdateTime []WeeklyRecurrenceUpdateTimeInitParameters `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type WeeklyRecurrenceObservation struct {

	// (Number) Every X days:
	// Every **X** weeks:
	// * `1` = every week,
	// * `2` = every two weeks,
	// * `3` = every three weeks,
	// * etc.
	Every *float64 `json:"every,omitempty" tf:"every,omitempty"`

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Recurrence range
	RecurrenceRange []WeeklyRecurrenceRecurrenceRangeObservation `json:"recurrenceRange,omitempty" tf:"recurrence_range,omitempty"`

	// (Block List, Min: 1, Max: 1) Day of the week (see below for nested schema)
	// Day of the week
	SelectedWeekDays []SelectedWeekDaysObservation `json:"selectedWeekDays,omitempty" tf:"selected_week_days,omitempty"`

	// (Block List, Min: 1, Max: 1) Update time (see below for nested schema)
	// Update time
	UpdateTime []WeeklyRecurrenceUpdateTimeObservation `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type WeeklyRecurrenceParameters struct {

	// (Number) Every X days:
	// Every **X** weeks:
	// * `1` = every week,
	// * `2` = every two weeks,
	// * `3` = every three weeks,
	// * etc.
	// +kubebuilder:validation:Optional
	Every *float64 `json:"every" tf:"every,omitempty"`

	// (Block List, Min: 1, Max: 1) Recurrence range (see below for nested schema)
	// Recurrence range
	// +kubebuilder:validation:Optional
	RecurrenceRange []WeeklyRecurrenceRecurrenceRangeParameters `json:"recurrenceRange" tf:"recurrence_range,omitempty"`

	// (Block List, Min: 1, Max: 1) Day of the week (see below for nested schema)
	// Day of the week
	// +kubebuilder:validation:Optional
	SelectedWeekDays []SelectedWeekDaysParameters `json:"selectedWeekDays" tf:"selected_week_days,omitempty"`

	// (Block List, Min: 1, Max: 1) Update time (see below for nested schema)
	// Update time
	// +kubebuilder:validation:Optional
	UpdateTime []WeeklyRecurrenceUpdateTimeParameters `json:"updateTime" tf:"update_time,omitempty"`
}

type WeeklyRecurrenceRecurrenceRangeInitParameters struct {

	// (String) no documentation available
	// no documentation available
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type WeeklyRecurrenceRecurrenceRangeObservation struct {

	// (String) no documentation available
	// no documentation available
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type WeeklyRecurrenceRecurrenceRangeParameters struct {

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	End *string `json:"end" tf:"end,omitempty"`

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Start *string `json:"start" tf:"start,omitempty"`
}

type WeeklyRecurrenceUpdateTimeInitParameters struct {

	// (Number) Duration (minutes)
	// Duration (minutes)
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// hour clock)
	// Start time (24-hour clock)
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// (String) Possible Values: GMT_06_00, GMT_12_00, GMT_10_00, GMT_07_00, GMT_00_00, GMT_11_00, GMT_03_00, GMT_01_00, GMT_05_00, GMT_09_00, GMT_02_00, GMT_04_00, GMT_08_00
	// Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type WeeklyRecurrenceUpdateTimeObservation struct {

	// (Number) Duration (minutes)
	// Duration (minutes)
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// hour clock)
	// Start time (24-hour clock)
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// (String) Possible Values: GMT_06_00, GMT_12_00, GMT_10_00, GMT_07_00, GMT_00_00, GMT_11_00, GMT_03_00, GMT_01_00, GMT_05_00, GMT_09_00, GMT_02_00, GMT_04_00, GMT_08_00
	// Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`
}

type WeeklyRecurrenceUpdateTimeParameters struct {

	// (Number) Duration (minutes)
	// Duration (minutes)
	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration" tf:"duration,omitempty"`

	// hour clock)
	// Start time (24-hour clock)
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime" tf:"start_time,omitempty"`

	// (String) Possible Values: GMT_06_00, GMT_12_00, GMT_10_00, GMT_07_00, GMT_00_00, GMT_11_00, GMT_03_00, GMT_01_00, GMT_05_00, GMT_09_00, GMT_02_00, GMT_04_00, GMT_08_00
	// Possible Values: `GMT_06_00`, `GMT_12_00`, `GMT_10_00`, `GMT_07_00`, `GMT_00_00`, `GMT_11_00`, `GMT_03_00`, `GMT_01_00`, `GMT_05_00`, `GMT_09_00`, `GMT_02_00`, `GMT_04_00`, `GMT_08_00`
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone" tf:"time_zone,omitempty"`
}

// UpdateWindowsSpec defines the desired state of UpdateWindows
type UpdateWindowsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UpdateWindowsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UpdateWindowsInitParameters `json:"initProvider,omitempty"`
}

// UpdateWindowsStatus defines the observed state of UpdateWindows.
type UpdateWindowsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UpdateWindowsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UpdateWindows is the Schema for the UpdateWindowss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type UpdateWindows struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.recurrence) || (has(self.initProvider) && has(self.initProvider.recurrence))",message="spec.forProvider.recurrence is a required parameter"
	Spec   UpdateWindowsSpec   `json:"spec"`
	Status UpdateWindowsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UpdateWindowsList contains a list of UpdateWindowss
type UpdateWindowsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UpdateWindows `json:"items"`
}

// Repository type metadata.
var (
	UpdateWindows_Kind             = "UpdateWindows"
	UpdateWindows_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UpdateWindows_Kind}.String()
	UpdateWindows_KindAPIVersion   = UpdateWindows_Kind + "." + CRDGroupVersion.String()
	UpdateWindows_GroupVersionKind = CRDGroupVersion.WithKind(UpdateWindows_Kind)
)

func init() {
	SchemeBuilder.Register(&UpdateWindows{}, &UpdateWindowsList{})
}
