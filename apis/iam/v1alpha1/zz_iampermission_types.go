// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IAMPermissionInitParameters struct {

	// (String) The UUID of the account this permission is valid for
	// The UUID of the account this permission is valid for
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (String) The environment this permission is valid (https://<environmentid>.live.dynatrace.com). Also required in when trying to specify a management zone permission.
	// The environment this permission is valid (`https://<environmentid>.live.dynatrace.com`). Also required in when trying to specify a management zone permission.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The ID of the group this permission is valid for
	// The ID of the group this permission is valid for
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (String) The management zone this permission is valid for. You need to use the attribute legacy_id when referring to a resource dynatrace_management_zone_v2 or a data source dynatrace_management_zone. The attribute environment is required to get specified also in order to identify the management zone uniquely.
	// The management zone this permission is valid for. You need to use the attribute `legacy_id` when referring to a resource `dynatrace_management_zone_v2` or a data source `dynatrace_management_zone`. The attribute `environment` is required to get specified also in order to identify the management zone uniquely.
	ManagementZone *string `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// company-info, account-user-management, account-viewer, account-saml-flexible-federation, tenant-viewer, tenant-manage-settings, tenant-agent-install, tenant-logviewer, tenant-view-sensitive-request-data, tenant-configure-request-capture-data, tenant-replay-sessions-with-masking, tenant-replay-sessions-without-masking, tenant-manage-security-problems, tenant-view-security-problems, tenant-manage-support-tickets
	// Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type IAMPermissionObservation struct {

	// (String) The UUID of the account this permission is valid for
	// The UUID of the account this permission is valid for
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (String) The environment this permission is valid (https://<environmentid>.live.dynatrace.com). Also required in when trying to specify a management zone permission.
	// The environment this permission is valid (`https://<environmentid>.live.dynatrace.com`). Also required in when trying to specify a management zone permission.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The ID of the group this permission is valid for
	// The ID of the group this permission is valid for
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The management zone this permission is valid for. You need to use the attribute legacy_id when referring to a resource dynatrace_management_zone_v2 or a data source dynatrace_management_zone. The attribute environment is required to get specified also in order to identify the management zone uniquely.
	// The management zone this permission is valid for. You need to use the attribute `legacy_id` when referring to a resource `dynatrace_management_zone_v2` or a data source `dynatrace_management_zone`. The attribute `environment` is required to get specified also in order to identify the management zone uniquely.
	ManagementZone *string `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// company-info, account-user-management, account-viewer, account-saml-flexible-federation, tenant-viewer, tenant-manage-settings, tenant-agent-install, tenant-logviewer, tenant-view-sensitive-request-data, tenant-configure-request-capture-data, tenant-replay-sessions-with-masking, tenant-replay-sessions-without-masking, tenant-manage-security-problems, tenant-view-security-problems, tenant-manage-support-tickets
	// Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type IAMPermissionParameters struct {

	// (String) The UUID of the account this permission is valid for
	// The UUID of the account this permission is valid for
	// +kubebuilder:validation:Optional
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (String) The environment this permission is valid (https://<environmentid>.live.dynatrace.com). Also required in when trying to specify a management zone permission.
	// The environment this permission is valid (`https://<environmentid>.live.dynatrace.com`). Also required in when trying to specify a management zone permission.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The ID of the group this permission is valid for
	// The ID of the group this permission is valid for
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (String) The management zone this permission is valid for. You need to use the attribute legacy_id when referring to a resource dynatrace_management_zone_v2 or a data source dynatrace_management_zone. The attribute environment is required to get specified also in order to identify the management zone uniquely.
	// The management zone this permission is valid for. You need to use the attribute `legacy_id` when referring to a resource `dynatrace_management_zone_v2` or a data source `dynatrace_management_zone`. The attribute `environment` is required to get specified also in order to identify the management zone uniquely.
	// +kubebuilder:validation:Optional
	ManagementZone *string `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// company-info, account-user-management, account-viewer, account-saml-flexible-federation, tenant-viewer, tenant-manage-settings, tenant-agent-install, tenant-logviewer, tenant-view-sensitive-request-data, tenant-configure-request-capture-data, tenant-replay-sessions-with-masking, tenant-replay-sessions-without-masking, tenant-manage-security-problems, tenant-view-security-problems, tenant-manage-support-tickets
	// Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// IAMPermissionSpec defines the desired state of IAMPermission
type IAMPermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IAMPermissionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IAMPermissionInitParameters `json:"initProvider,omitempty"`
}

// IAMPermissionStatus defines the observed state of IAMPermission.
type IAMPermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IAMPermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IAMPermission is the Schema for the IAMPermissions API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type IAMPermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.group) || (has(self.initProvider) && has(self.initProvider.group))",message="spec.forProvider.group is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   IAMPermissionSpec   `json:"spec"`
	Status IAMPermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IAMPermissionList contains a list of IAMPermissions
type IAMPermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IAMPermission `json:"items"`
}

// Repository type metadata.
var (
	IAMPermission_Kind             = "IAMPermission"
	IAMPermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IAMPermission_Kind}.String()
	IAMPermission_KindAPIVersion   = IAMPermission_Kind + "." + CRDGroupVersion.String()
	IAMPermission_GroupVersionKind = CRDGroupVersion.WithKind(IAMPermission_Kind)
)

func init() {
	SchemeBuilder.Register(&IAMPermission{}, &IAMPermissionList{})
}
