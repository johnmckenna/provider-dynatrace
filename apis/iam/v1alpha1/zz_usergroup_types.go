// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GrantInitParameters struct {

	// (Set of String) The ids of the environments this permission grants the user access to.
	// The ids of the environments this permission grants the user access to.
	// +listType=set
	Environments []*string `json:"environments,omitempty" tf:"environments,omitempty"`

	// (String) The permission. Possible values are VIEWER, MANAGE_SETTINGS, AGENT_INSTALL, LOG_VIEWER, VIEW_SENSITIVE_REQUEST_DATA, CONFIGURE_REQUEST_CAPTURE_DATA, REPLAY_SESSION_DATA, REPLAY_SESSION_DATA_WITHOUT_MASKING, MANAGE_SECURITY_PROBLEMS and MANAGE_SUPPORT_TICKETS.
	// The permission. Possible values are `VIEWER`, `MANAGE_SETTINGS`, `AGENT_INSTALL`, `LOG_VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`, `CONFIGURE_REQUEST_CAPTURE_DATA`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `MANAGE_SECURITY_PROBLEMS` and `MANAGE_SUPPORT_TICKETS`.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`
}

type GrantObservation struct {

	// (Set of String) The ids of the environments this permission grants the user access to.
	// The ids of the environments this permission grants the user access to.
	// +listType=set
	Environments []*string `json:"environments,omitempty" tf:"environments,omitempty"`

	// (String) The permission. Possible values are VIEWER, MANAGE_SETTINGS, AGENT_INSTALL, LOG_VIEWER, VIEW_SENSITIVE_REQUEST_DATA, CONFIGURE_REQUEST_CAPTURE_DATA, REPLAY_SESSION_DATA, REPLAY_SESSION_DATA_WITHOUT_MASKING, MANAGE_SECURITY_PROBLEMS and MANAGE_SUPPORT_TICKETS.
	// The permission. Possible values are `VIEWER`, `MANAGE_SETTINGS`, `AGENT_INSTALL`, `LOG_VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`, `CONFIGURE_REQUEST_CAPTURE_DATA`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `MANAGE_SECURITY_PROBLEMS` and `MANAGE_SUPPORT_TICKETS`.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`
}

type GrantParameters struct {

	// (Set of String) The ids of the environments this permission grants the user access to.
	// The ids of the environments this permission grants the user access to.
	// +kubebuilder:validation:Optional
	// +listType=set
	Environments []*string `json:"environments,omitempty" tf:"environments,omitempty"`

	// (String) The permission. Possible values are VIEWER, MANAGE_SETTINGS, AGENT_INSTALL, LOG_VIEWER, VIEW_SENSITIVE_REQUEST_DATA, CONFIGURE_REQUEST_CAPTURE_DATA, REPLAY_SESSION_DATA, REPLAY_SESSION_DATA_WITHOUT_MASKING, MANAGE_SECURITY_PROBLEMS and MANAGE_SUPPORT_TICKETS.
	// The permission. Possible values are `VIEWER`, `MANAGE_SETTINGS`, `AGENT_INSTALL`, `LOG_VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`, `CONFIGURE_REQUEST_CAPTURE_DATA`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `MANAGE_SECURITY_PROBLEMS` and `MANAGE_SUPPORT_TICKETS`.
	// +kubebuilder:validation:Optional
	Permission *string `json:"permission" tf:"permission,omitempty"`
}

type UserGroupInitParameters struct {

	// (Boolean) If true, then the group has the access account rights
	// If `true`, then the group has the access account rights
	AccessAccount *bool `json:"accessAccount,omitempty" tf:"access_account,omitempty"`

	// (Boolean) If true, then the group has the cluster administrator rights
	// If `true`, then the group has the cluster administrator rights
	ClusterAdmin *bool `json:"clusterAdmin,omitempty" tf:"cluster_admin,omitempty"`

	// (Set of String) LDAP group names
	// LDAP group names
	// +listType=set
	LdapGroups []*string `json:"ldapGroups,omitempty" tf:"ldap_groups,omitempty"`

	// (Boolean) If true, then the group has the manage account rights
	// If `true`, then the group has the manage account rights
	ManageAccount *bool `json:"manageAccount,omitempty" tf:"manage_account,omitempty"`

	// (String) The name of the user group
	// The name of the user group
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Permissions for environments (see below for nested schema)
	// Permissions for environments
	Permissions []UserGroupPermissionsInitParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (Set of String) SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
	// SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
	// +listType=set
	SsoGroups []*string `json:"ssoGroups,omitempty" tf:"sso_groups,omitempty"`
}

type UserGroupObservation struct {

	// (Boolean) If true, then the group has the access account rights
	// If `true`, then the group has the access account rights
	AccessAccount *bool `json:"accessAccount,omitempty" tf:"access_account,omitempty"`

	// (Boolean) If true, then the group has the cluster administrator rights
	// If `true`, then the group has the cluster administrator rights
	ClusterAdmin *bool `json:"clusterAdmin,omitempty" tf:"cluster_admin,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) LDAP group names
	// LDAP group names
	// +listType=set
	LdapGroups []*string `json:"ldapGroups,omitempty" tf:"ldap_groups,omitempty"`

	// (Boolean) If true, then the group has the manage account rights
	// If `true`, then the group has the manage account rights
	ManageAccount *bool `json:"manageAccount,omitempty" tf:"manage_account,omitempty"`

	// (String) The name of the user group
	// The name of the user group
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Permissions for environments (see below for nested schema)
	// Permissions for environments
	Permissions []UserGroupPermissionsObservation `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (Set of String) SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
	// SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
	// +listType=set
	SsoGroups []*string `json:"ssoGroups,omitempty" tf:"sso_groups,omitempty"`
}

type UserGroupParameters struct {

	// (Boolean) If true, then the group has the access account rights
	// If `true`, then the group has the access account rights
	// +kubebuilder:validation:Optional
	AccessAccount *bool `json:"accessAccount,omitempty" tf:"access_account,omitempty"`

	// (Boolean) If true, then the group has the cluster administrator rights
	// If `true`, then the group has the cluster administrator rights
	// +kubebuilder:validation:Optional
	ClusterAdmin *bool `json:"clusterAdmin,omitempty" tf:"cluster_admin,omitempty"`

	// (Set of String) LDAP group names
	// LDAP group names
	// +kubebuilder:validation:Optional
	// +listType=set
	LdapGroups []*string `json:"ldapGroups,omitempty" tf:"ldap_groups,omitempty"`

	// (Boolean) If true, then the group has the manage account rights
	// If `true`, then the group has the manage account rights
	// +kubebuilder:validation:Optional
	ManageAccount *bool `json:"manageAccount,omitempty" tf:"manage_account,omitempty"`

	// (String) The name of the user group
	// The name of the user group
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Permissions for environments (see below for nested schema)
	// Permissions for environments
	// +kubebuilder:validation:Optional
	Permissions []UserGroupPermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// (Set of String) SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
	// SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
	// +kubebuilder:validation:Optional
	// +listType=set
	SsoGroups []*string `json:"ssoGroups,omitempty" tf:"sso_groups,omitempty"`
}

type UserGroupPermissionsInitParameters struct {

	// (Block List, Min: 1) A permission granted to one or multiple environments (see below for nested schema)
	// A permission granted to one or multiple environments
	Grant []GrantInitParameters `json:"grant,omitempty" tf:"grant,omitempty"`
}

type UserGroupPermissionsObservation struct {

	// (Block List, Min: 1) A permission granted to one or multiple environments (see below for nested schema)
	// A permission granted to one or multiple environments
	Grant []GrantObservation `json:"grant,omitempty" tf:"grant,omitempty"`
}

type UserGroupPermissionsParameters struct {

	// (Block List, Min: 1) A permission granted to one or multiple environments (see below for nested schema)
	// A permission granted to one or multiple environments
	// +kubebuilder:validation:Optional
	Grant []GrantParameters `json:"grant" tf:"grant,omitempty"`
}

// UserGroupSpec defines the desired state of UserGroup
type UserGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserGroupInitParameters `json:"initProvider,omitempty"`
}

// UserGroupStatus defines the observed state of UserGroup.
type UserGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserGroup is the Schema for the UserGroups API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type UserGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   UserGroupSpec   `json:"spec"`
	Status UserGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserGroupList contains a list of UserGroups
type UserGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserGroup `json:"items"`
}

// Repository type metadata.
var (
	UserGroup_Kind             = "UserGroup"
	UserGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserGroup_Kind}.String()
	UserGroup_KindAPIVersion   = UserGroup_Kind + "." + CRDGroupVersion.String()
	UserGroup_GroupVersionKind = CRDGroupVersion.WithKind(UserGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&UserGroup{}, &UserGroupList{})
}
