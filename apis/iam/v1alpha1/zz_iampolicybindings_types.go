// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IAMPolicyBindingsInitParameters struct {

	// uuid>). The attribute policies must contain ONLY policies defined for that account. The prefix urn:dtaccount: MUST be omitted here.
	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (String) The ID of the environment (https://.live.dynatrace.com). The attribute policies must contain ONLY policies defined for that environment.
	// The ID of the environment (https://<environmentid>.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The name of the policy
	// The name of the policy
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (Set of String) A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes account or environment.
	// A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type IAMPolicyBindingsObservation struct {

	// uuid>). The attribute policies must contain ONLY policies defined for that account. The prefix urn:dtaccount: MUST be omitted here.
	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (String) The ID of the environment (https://.live.dynatrace.com). The attribute policies must contain ONLY policies defined for that environment.
	// The ID of the environment (https://<environmentid>.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The name of the policy
	// The name of the policy
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes account or environment.
	// A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type IAMPolicyBindingsParameters struct {

	// uuid>). The attribute policies must contain ONLY policies defined for that account. The prefix urn:dtaccount: MUST be omitted here.
	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	// +kubebuilder:validation:Optional
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (String) The ID of the environment (https://.live.dynatrace.com). The attribute policies must contain ONLY policies defined for that environment.
	// The ID of the environment (https://<environmentid>.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The name of the policy
	// The name of the policy
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (Set of String) A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes account or environment.
	// A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

// IAMPolicyBindingsSpec defines the desired state of IAMPolicyBindings
type IAMPolicyBindingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IAMPolicyBindingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IAMPolicyBindingsInitParameters `json:"initProvider,omitempty"`
}

// IAMPolicyBindingsStatus defines the observed state of IAMPolicyBindings.
type IAMPolicyBindingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IAMPolicyBindingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IAMPolicyBindings is the Schema for the IAMPolicyBindingss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type IAMPolicyBindings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.group) || (has(self.initProvider) && has(self.initProvider.group))",message="spec.forProvider.group is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policies) || (has(self.initProvider) && has(self.initProvider.policies))",message="spec.forProvider.policies is a required parameter"
	Spec   IAMPolicyBindingsSpec   `json:"spec"`
	Status IAMPolicyBindingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IAMPolicyBindingsList contains a list of IAMPolicyBindingss
type IAMPolicyBindingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IAMPolicyBindings `json:"items"`
}

// Repository type metadata.
var (
	IAMPolicyBindings_Kind             = "IAMPolicyBindings"
	IAMPolicyBindings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IAMPolicyBindings_Kind}.String()
	IAMPolicyBindings_KindAPIVersion   = IAMPolicyBindings_Kind + "." + CRDGroupVersion.String()
	IAMPolicyBindings_GroupVersionKind = CRDGroupVersion.WithKind(IAMPolicyBindings_Kind)
)

func init() {
	SchemeBuilder.Register(&IAMPolicyBindings{}, &IAMPolicyBindingsList{})
}
