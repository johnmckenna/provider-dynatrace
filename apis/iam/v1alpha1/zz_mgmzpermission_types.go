// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MgmzPermissionInitParameters struct {

	// (String) The UUID of the environment
	// The UUID of the environment
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The ID of the group the permissions are valid for. You may refer to the id of a resource dynatrace_user_group here
	// The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace_user_group` here
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (String) The ID of the management zone the permissions are valid for. When referring to resource dynatrace_management_zone_v2 or data source dynatrace_management_zone you need to refer to the attribute legacy_id.
	// The ID of the management zone the permissions are valid for. When referring to resource `dynatrace_management_zone_v2` or data source `dynatrace_management_zone` you need to refer to the attribute `legacy_id`.
	ManagementZone *string `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// empty plans specifying at least the permission VIEWER is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	// The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
	// Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type MgmzPermissionObservation struct {

	// (String) The UUID of the environment
	// The UUID of the environment
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The ID of the group the permissions are valid for. You may refer to the id of a resource dynatrace_user_group here
	// The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace_user_group` here
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The ID of the management zone the permissions are valid for. When referring to resource dynatrace_management_zone_v2 or data source dynatrace_management_zone you need to refer to the attribute legacy_id.
	// The ID of the management zone the permissions are valid for. When referring to resource `dynatrace_management_zone_v2` or data source `dynatrace_management_zone` you need to refer to the attribute `legacy_id`.
	ManagementZone *string `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// empty plans specifying at least the permission VIEWER is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	// The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
	// Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type MgmzPermissionParameters struct {

	// (String) The UUID of the environment
	// The UUID of the environment
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The ID of the group the permissions are valid for. You may refer to the id of a resource dynatrace_user_group here
	// The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace_user_group` here
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (String) The ID of the management zone the permissions are valid for. When referring to resource dynatrace_management_zone_v2 or data source dynatrace_management_zone you need to refer to the attribute legacy_id.
	// The ID of the management zone the permissions are valid for. When referring to resource `dynatrace_management_zone_v2` or data source `dynatrace_management_zone` you need to refer to the attribute `legacy_id`.
	// +kubebuilder:validation:Optional
	ManagementZone *string `json:"managementZone,omitempty" tf:"management_zone,omitempty"`

	// empty plans specifying at least the permission VIEWER is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	// The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`, `MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`.
	// Note: In order to produce non-empty plans specifying at least the permission `VIEWER` is recommended. Your Dynatrace Cluster will enforce that permission, regardless of whether it has been specified or not.
	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

// MgmzPermissionSpec defines the desired state of MgmzPermission
type MgmzPermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MgmzPermissionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MgmzPermissionInitParameters `json:"initProvider,omitempty"`
}

// MgmzPermissionStatus defines the observed state of MgmzPermission.
type MgmzPermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MgmzPermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MgmzPermission is the Schema for the MgmzPermissions API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type MgmzPermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environment) || (has(self.initProvider) && has(self.initProvider.environment))",message="spec.forProvider.environment is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.group) || (has(self.initProvider) && has(self.initProvider.group))",message="spec.forProvider.group is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.managementZone) || (has(self.initProvider) && has(self.initProvider.managementZone))",message="spec.forProvider.managementZone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissions) || (has(self.initProvider) && has(self.initProvider.permissions))",message="spec.forProvider.permissions is a required parameter"
	Spec   MgmzPermissionSpec   `json:"spec"`
	Status MgmzPermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MgmzPermissionList contains a list of MgmzPermissions
type MgmzPermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MgmzPermission `json:"items"`
}

// Repository type metadata.
var (
	MgmzPermission_Kind             = "MgmzPermission"
	MgmzPermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MgmzPermission_Kind}.String()
	MgmzPermission_KindAPIVersion   = MgmzPermission_Kind + "." + CRDGroupVersion.String()
	MgmzPermission_GroupVersionKind = CRDGroupVersion.WithKind(MgmzPermission_Kind)
)

func init() {
	SchemeBuilder.Register(&MgmzPermission{}, &MgmzPermissionList{})
}
