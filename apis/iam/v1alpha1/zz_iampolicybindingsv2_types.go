// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IAMPolicyBindingsV2InitParameters struct {

	// uuid>). The attribute policies must contain ONLY policies defined for that account. The prefix urn:dtaccount: MUST be omitted here.
	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (String) The ID of the environment (https://.live.dynatrace.com). The attribute policies must contain ONLY policies defined for that environment.
	// The ID of the environment (https://<environmentid>.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The name of the policy
	// The name of the policy
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (Block Set) A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes account or environment. (see below for nested schema)
	// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	Policy []PolicyInitParameters `json:"policy,omitempty" tf:"policy,omitempty"`
}

type IAMPolicyBindingsV2Observation struct {

	// uuid>). The attribute policies must contain ONLY policies defined for that account. The prefix urn:dtaccount: MUST be omitted here.
	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (String) The ID of the environment (https://.live.dynatrace.com). The attribute policies must contain ONLY policies defined for that environment.
	// The ID of the environment (https://<environmentid>.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The name of the policy
	// The name of the policy
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block Set) A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes account or environment. (see below for nested schema)
	// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	Policy []PolicyObservation `json:"policy,omitempty" tf:"policy,omitempty"`
}

type IAMPolicyBindingsV2Parameters struct {

	// uuid>). The attribute policies must contain ONLY policies defined for that account. The prefix urn:dtaccount: MUST be omitted here.
	// The UUID of the account (`urn:dtaccount:<account-uuid>`). The attribute `policies` must contain ONLY policies defined for that account. The prefix `urn:dtaccount:` MUST be omitted here.
	// +kubebuilder:validation:Optional
	Account *string `json:"account,omitempty" tf:"account,omitempty"`

	// (String) The ID of the environment (https://.live.dynatrace.com). The attribute policies must contain ONLY policies defined for that environment.
	// The ID of the environment (https://<environmentid>.live.dynatrace.com). The attribute `policies` must contain ONLY policies defined for that environment.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) The name of the policy
	// The name of the policy
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// (Block Set) A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes account or environment. (see below for nested schema)
	// A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix policies here that are defined for different scopes (different accounts or environments) than specified via attributes `account` or `environment`.
	// +kubebuilder:validation:Optional
	Policy []PolicyParameters `json:"policy,omitempty" tf:"policy,omitempty"`
}

type PolicyInitParameters struct {

	// (String) The ID of this resource.
	// Either the attribute `id` or the attribute `uuid` of a `dynatrace_iam_policy`. Initially just the `id` attribute was supported (which is a concatenation of several configuration settings) - and is still supported for backwards compatibility
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Map of String)
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Map of String)
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type PolicyObservation struct {

	// (String) The ID of this resource.
	// Either the attribute `id` or the attribute `uuid` of a `dynatrace_iam_policy`. Initially just the `id` attribute was supported (which is a concatenation of several configuration settings) - and is still supported for backwards compatibility
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Map of String)
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Map of String)
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type PolicyParameters struct {

	// (String) The ID of this resource.
	// Either the attribute `id` or the attribute `uuid` of a `dynatrace_iam_policy`. Initially just the `id` attribute was supported (which is a concatenation of several configuration settings) - and is still supported for backwards compatibility
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// (Map of String)
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (Map of String)
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

// IAMPolicyBindingsV2Spec defines the desired state of IAMPolicyBindingsV2
type IAMPolicyBindingsV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IAMPolicyBindingsV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IAMPolicyBindingsV2InitParameters `json:"initProvider,omitempty"`
}

// IAMPolicyBindingsV2Status defines the observed state of IAMPolicyBindingsV2.
type IAMPolicyBindingsV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IAMPolicyBindingsV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IAMPolicyBindingsV2 is the Schema for the IAMPolicyBindingsV2s API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type IAMPolicyBindingsV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.group) || (has(self.initProvider) && has(self.initProvider.group))",message="spec.forProvider.group is a required parameter"
	Spec   IAMPolicyBindingsV2Spec   `json:"spec"`
	Status IAMPolicyBindingsV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IAMPolicyBindingsV2List contains a list of IAMPolicyBindingsV2s
type IAMPolicyBindingsV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IAMPolicyBindingsV2 `json:"items"`
}

// Repository type metadata.
var (
	IAMPolicyBindingsV2_Kind             = "IAMPolicyBindingsV2"
	IAMPolicyBindingsV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IAMPolicyBindingsV2_Kind}.String()
	IAMPolicyBindingsV2_KindAPIVersion   = IAMPolicyBindingsV2_Kind + "." + CRDGroupVersion.String()
	IAMPolicyBindingsV2_GroupVersionKind = CRDGroupVersion.WithKind(IAMPolicyBindingsV2_Kind)
)

func init() {
	SchemeBuilder.Register(&IAMPolicyBindingsV2{}, &IAMPolicyBindingsV2List{})
}
