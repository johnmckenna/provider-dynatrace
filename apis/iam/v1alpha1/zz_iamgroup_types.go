// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IAMGroupInitParameters struct {

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Set of String)
	// +listType=set
	FederatedAttributeValues []*string `json:"federatedAttributeValues,omitempty" tf:"federated_attribute_values,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Permissions []PermissionsInitParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type IAMGroupObservation struct {

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Set of String)
	// +listType=set
	FederatedAttributeValues []*string `json:"federatedAttributeValues,omitempty" tf:"federated_attribute_values,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	Permissions []PermissionsObservation `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type IAMGroupParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Set of String)
	// +kubebuilder:validation:Optional
	// +listType=set
	FederatedAttributeValues []*string `json:"federatedAttributeValues,omitempty" tf:"federated_attribute_values,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Permissions []PermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type PermissionInitParameters struct {

	// (String)
	// Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// zonethis attribute should hold a value like:. You need to use the attribute legacy_id when referring to a resource dynatrace_management_zone_v2 or a data source dynatrace_management_zone.
	// If `type` is `account` this attribute should hold the UUID of the account. If `type` is 'tenant` this attribute should hold the ID of the environment (`https://<environmentid>.live.dynatrace.com`). If `type` is `management-zone` this attribute should hold a value like `<managment-zone-id>:<environment-id>. You need to use the attribute `legacy_id` when referring to a resource `dynatrace_management_zone_v2` or a data source `dynatrace_management_zone`.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// zone
	// The type of this permission. Possible values are `account`, `tenant`, `management-zone`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PermissionObservation struct {

	// (String)
	// Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// zonethis attribute should hold a value like:. You need to use the attribute legacy_id when referring to a resource dynatrace_management_zone_v2 or a data source dynatrace_management_zone.
	// If `type` is `account` this attribute should hold the UUID of the account. If `type` is 'tenant` this attribute should hold the ID of the environment (`https://<environmentid>.live.dynatrace.com`). If `type` is `management-zone` this attribute should hold a value like `<managment-zone-id>:<environment-id>. You need to use the attribute `legacy_id` when referring to a resource `dynatrace_management_zone_v2` or a data source `dynatrace_management_zone`.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// zone
	// The type of this permission. Possible values are `account`, `tenant`, `management-zone`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PermissionParameters struct {

	// (String)
	// Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// zonethis attribute should hold a value like:. You need to use the attribute legacy_id when referring to a resource dynatrace_management_zone_v2 or a data source dynatrace_management_zone.
	// If `type` is `account` this attribute should hold the UUID of the account. If `type` is 'tenant` this attribute should hold the ID of the environment (`https://<environmentid>.live.dynatrace.com`). If `type` is `management-zone` this attribute should hold a value like `<managment-zone-id>:<environment-id>. You need to use the attribute `legacy_id` when referring to a resource `dynatrace_management_zone_v2` or a data source `dynatrace_management_zone`.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope" tf:"scope,omitempty"`

	// zone
	// The type of this permission. Possible values are `account`, `tenant`, `management-zone`
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type PermissionsInitParameters struct {

	// (Block Set, Min: 1) A Permission (see below for nested schema)
	// A Permission
	Permission []PermissionInitParameters `json:"permission,omitempty" tf:"permission,omitempty"`
}

type PermissionsObservation struct {

	// (Block Set, Min: 1) A Permission (see below for nested schema)
	// A Permission
	Permission []PermissionObservation `json:"permission,omitempty" tf:"permission,omitempty"`
}

type PermissionsParameters struct {

	// (Block Set, Min: 1) A Permission (see below for nested schema)
	// A Permission
	// +kubebuilder:validation:Optional
	Permission []PermissionParameters `json:"permission" tf:"permission,omitempty"`
}

// IAMGroupSpec defines the desired state of IAMGroup
type IAMGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IAMGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IAMGroupInitParameters `json:"initProvider,omitempty"`
}

// IAMGroupStatus defines the observed state of IAMGroup.
type IAMGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IAMGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IAMGroup is the Schema for the IAMGroups API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type IAMGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   IAMGroupSpec   `json:"spec"`
	Status IAMGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IAMGroupList contains a list of IAMGroups
type IAMGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IAMGroup `json:"items"`
}

// Repository type metadata.
var (
	IAMGroup_Kind             = "IAMGroup"
	IAMGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IAMGroup_Kind}.String()
	IAMGroup_KindAPIVersion   = IAMGroup_Kind + "." + CRDGroupVersion.String()
	IAMGroup_GroupVersionKind = CRDGroupVersion.WithKind(IAMGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&IAMGroup{}, &IAMGroupList{})
}
