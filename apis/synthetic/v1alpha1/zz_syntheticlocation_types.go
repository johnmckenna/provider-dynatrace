// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SyntheticLocationInitParameters struct {

	// (Boolean) Auto upgrade of Chromium is enabled (true) or disabled (false)
	// Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)
	AutoUpdateChromium *bool `json:"autoUpdateChromium,omitempty" tf:"auto_update_chromium,omitempty"`

	// (Boolean) The alerting of location outage is enabled (true) or disabled (false)
	// The alerting of location outage is enabled (`true`) or disabled (`false`)
	AvailabilityLocationOutage *bool `json:"availabilityLocationOutage,omitempty" tf:"availability_location_outage,omitempty"`

	// (Boolean) The alerting of node outage is enabled (true) or disabled (false).
	// The alerting of node outage is enabled (`true`) or disabled (`false`).
	//
	// If enabled, the outage of *any* node in the location triggers an alert
	AvailabilityNodeOutage *bool `json:"availabilityNodeOutage,omitempty" tf:"availability_node_outage,omitempty"`

	// (Boolean) The notifications of location and node outage is enabled (true) or disabled (false)
	// The notifications of location and node outage is enabled (`true`) or disabled (`false`)
	AvailabilityNotificationsEnabled *bool `json:"availabilityNotificationsEnabled,omitempty" tf:"availability_notifications_enabled,omitempty"`

	// (String) The city of the location
	// The city of the location
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// (String) The country code of the location.
	// The country code of the location.
	//
	// Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for example, `AT` for Austria or `PL` for Poland)
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// (String) The deployment type of the location:
	// The deployment type of the location:
	//
	// * `STANDARD`: The location is deployed on Windows or Linux.
	// * `KUBERNETES`: The location is deployed on Kubernetes
	DeploymentType *string `json:"deploymentType,omitempty" tf:"deployment_type,omitempty"`

	// (Number) The latitude of the location in DDD.dddd format
	// The latitude of the location in `DDD.dddd` format
	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// (Number) Alert if the location or node outage lasts longer than X minutes.
	// Alert if the location or node outage lasts longer than *X* minutes.
	//
	// Only applicable when **availability_location_outage** or **availability_node_outage** is set to `true`
	LocationNodeOutageDelayInMinutes *float64 `json:"locationNodeOutageDelayInMinutes,omitempty" tf:"location_node_outage_delay_in_minutes,omitempty"`

	// (Number) The longitude of the location in DDD.dddd format
	// The longitude of the location in `DDD.dddd` format
	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// (Number) The maximum number of Active Gates required for that location. Not required when deployment_type is set to STANDARD
	// The maximum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
	MaxActiveGateCount *float64 `json:"maxActiveGateCount,omitempty" tf:"max_active_gate_count,omitempty"`

	// (Number) The minimum number of Active Gates required for that location. Not required when deployment_type is set to STANDARD
	// The minimum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
	MinActiveGateCount *float64 `json:"minActiveGateCount,omitempty" tf:"min_active_gate_count,omitempty"`

	// (String) The name of the location
	// The name of the location
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible values: UNSUPPORTED, XS, S and M. Not required when deployment_type is set to STANDARD.
	// Possible values: `UNSUPPORTED`, `XS`, `S` and `M`. Not required when `deployment_type` is set to `STANDARD`.
	NodeSize *string `json:"nodeSize,omitempty" tf:"node_size,omitempty"`

	// (Set of String) A list of synthetic nodes belonging to the location.
	// A list of synthetic nodes belonging to the location.
	//
	// You can retrieve the list of available nodes with the [GET all nodes](https://dt-url.net/miy3rpl) call
	// +listType=set
	Nodes []*string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// (String) The region code of the location.
	// The region code of the location.
	//
	// For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes (without `US-` or `CA-` prefix), for example, `VA` for Virginia or `OR` for Oregon.
	//
	// For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)
	RegionCode *string `json:"regionCode,omitempty" tf:"region_code,omitempty"`
}

type SyntheticLocationObservation struct {

	// (Boolean) Auto upgrade of Chromium is enabled (true) or disabled (false)
	// Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)
	AutoUpdateChromium *bool `json:"autoUpdateChromium,omitempty" tf:"auto_update_chromium,omitempty"`

	// (Boolean) The alerting of location outage is enabled (true) or disabled (false)
	// The alerting of location outage is enabled (`true`) or disabled (`false`)
	AvailabilityLocationOutage *bool `json:"availabilityLocationOutage,omitempty" tf:"availability_location_outage,omitempty"`

	// (Boolean) The alerting of node outage is enabled (true) or disabled (false).
	// The alerting of node outage is enabled (`true`) or disabled (`false`).
	//
	// If enabled, the outage of *any* node in the location triggers an alert
	AvailabilityNodeOutage *bool `json:"availabilityNodeOutage,omitempty" tf:"availability_node_outage,omitempty"`

	// (Boolean) The notifications of location and node outage is enabled (true) or disabled (false)
	// The notifications of location and node outage is enabled (`true`) or disabled (`false`)
	AvailabilityNotificationsEnabled *bool `json:"availabilityNotificationsEnabled,omitempty" tf:"availability_notifications_enabled,omitempty"`

	// (String) The city of the location
	// The city of the location
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// (String) The country code of the location.
	// The country code of the location.
	//
	// Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for example, `AT` for Austria or `PL` for Poland)
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// (String) The deployment type of the location:
	// The deployment type of the location:
	//
	// * `STANDARD`: The location is deployed on Windows or Linux.
	// * `KUBERNETES`: The location is deployed on Kubernetes
	DeploymentType *string `json:"deploymentType,omitempty" tf:"deployment_type,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) The latitude of the location in DDD.dddd format
	// The latitude of the location in `DDD.dddd` format
	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// (Number) Alert if the location or node outage lasts longer than X minutes.
	// Alert if the location or node outage lasts longer than *X* minutes.
	//
	// Only applicable when **availability_location_outage** or **availability_node_outage** is set to `true`
	LocationNodeOutageDelayInMinutes *float64 `json:"locationNodeOutageDelayInMinutes,omitempty" tf:"location_node_outage_delay_in_minutes,omitempty"`

	// (Number) The longitude of the location in DDD.dddd format
	// The longitude of the location in `DDD.dddd` format
	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// (Number) The maximum number of Active Gates required for that location. Not required when deployment_type is set to STANDARD
	// The maximum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
	MaxActiveGateCount *float64 `json:"maxActiveGateCount,omitempty" tf:"max_active_gate_count,omitempty"`

	// (Number) The minimum number of Active Gates required for that location. Not required when deployment_type is set to STANDARD
	// The minimum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
	MinActiveGateCount *float64 `json:"minActiveGateCount,omitempty" tf:"min_active_gate_count,omitempty"`

	// (String) The name of the location
	// The name of the location
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible values: UNSUPPORTED, XS, S and M. Not required when deployment_type is set to STANDARD.
	// Possible values: `UNSUPPORTED`, `XS`, `S` and `M`. Not required when `deployment_type` is set to `STANDARD`.
	NodeSize *string `json:"nodeSize,omitempty" tf:"node_size,omitempty"`

	// (Set of String) A list of synthetic nodes belonging to the location.
	// A list of synthetic nodes belonging to the location.
	//
	// You can retrieve the list of available nodes with the [GET all nodes](https://dt-url.net/miy3rpl) call
	// +listType=set
	Nodes []*string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// (String) The region code of the location.
	// The region code of the location.
	//
	// For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes (without `US-` or `CA-` prefix), for example, `VA` for Virginia or `OR` for Oregon.
	//
	// For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)
	RegionCode *string `json:"regionCode,omitempty" tf:"region_code,omitempty"`
}

type SyntheticLocationParameters struct {

	// (Boolean) Auto upgrade of Chromium is enabled (true) or disabled (false)
	// Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	AutoUpdateChromium *bool `json:"autoUpdateChromium,omitempty" tf:"auto_update_chromium,omitempty"`

	// (Boolean) The alerting of location outage is enabled (true) or disabled (false)
	// The alerting of location outage is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	AvailabilityLocationOutage *bool `json:"availabilityLocationOutage,omitempty" tf:"availability_location_outage,omitempty"`

	// (Boolean) The alerting of node outage is enabled (true) or disabled (false).
	// The alerting of node outage is enabled (`true`) or disabled (`false`).
	//
	// If enabled, the outage of *any* node in the location triggers an alert
	// +kubebuilder:validation:Optional
	AvailabilityNodeOutage *bool `json:"availabilityNodeOutage,omitempty" tf:"availability_node_outage,omitempty"`

	// (Boolean) The notifications of location and node outage is enabled (true) or disabled (false)
	// The notifications of location and node outage is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	AvailabilityNotificationsEnabled *bool `json:"availabilityNotificationsEnabled,omitempty" tf:"availability_notifications_enabled,omitempty"`

	// (String) The city of the location
	// The city of the location
	// +kubebuilder:validation:Optional
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// (String) The country code of the location.
	// The country code of the location.
	//
	// Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for example, `AT` for Austria or `PL` for Poland)
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// (String) The deployment type of the location:
	// The deployment type of the location:
	//
	// * `STANDARD`: The location is deployed on Windows or Linux.
	// * `KUBERNETES`: The location is deployed on Kubernetes
	// +kubebuilder:validation:Optional
	DeploymentType *string `json:"deploymentType,omitempty" tf:"deployment_type,omitempty"`

	// (Number) The latitude of the location in DDD.dddd format
	// The latitude of the location in `DDD.dddd` format
	// +kubebuilder:validation:Optional
	Latitude *float64 `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// (Number) Alert if the location or node outage lasts longer than X minutes.
	// Alert if the location or node outage lasts longer than *X* minutes.
	//
	// Only applicable when **availability_location_outage** or **availability_node_outage** is set to `true`
	// +kubebuilder:validation:Optional
	LocationNodeOutageDelayInMinutes *float64 `json:"locationNodeOutageDelayInMinutes,omitempty" tf:"location_node_outage_delay_in_minutes,omitempty"`

	// (Number) The longitude of the location in DDD.dddd format
	// The longitude of the location in `DDD.dddd` format
	// +kubebuilder:validation:Optional
	Longitude *float64 `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// (Number) The maximum number of Active Gates required for that location. Not required when deployment_type is set to STANDARD
	// The maximum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
	// +kubebuilder:validation:Optional
	MaxActiveGateCount *float64 `json:"maxActiveGateCount,omitempty" tf:"max_active_gate_count,omitempty"`

	// (Number) The minimum number of Active Gates required for that location. Not required when deployment_type is set to STANDARD
	// The minimum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`
	// +kubebuilder:validation:Optional
	MinActiveGateCount *float64 `json:"minActiveGateCount,omitempty" tf:"min_active_gate_count,omitempty"`

	// (String) The name of the location
	// The name of the location
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible values: UNSUPPORTED, XS, S and M. Not required when deployment_type is set to STANDARD.
	// Possible values: `UNSUPPORTED`, `XS`, `S` and `M`. Not required when `deployment_type` is set to `STANDARD`.
	// +kubebuilder:validation:Optional
	NodeSize *string `json:"nodeSize,omitempty" tf:"node_size,omitempty"`

	// (Set of String) A list of synthetic nodes belonging to the location.
	// A list of synthetic nodes belonging to the location.
	//
	// You can retrieve the list of available nodes with the [GET all nodes](https://dt-url.net/miy3rpl) call
	// +kubebuilder:validation:Optional
	// +listType=set
	Nodes []*string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// (String) The region code of the location.
	// The region code of the location.
	//
	// For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca) use ISO 3166-2 state codes (without `US-` or `CA-` prefix), for example, `VA` for Virginia or `OR` for Oregon.
	//
	// For the rest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)
	// +kubebuilder:validation:Optional
	RegionCode *string `json:"regionCode,omitempty" tf:"region_code,omitempty"`
}

// SyntheticLocationSpec defines the desired state of SyntheticLocation
type SyntheticLocationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SyntheticLocationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SyntheticLocationInitParameters `json:"initProvider,omitempty"`
}

// SyntheticLocationStatus defines the observed state of SyntheticLocation.
type SyntheticLocationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SyntheticLocationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SyntheticLocation is the Schema for the SyntheticLocations API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type SyntheticLocation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.latitude) || (has(self.initProvider) && has(self.initProvider.latitude))",message="spec.forProvider.latitude is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.longitude) || (has(self.initProvider) && has(self.initProvider.longitude))",message="spec.forProvider.longitude is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SyntheticLocationSpec   `json:"spec"`
	Status SyntheticLocationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SyntheticLocationList contains a list of SyntheticLocations
type SyntheticLocationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SyntheticLocation `json:"items"`
}

// Repository type metadata.
var (
	SyntheticLocation_Kind             = "SyntheticLocation"
	SyntheticLocation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SyntheticLocation_Kind}.String()
	SyntheticLocation_KindAPIVersion   = SyntheticLocation_Kind + "." + CRDGroupVersion.String()
	SyntheticLocation_GroupVersionKind = CRDGroupVersion.WithKind(SyntheticLocation_Kind)
)

func init() {
	SchemeBuilder.Register(&SyntheticLocation{}, &SyntheticLocationList{})
}
