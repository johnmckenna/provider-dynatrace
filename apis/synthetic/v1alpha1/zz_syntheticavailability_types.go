// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SyntheticAvailabilityInitParameters struct {

	// (Boolean) Exclude periods with maintenance windows from availability calculation
	// Exclude periods with maintenance windows from availability calculation
	ExcludeMaintenanceWindows *bool `json:"excludeMaintenanceWindows,omitempty" tf:"exclude_maintenance_windows,omitempty"`
}

type SyntheticAvailabilityObservation struct {

	// (Boolean) Exclude periods with maintenance windows from availability calculation
	// Exclude periods with maintenance windows from availability calculation
	ExcludeMaintenanceWindows *bool `json:"excludeMaintenanceWindows,omitempty" tf:"exclude_maintenance_windows,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SyntheticAvailabilityParameters struct {

	// (Boolean) Exclude periods with maintenance windows from availability calculation
	// Exclude periods with maintenance windows from availability calculation
	// +kubebuilder:validation:Optional
	ExcludeMaintenanceWindows *bool `json:"excludeMaintenanceWindows,omitempty" tf:"exclude_maintenance_windows,omitempty"`
}

// SyntheticAvailabilitySpec defines the desired state of SyntheticAvailability
type SyntheticAvailabilitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SyntheticAvailabilityParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SyntheticAvailabilityInitParameters `json:"initProvider,omitempty"`
}

// SyntheticAvailabilityStatus defines the observed state of SyntheticAvailability.
type SyntheticAvailabilityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SyntheticAvailabilityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SyntheticAvailability is the Schema for the SyntheticAvailabilitys API. Dynatrace offers the possibility to configure maintenance windows. By default maintenance windows only affect problem detection and alerting. You can change this behavior and calculate availability including/excluding maintenance window periods
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type SyntheticAvailability struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.excludeMaintenanceWindows) || (has(self.initProvider) && has(self.initProvider.excludeMaintenanceWindows))",message="spec.forProvider.excludeMaintenanceWindows is a required parameter"
	Spec   SyntheticAvailabilitySpec   `json:"spec"`
	Status SyntheticAvailabilityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SyntheticAvailabilityList contains a list of SyntheticAvailabilitys
type SyntheticAvailabilityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SyntheticAvailability `json:"items"`
}

// Repository type metadata.
var (
	SyntheticAvailability_Kind             = "SyntheticAvailability"
	SyntheticAvailability_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SyntheticAvailability_Kind}.String()
	SyntheticAvailability_KindAPIVersion   = SyntheticAvailability_Kind + "." + CRDGroupVersion.String()
	SyntheticAvailability_GroupVersionKind = CRDGroupVersion.WithKind(SyntheticAvailability_Kind)
)

func init() {
	SchemeBuilder.Register(&SyntheticAvailability{}, &SyntheticAvailabilityList{})
}
