// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CalculatedSyntheticMetricInitParameters struct {

	// (String) Descriptor of a calculated synthetic metric.
	// Descriptor of a calculated synthetic metric.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List) Dimension of the calculated synthetic metric. (see below for nested schema)
	// Dimension of the calculated synthetic metric.
	Dimensions []DimensionsInitParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) The metric is enabled (true) or disabled (false)
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Filter of the calculated synthetic metric. (see below for nested schema)
	// Filter of the calculated synthetic metric.
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	// The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The unique key of the calculated synthetic metric.
	// The unique key of the calculated synthetic metric.
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// (String) The Dynatrace entity ID of the monitor to which the metric belongs.
	// The Dynatrace entity ID of the monitor to which the metric belongs.
	MonitorIdentifier *string `json:"monitorIdentifier,omitempty" tf:"monitor_identifier,omitempty"`

	// (String) The displayed name of the metric.
	// The displayed name of the metric.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CalculatedSyntheticMetricObservation struct {

	// (String) Descriptor of a calculated synthetic metric.
	// Descriptor of a calculated synthetic metric.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List) Dimension of the calculated synthetic metric. (see below for nested schema)
	// Dimension of the calculated synthetic metric.
	Dimensions []DimensionsObservation `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) The metric is enabled (true) or disabled (false)
	// The metric is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Filter of the calculated synthetic metric. (see below for nested schema)
	// Filter of the calculated synthetic metric.
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	// The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The unique key of the calculated synthetic metric.
	// The unique key of the calculated synthetic metric.
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// (String) The Dynatrace entity ID of the monitor to which the metric belongs.
	// The Dynatrace entity ID of the monitor to which the metric belongs.
	MonitorIdentifier *string `json:"monitorIdentifier,omitempty" tf:"monitor_identifier,omitempty"`

	// (String) The displayed name of the metric.
	// The displayed name of the metric.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type CalculatedSyntheticMetricParameters struct {

	// (String) Descriptor of a calculated synthetic metric.
	// Descriptor of a calculated synthetic metric.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List) Dimension of the calculated synthetic metric. (see below for nested schema)
	// Dimension of the calculated synthetic metric.
	// +kubebuilder:validation:Optional
	Dimensions []DimensionsParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) The metric is enabled (true) or disabled (false)
	// The metric is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Max: 1) Filter of the calculated synthetic metric. (see below for nested schema)
	// Filter of the calculated synthetic metric.
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	// The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup, DOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay, FirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd, LoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart, ResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize, UserActionDuration, VisuallyComplete ]
	// +kubebuilder:validation:Optional
	Metric *string `json:"metric,omitempty" tf:"metric,omitempty"`

	// (String) The unique key of the calculated synthetic metric.
	// The unique key of the calculated synthetic metric.
	// +kubebuilder:validation:Optional
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// (String) The Dynatrace entity ID of the monitor to which the metric belongs.
	// The Dynatrace entity ID of the monitor to which the metric belongs.
	// +kubebuilder:validation:Optional
	MonitorIdentifier *string `json:"monitorIdentifier,omitempty" tf:"monitor_identifier,omitempty"`

	// (String) The displayed name of the metric.
	// The displayed name of the metric.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DimensionInitParameters struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// The dimension of the metric. Possible values are `Event`, `Location`, `ResourceOrigin`
	Dimension *string `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// (Number) The number of top values to be calculated
	// The number of top values to be calculated
	TopX *float64 `json:"topX,omitempty" tf:"top_x,omitempty"`
}

type DimensionObservation struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// The dimension of the metric. Possible values are `Event`, `Location`, `ResourceOrigin`
	Dimension *string `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// (Number) The number of top values to be calculated
	// The number of top values to be calculated
	TopX *float64 `json:"topX,omitempty" tf:"top_x,omitempty"`
}

type DimensionParameters struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// The dimension of the metric. Possible values are `Event`, `Location`, `ResourceOrigin`
	// +kubebuilder:validation:Optional
	Dimension *string `json:"dimension" tf:"dimension,omitempty"`

	// (Number) The number of top values to be calculated
	// The number of top values to be calculated
	// +kubebuilder:validation:Optional
	TopX *float64 `json:"topX,omitempty" tf:"top_x,omitempty"`
}

type DimensionsInitParameters struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// A dimensions for the metric usage
	Dimension []DimensionInitParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`
}

type DimensionsObservation struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// A dimensions for the metric usage
	Dimension []DimensionObservation `json:"dimension,omitempty" tf:"dimension,omitempty"`
}

type DimensionsParameters struct {

	// (Block List) A dimensions for the metric usage (see below for nested schema)
	// A dimensions for the metric usage
	// +kubebuilder:validation:Optional
	Dimension []DimensionParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`
}

type FilterInitParameters struct {

	// (String) Only user actions of the specified type are included in the metric calculation
	// Only user actions of the specified type are included in the metric calculation
	ActionType *string `json:"actionType,omitempty" tf:"action_type,omitempty"`

	// (Number) Only executions finished with the specified error code are included in the metric calculation.
	// Only executions finished with the specified error code are included in the metric calculation.
	ErrorCode *float64 `json:"errorCode,omitempty" tf:"error_code,omitempty"`

	// (String) Only the specified browser clickpath event is included in the metric calculation. Specify the Dynatrace entity ID of the event here.
	// Only the specified browser clickpath event is included in the metric calculation. Specify the Dynatrace entity ID of the event here.
	Event *string `json:"event,omitempty" tf:"event,omitempty"`

	// (Boolean) The execution status of the monitors to be included in the metric calculation: true or false
	// The execution status of the monitors to be included in the metric calculation: `true` or `false`
	HasError *bool `json:"hasError,omitempty" tf:"has_error,omitempty"`

	// (String) Only executions from the specified location are included in the metric calculation. Specify the Dynatrace entity ID of the location here.
	// Only executions from the specified location are included in the metric calculation. Specify the Dynatrace entity ID of the location here.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`
}

type FilterObservation struct {

	// (String) Only user actions of the specified type are included in the metric calculation
	// Only user actions of the specified type are included in the metric calculation
	ActionType *string `json:"actionType,omitempty" tf:"action_type,omitempty"`

	// (Number) Only executions finished with the specified error code are included in the metric calculation.
	// Only executions finished with the specified error code are included in the metric calculation.
	ErrorCode *float64 `json:"errorCode,omitempty" tf:"error_code,omitempty"`

	// (String) Only the specified browser clickpath event is included in the metric calculation. Specify the Dynatrace entity ID of the event here.
	// Only the specified browser clickpath event is included in the metric calculation. Specify the Dynatrace entity ID of the event here.
	Event *string `json:"event,omitempty" tf:"event,omitempty"`

	// (Boolean) The execution status of the monitors to be included in the metric calculation: true or false
	// The execution status of the monitors to be included in the metric calculation: `true` or `false`
	HasError *bool `json:"hasError,omitempty" tf:"has_error,omitempty"`

	// (String) Only executions from the specified location are included in the metric calculation. Specify the Dynatrace entity ID of the location here.
	// Only executions from the specified location are included in the metric calculation. Specify the Dynatrace entity ID of the location here.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`
}

type FilterParameters struct {

	// (String) Only user actions of the specified type are included in the metric calculation
	// Only user actions of the specified type are included in the metric calculation
	// +kubebuilder:validation:Optional
	ActionType *string `json:"actionType,omitempty" tf:"action_type,omitempty"`

	// (Number) Only executions finished with the specified error code are included in the metric calculation.
	// Only executions finished with the specified error code are included in the metric calculation.
	// +kubebuilder:validation:Optional
	ErrorCode *float64 `json:"errorCode,omitempty" tf:"error_code,omitempty"`

	// (String) Only the specified browser clickpath event is included in the metric calculation. Specify the Dynatrace entity ID of the event here.
	// Only the specified browser clickpath event is included in the metric calculation. Specify the Dynatrace entity ID of the event here.
	// +kubebuilder:validation:Optional
	Event *string `json:"event,omitempty" tf:"event,omitempty"`

	// (Boolean) The execution status of the monitors to be included in the metric calculation: true or false
	// The execution status of the monitors to be included in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	HasError *bool `json:"hasError,omitempty" tf:"has_error,omitempty"`

	// (String) Only executions from the specified location are included in the metric calculation. Specify the Dynatrace entity ID of the location here.
	// Only executions from the specified location are included in the metric calculation. Specify the Dynatrace entity ID of the location here.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`
}

// CalculatedSyntheticMetricSpec defines the desired state of CalculatedSyntheticMetric
type CalculatedSyntheticMetricSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CalculatedSyntheticMetricParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CalculatedSyntheticMetricInitParameters `json:"initProvider,omitempty"`
}

// CalculatedSyntheticMetricStatus defines the observed state of CalculatedSyntheticMetric.
type CalculatedSyntheticMetricStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CalculatedSyntheticMetricObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CalculatedSyntheticMetric is the Schema for the CalculatedSyntheticMetrics API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type CalculatedSyntheticMetric struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metric) || (has(self.initProvider) && has(self.initProvider.metric))",message="spec.forProvider.metric is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricKey) || (has(self.initProvider) && has(self.initProvider.metricKey))",message="spec.forProvider.metricKey is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.monitorIdentifier) || (has(self.initProvider) && has(self.initProvider.monitorIdentifier))",message="spec.forProvider.monitorIdentifier is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CalculatedSyntheticMetricSpec   `json:"spec"`
	Status CalculatedSyntheticMetricStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CalculatedSyntheticMetricList contains a list of CalculatedSyntheticMetrics
type CalculatedSyntheticMetricList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CalculatedSyntheticMetric `json:"items"`
}

// Repository type metadata.
var (
	CalculatedSyntheticMetric_Kind             = "CalculatedSyntheticMetric"
	CalculatedSyntheticMetric_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CalculatedSyntheticMetric_Kind}.String()
	CalculatedSyntheticMetric_KindAPIVersion   = CalculatedSyntheticMetric_Kind + "." + CRDGroupVersion.String()
	CalculatedSyntheticMetric_GroupVersionKind = CRDGroupVersion.WithKind(CalculatedSyntheticMetric_Kind)
)

func init() {
	SchemeBuilder.Register(&CalculatedSyntheticMetric{}, &CalculatedSyntheticMetricList{})
}
