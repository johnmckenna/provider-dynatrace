// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OwnershipConfigInitParameters struct {

	// value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier. (see below for nested schema)
	// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
	OwnershipIdentifiers []OwnershipIdentifiersInitParameters `json:"ownershipIdentifiers,omitempty" tf:"ownership_identifiers,omitempty"`
}

type OwnershipConfigObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier. (see below for nested schema)
	// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
	OwnershipIdentifiers []OwnershipIdentifiersObservation `json:"ownershipIdentifiers,omitempty" tf:"ownership_identifiers,omitempty"`
}

type OwnershipConfigParameters struct {

	// value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier. (see below for nested schema)
	// Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or any metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.
	// +kubebuilder:validation:Optional
	OwnershipIdentifiers []OwnershipIdentifiersParameters `json:"ownershipIdentifiers,omitempty" tf:"ownership_identifiers,omitempty"`
}

type OwnershipIdentifierInitParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Key for ownership metadata and tags
	// Key for ownership metadata and tags
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type OwnershipIdentifierObservation struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Key for ownership metadata and tags
	// Key for ownership metadata and tags
	Key *string `json:"key,omitempty" tf:"key,omitempty"`
}

type OwnershipIdentifierParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// (String) Key for ownership metadata and tags
	// Key for ownership metadata and tags
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`
}

type OwnershipIdentifiersInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	OwnershipIdentifier []OwnershipIdentifierInitParameters `json:"ownershipIdentifier,omitempty" tf:"ownership_identifier,omitempty"`
}

type OwnershipIdentifiersObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	OwnershipIdentifier []OwnershipIdentifierObservation `json:"ownershipIdentifier,omitempty" tf:"ownership_identifier,omitempty"`
}

type OwnershipIdentifiersParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	OwnershipIdentifier []OwnershipIdentifierParameters `json:"ownershipIdentifier" tf:"ownership_identifier,omitempty"`
}

// OwnershipConfigSpec defines the desired state of OwnershipConfig
type OwnershipConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OwnershipConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OwnershipConfigInitParameters `json:"initProvider,omitempty"`
}

// OwnershipConfigStatus defines the observed state of OwnershipConfig.
type OwnershipConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OwnershipConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OwnershipConfig is the Schema for the OwnershipConfigs API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type OwnershipConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ownershipIdentifiers) || (has(self.initProvider) && has(self.initProvider.ownershipIdentifiers))",message="spec.forProvider.ownershipIdentifiers is a required parameter"
	Spec   OwnershipConfigSpec   `json:"spec"`
	Status OwnershipConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OwnershipConfigList contains a list of OwnershipConfigs
type OwnershipConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OwnershipConfig `json:"items"`
}

// Repository type metadata.
var (
	OwnershipConfig_Kind             = "OwnershipConfig"
	OwnershipConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OwnershipConfig_Kind}.String()
	OwnershipConfig_KindAPIVersion   = OwnershipConfig_Kind + "." + CRDGroupVersion.String()
	OwnershipConfig_GroupVersionKind = CRDGroupVersion.WithKind(OwnershipConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&OwnershipConfig{}, &OwnershipConfigList{})
}
