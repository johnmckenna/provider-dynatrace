// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogProcessingInitParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (Block List, Min: 1, Max: 1) ## Processor definition
	// Add a rule definition using our syntax. In our documentation you will find instructions and application examples. (see below for nested schema)
	// ## Processor definition
	// Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you will find instructions and application [examples](https://dt-url.net/m24305t).
	ProcessorDefinition []ProcessorDefinitionInitParameters `json:"processorDefinition,omitempty" tf:"processor_definition,omitempty"`

	// (String) Matcher
	// Matcher
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) Rule name
	// Rule name
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// (Block List, Min: 1, Max: 1) ## Rule testing
	// ## Rule testing
	// ### 1. Paste a log / JSON sample
	RuleTesting []RuleTestingInitParameters `json:"ruleTesting,omitempty" tf:"rule_testing,omitempty"`
}

type LogProcessingObservation struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (Block List, Min: 1, Max: 1) ## Processor definition
	// Add a rule definition using our syntax. In our documentation you will find instructions and application examples. (see below for nested schema)
	// ## Processor definition
	// Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you will find instructions and application [examples](https://dt-url.net/m24305t).
	ProcessorDefinition []ProcessorDefinitionObservation `json:"processorDefinition,omitempty" tf:"processor_definition,omitempty"`

	// (String) Matcher
	// Matcher
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) Rule name
	// Rule name
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// (Block List, Min: 1, Max: 1) ## Rule testing
	// ## Rule testing
	// ### 1. Paste a log / JSON sample
	RuleTesting []RuleTestingObservation `json:"ruleTesting,omitempty" tf:"rule_testing,omitempty"`
}

type LogProcessingParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// +kubebuilder:validation:Optional
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (Block List, Min: 1, Max: 1) ## Processor definition
	// Add a rule definition using our syntax. In our documentation you will find instructions and application examples. (see below for nested schema)
	// ## Processor definition
	// Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you will find instructions and application [examples](https://dt-url.net/m24305t).
	// +kubebuilder:validation:Optional
	ProcessorDefinition []ProcessorDefinitionParameters `json:"processorDefinition,omitempty" tf:"processor_definition,omitempty"`

	// (String) Matcher
	// Matcher
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) Rule name
	// Rule name
	// +kubebuilder:validation:Optional
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// (Block List, Min: 1, Max: 1) ## Rule testing
	// ## Rule testing
	// ### 1. Paste a log / JSON sample
	// +kubebuilder:validation:Optional
	RuleTesting []RuleTestingParameters `json:"ruleTesting,omitempty" tf:"rule_testing,omitempty"`
}

type ProcessorDefinitionInitParameters struct {

	// (String) Processor definition
	// Processor definition
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type ProcessorDefinitionObservation struct {

	// (String) Processor definition
	// Processor definition
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`
}

type ProcessorDefinitionParameters struct {

	// (String) Processor definition
	// Processor definition
	// +kubebuilder:validation:Optional
	Rule *string `json:"rule" tf:"rule,omitempty"`
}

type RuleTestingInitParameters struct {

	// (String) Sample log in JSON format.
	// Sample log in JSON format.
	SampleLog *string `json:"sampleLog,omitempty" tf:"sample_log,omitempty"`
}

type RuleTestingObservation struct {

	// (String) Sample log in JSON format.
	// Sample log in JSON format.
	SampleLog *string `json:"sampleLog,omitempty" tf:"sample_log,omitempty"`
}

type RuleTestingParameters struct {

	// (String) Sample log in JSON format.
	// Sample log in JSON format.
	// +kubebuilder:validation:Optional
	SampleLog *string `json:"sampleLog" tf:"sample_log,omitempty"`
}

// LogProcessingSpec defines the desired state of LogProcessing
type LogProcessingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogProcessingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LogProcessingInitParameters `json:"initProvider,omitempty"`
}

// LogProcessingStatus defines the observed state of LogProcessing.
type LogProcessingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogProcessingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LogProcessing is the Schema for the LogProcessings API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type LogProcessing struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.processorDefinition) || (has(self.initProvider) && has(self.initProvider.processorDefinition))",message="spec.forProvider.processorDefinition is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.query) || (has(self.initProvider) && has(self.initProvider.query))",message="spec.forProvider.query is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ruleName) || (has(self.initProvider) && has(self.initProvider.ruleName))",message="spec.forProvider.ruleName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ruleTesting) || (has(self.initProvider) && has(self.initProvider.ruleTesting))",message="spec.forProvider.ruleTesting is a required parameter"
	Spec   LogProcessingSpec   `json:"spec"`
	Status LogProcessingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogProcessingList contains a list of LogProcessings
type LogProcessingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogProcessing `json:"items"`
}

// Repository type metadata.
var (
	LogProcessing_Kind             = "LogProcessing"
	LogProcessing_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogProcessing_Kind}.String()
	LogProcessing_KindAPIVersion   = LogProcessing_Kind + "." + CRDGroupVersion.String()
	LogProcessing_GroupVersionKind = CRDGroupVersion.WithKind(LogProcessing_Kind)
)

func init() {
	SchemeBuilder.Register(&LogProcessing{}, &LogProcessingList{})
}
