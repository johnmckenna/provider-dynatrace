// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogMetricsInitParameters struct {

	// (Set of String) To enable splitting on your metric, add desired dimensions.
	// To enable splitting on your metric, add desired dimensions.
	//
	// You can select a dimension name from the list or set it to any value. To extract fields from logs, you can use [log processing](builtin:logmonitoring.log-dpp-rules).
	// +listType=set
	Dimensions []*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Metric key
	// Metric key
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Possible Values: OCCURRENCE, ATTRIBUTE
	// Possible Values: `OCCURRENCE`, `ATTRIBUTE`
	Measure *string `json:"measure,omitempty" tf:"measure,omitempty"`

	// (String) Attribute
	// Attribute
	MeasureAttribute *string `json:"measureAttribute,omitempty" tf:"measure_attribute,omitempty"`

	// (String) Matcher
	// Matcher
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type LogMetricsObservation struct {

	// (Set of String) To enable splitting on your metric, add desired dimensions.
	// To enable splitting on your metric, add desired dimensions.
	//
	// You can select a dimension name from the list or set it to any value. To extract fields from logs, you can use [log processing](builtin:logmonitoring.log-dpp-rules).
	// +listType=set
	Dimensions []*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Metric key
	// Metric key
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Possible Values: OCCURRENCE, ATTRIBUTE
	// Possible Values: `OCCURRENCE`, `ATTRIBUTE`
	Measure *string `json:"measure,omitempty" tf:"measure,omitempty"`

	// (String) Attribute
	// Attribute
	MeasureAttribute *string `json:"measureAttribute,omitempty" tf:"measure_attribute,omitempty"`

	// (String) Matcher
	// Matcher
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type LogMetricsParameters struct {

	// (Set of String) To enable splitting on your metric, add desired dimensions.
	// To enable splitting on your metric, add desired dimensions.
	//
	// You can select a dimension name from the list or set it to any value. To extract fields from logs, you can use [log processing](builtin:logmonitoring.log-dpp-rules).
	// +kubebuilder:validation:Optional
	// +listType=set
	Dimensions []*string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Metric key
	// Metric key
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) Possible Values: OCCURRENCE, ATTRIBUTE
	// Possible Values: `OCCURRENCE`, `ATTRIBUTE`
	// +kubebuilder:validation:Optional
	Measure *string `json:"measure,omitempty" tf:"measure,omitempty"`

	// (String) Attribute
	// Attribute
	// +kubebuilder:validation:Optional
	MeasureAttribute *string `json:"measureAttribute,omitempty" tf:"measure_attribute,omitempty"`

	// (String) Matcher
	// Matcher
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

// LogMetricsSpec defines the desired state of LogMetrics
type LogMetricsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogMetricsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LogMetricsInitParameters `json:"initProvider,omitempty"`
}

// LogMetricsStatus defines the observed state of LogMetrics.
type LogMetricsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogMetricsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LogMetrics is the Schema for the LogMetricss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type LogMetrics struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.measure) || (has(self.initProvider) && has(self.initProvider.measure))",message="spec.forProvider.measure is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.query) || (has(self.initProvider) && has(self.initProvider.query))",message="spec.forProvider.query is a required parameter"
	Spec   LogMetricsSpec   `json:"spec"`
	Status LogMetricsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogMetricsList contains a list of LogMetricss
type LogMetricsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogMetrics `json:"items"`
}

// Repository type metadata.
var (
	LogMetrics_Kind             = "LogMetrics"
	LogMetrics_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogMetrics_Kind}.String()
	LogMetrics_KindAPIVersion   = LogMetrics_Kind + "." + CRDGroupVersion.String()
	LogMetrics_GroupVersionKind = CRDGroupVersion.WithKind(LogMetrics_Kind)
)

func init() {
	SchemeBuilder.Register(&LogMetrics{}, &LogMetricsList{})
}
