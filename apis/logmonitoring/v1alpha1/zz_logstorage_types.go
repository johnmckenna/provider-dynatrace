// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogStorageInitParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	Matchers []LogStorageMatchersInitParameters `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (String) Name
	// Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Boolean) If true matching logs will be included in storage. If false matching logs will be excluded from storage.
	// If `true` matching logs will be included in storage. If `false` matching logs will be excluded from storage.
	SendToStorage *bool `json:"sendToStorage,omitempty" tf:"send_to_storage,omitempty"`
}

type LogStorageMatchersInitParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Matcher []MatchersMatcherInitParameters `json:"matcher,omitempty" tf:"matcher,omitempty"`
}

type LogStorageMatchersObservation struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Matcher []MatchersMatcherObservation `json:"matcher,omitempty" tf:"matcher,omitempty"`
}

type LogStorageMatchersParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Matcher []MatchersMatcherParameters `json:"matcher" tf:"matcher,omitempty"`
}

type LogStorageObservation struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	Matchers []LogStorageMatchersObservation `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (String) Name
	// Name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Boolean) If true matching logs will be included in storage. If false matching logs will be excluded from storage.
	// If `true` matching logs will be included in storage. If `false` matching logs will be excluded from storage.
	SendToStorage *bool `json:"sendToStorage,omitempty" tf:"send_to_storage,omitempty"`
}

type LogStorageParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// +kubebuilder:validation:Optional
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (Block List, Max: 1) no documentation available (see below for nested schema)
	// no documentation available
	// +kubebuilder:validation:Optional
	Matchers []LogStorageMatchersParameters `json:"matchers,omitempty" tf:"matchers,omitempty"`

	// (String) Name
	// Name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Boolean) If true matching logs will be included in storage. If false matching logs will be excluded from storage.
	// If `true` matching logs will be included in storage. If `false` matching logs will be excluded from storage.
	// +kubebuilder:validation:Optional
	SendToStorage *bool `json:"sendToStorage,omitempty" tf:"send_to_storage,omitempty"`
}

type MatchersMatcherInitParameters struct {

	// (String) Possible Values: Container_name, Dt_entity_container_group, Dt_entity_process_group, Host_tag, K8s_container_name, K8s_deployment_name, K8s_namespace_name, Log_content, Log_source, Loglevel, Process_technology, Winlog_eventid, Winlog_opcode, Winlog_provider, Winlog_task
	// Possible Values: `Container_name`, `Dt_entity_container_group`, `Dt_entity_process_group`, `Host_tag`, `K8s_container_name`, `K8s_deployment_name`, `K8s_namespace_name`, `Log_content`, `Log_source`, `Loglevel`, `Process_technology`, `Winlog_eventid`, `Winlog_opcode`, `Winlog_provider`, `Winlog_task`
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) Possible Values: MATCHES
	// Possible Values: `MATCHES`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (Set of String) no documentation available
	// no documentation available
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MatchersMatcherObservation struct {

	// (String) Possible Values: Container_name, Dt_entity_container_group, Dt_entity_process_group, Host_tag, K8s_container_name, K8s_deployment_name, K8s_namespace_name, Log_content, Log_source, Loglevel, Process_technology, Winlog_eventid, Winlog_opcode, Winlog_provider, Winlog_task
	// Possible Values: `Container_name`, `Dt_entity_container_group`, `Dt_entity_process_group`, `Host_tag`, `K8s_container_name`, `K8s_deployment_name`, `K8s_namespace_name`, `Log_content`, `Log_source`, `Loglevel`, `Process_technology`, `Winlog_eventid`, `Winlog_opcode`, `Winlog_provider`, `Winlog_task`
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String) Possible Values: MATCHES
	// Possible Values: `MATCHES`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (Set of String) no documentation available
	// no documentation available
	// +listType=set
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MatchersMatcherParameters struct {

	// (String) Possible Values: Container_name, Dt_entity_container_group, Dt_entity_process_group, Host_tag, K8s_container_name, K8s_deployment_name, K8s_namespace_name, Log_content, Log_source, Loglevel, Process_technology, Winlog_eventid, Winlog_opcode, Winlog_provider, Winlog_task
	// Possible Values: `Container_name`, `Dt_entity_container_group`, `Dt_entity_process_group`, `Host_tag`, `K8s_container_name`, `K8s_deployment_name`, `K8s_namespace_name`, `Log_content`, `Log_source`, `Loglevel`, `Process_technology`, `Winlog_eventid`, `Winlog_opcode`, `Winlog_provider`, `Winlog_task`
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (String) Possible Values: MATCHES
	// Possible Values: `MATCHES`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (Set of String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	// +listType=set
	Values []*string `json:"values" tf:"values,omitempty"`
}

// LogStorageSpec defines the desired state of LogStorage
type LogStorageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogStorageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LogStorageInitParameters `json:"initProvider,omitempty"`
}

// LogStorageStatus defines the observed state of LogStorage.
type LogStorageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogStorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LogStorage is the Schema for the LogStorages API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type LogStorage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sendToStorage) || (has(self.initProvider) && has(self.initProvider.sendToStorage))",message="spec.forProvider.sendToStorage is a required parameter"
	Spec   LogStorageSpec   `json:"spec"`
	Status LogStorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogStorageList contains a list of LogStorages
type LogStorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogStorage `json:"items"`
}

// Repository type metadata.
var (
	LogStorage_Kind             = "LogStorage"
	LogStorage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogStorage_Kind}.String()
	LogStorage_KindAPIVersion   = LogStorage_Kind + "." + CRDGroupVersion.String()
	LogStorage_GroupVersionKind = CRDGroupVersion.WithKind(LogStorage_Kind)
)

func init() {
	SchemeBuilder.Register(&LogStorage{}, &LogStorageList{})
}
