// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EventTemplateInitParameters struct {

	// (Boolean) Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
	// Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
	DavisMerge *bool `json:"davisMerge,omitempty" tf:"davis_merge,omitempty"`

	// (String) The description of the event to trigger.
	// The description of the event to trigger.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Possible Values: AVAILABILITY, CUSTOM_ALERT, CUSTOM_ANNOTATION, CUSTOM_CONFIGURATION, CUSTOM_DEPLOYMENT, ERROR, INFO, MARKED_FOR_TERMINATION, RESOURCE, SLOWDOWN
	// Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
	EventType *string `json:"eventType,omitempty" tf:"event_type,omitempty"`

	// value properties to be attached to the triggered event. (see below for nested schema)
	// Set of additional key-value properties to be attached to the triggered event.
	Metadata []MetadataInitParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The title of the event to trigger.
	// The title of the event to trigger.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type EventTemplateObservation struct {

	// (Boolean) Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
	// Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
	DavisMerge *bool `json:"davisMerge,omitempty" tf:"davis_merge,omitempty"`

	// (String) The description of the event to trigger.
	// The description of the event to trigger.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) Possible Values: AVAILABILITY, CUSTOM_ALERT, CUSTOM_ANNOTATION, CUSTOM_CONFIGURATION, CUSTOM_DEPLOYMENT, ERROR, INFO, MARKED_FOR_TERMINATION, RESOURCE, SLOWDOWN
	// Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
	EventType *string `json:"eventType,omitempty" tf:"event_type,omitempty"`

	// value properties to be attached to the triggered event. (see below for nested schema)
	// Set of additional key-value properties to be attached to the triggered event.
	Metadata []MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The title of the event to trigger.
	// The title of the event to trigger.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type EventTemplateParameters struct {

	// (Boolean) Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
	// Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
	// +kubebuilder:validation:Optional
	DavisMerge *bool `json:"davisMerge,omitempty" tf:"davis_merge,omitempty"`

	// (String) The description of the event to trigger.
	// The description of the event to trigger.
	// +kubebuilder:validation:Optional
	Description *string `json:"description" tf:"description,omitempty"`

	// (String) Possible Values: AVAILABILITY, CUSTOM_ALERT, CUSTOM_ANNOTATION, CUSTOM_CONFIGURATION, CUSTOM_DEPLOYMENT, ERROR, INFO, MARKED_FOR_TERMINATION, RESOURCE, SLOWDOWN
	// Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
	// +kubebuilder:validation:Optional
	EventType *string `json:"eventType" tf:"event_type,omitempty"`

	// value properties to be attached to the triggered event. (see below for nested schema)
	// Set of additional key-value properties to be attached to the triggered event.
	// +kubebuilder:validation:Optional
	Metadata []MetadataParameters `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// (String) The title of the event to trigger.
	// The title of the event to trigger.
	// +kubebuilder:validation:Optional
	Title *string `json:"title" tf:"title,omitempty"`
}

type ItemInitParameters struct {

	// (String) Type 'dt.' for key hints.
	// Type 'dt.' for key hints.
	MetadataKey *string `json:"metadataKey,omitempty" tf:"metadata_key,omitempty"`

	// (String) no documentation available
	// no documentation available
	MetadataValue *string `json:"metadataValue,omitempty" tf:"metadata_value,omitempty"`
}

type ItemObservation struct {

	// (String) Type 'dt.' for key hints.
	// Type 'dt.' for key hints.
	MetadataKey *string `json:"metadataKey,omitempty" tf:"metadata_key,omitempty"`

	// (String) no documentation available
	// no documentation available
	MetadataValue *string `json:"metadataValue,omitempty" tf:"metadata_value,omitempty"`
}

type ItemParameters struct {

	// (String) Type 'dt.' for key hints.
	// Type 'dt.' for key hints.
	// +kubebuilder:validation:Optional
	MetadataKey *string `json:"metadataKey" tf:"metadata_key,omitempty"`

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	MetadataValue *string `json:"metadataValue" tf:"metadata_value,omitempty"`
}

type LogEventsInitParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) Event template (see below for nested schema)
	// Event template
	EventTemplate []EventTemplateInitParameters `json:"eventTemplate,omitempty" tf:"event_template,omitempty"`

	// (String) Log query
	// Log query
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) The textual summary of the log event entry
	// The textual summary of the log event entry
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`
}

type LogEventsObservation struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) Event template (see below for nested schema)
	// Event template
	EventTemplate []EventTemplateObservation `json:"eventTemplate,omitempty" tf:"event_template,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Log query
	// Log query
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) The textual summary of the log event entry
	// The textual summary of the log event entry
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`
}

type LogEventsParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List, Min: 1, Max: 1) Event template (see below for nested schema)
	// Event template
	// +kubebuilder:validation:Optional
	EventTemplate []EventTemplateParameters `json:"eventTemplate,omitempty" tf:"event_template,omitempty"`

	// (String) Log query
	// Log query
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) The textual summary of the log event entry
	// The textual summary of the log event entry
	// +kubebuilder:validation:Optional
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`
}

type MetadataInitParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Item []ItemInitParameters `json:"item,omitempty" tf:"item,omitempty"`
}

type MetadataObservation struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Item []ItemObservation `json:"item,omitempty" tf:"item,omitempty"`
}

type MetadataParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Item []ItemParameters `json:"item" tf:"item,omitempty"`
}

// LogEventsSpec defines the desired state of LogEvents
type LogEventsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogEventsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LogEventsInitParameters `json:"initProvider,omitempty"`
}

// LogEventsStatus defines the observed state of LogEvents.
type LogEventsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogEventsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LogEvents is the Schema for the LogEventss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type LogEvents struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.eventTemplate) || (has(self.initProvider) && has(self.initProvider.eventTemplate))",message="spec.forProvider.eventTemplate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.query) || (has(self.initProvider) && has(self.initProvider.query))",message="spec.forProvider.query is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.summary) || (has(self.initProvider) && has(self.initProvider.summary))",message="spec.forProvider.summary is a required parameter"
	Spec   LogEventsSpec   `json:"spec"`
	Status LogEventsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogEventsList contains a list of LogEventss
type LogEventsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogEvents `json:"items"`
}

// Repository type metadata.
var (
	LogEvents_Kind             = "LogEvents"
	LogEvents_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogEvents_Kind}.String()
	LogEvents_KindAPIVersion   = LogEvents_Kind + "." + CRDGroupVersion.String()
	LogEvents_GroupVersionKind = CRDGroupVersion.WithKind(LogEvents_Kind)
)

func init() {
	SchemeBuilder.Register(&LogEvents{}, &LogEventsList{})
}
