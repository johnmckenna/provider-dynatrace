// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MobileAppEnablementInitParameters struct {

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// (Block List, Min: 1, Max: 1) (Field has overlap with dynatrace_mobile_application) Capture and analyze all user actions within your application. Enable Real User Monitoring (RUM) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience. (see below for nested schema)
	// (Field has overlap with `dynatrace_mobile_application`) Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum []MobileAppEnablementRumInitParameters `json:"rum,omitempty" tf:"rum,omitempty"`

	// like screen recordings that replay user actions immediately preceding a detected crash, while providing best-in-class security and data protection. (see below for nested schema)
	// (Field has overlap with `dynatrace_mobile_application`) [Session Replay on crashes](https://dt-url.net/session-replay) gives you additional context for crash analysis in the form of video-like screen recordings that replay user actions immediately preceding a detected crash, while providing [best-in-class security and data protection](https://dt-url.net/b303zxj).
	SessionReplay []SessionReplayInitParameters `json:"sessionReplay,omitempty" tf:"session_replay,omitempty"`
}

type MobileAppEnablementObservation struct {

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Min: 1, Max: 1) (Field has overlap with dynatrace_mobile_application) Capture and analyze all user actions within your application. Enable Real User Monitoring (RUM) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience. (see below for nested schema)
	// (Field has overlap with `dynatrace_mobile_application`) Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	Rum []MobileAppEnablementRumObservation `json:"rum,omitempty" tf:"rum,omitempty"`

	// like screen recordings that replay user actions immediately preceding a detected crash, while providing best-in-class security and data protection. (see below for nested schema)
	// (Field has overlap with `dynatrace_mobile_application`) [Session Replay on crashes](https://dt-url.net/session-replay) gives you additional context for crash analysis in the form of video-like screen recordings that replay user actions immediately preceding a detected crash, while providing [best-in-class security and data protection](https://dt-url.net/b303zxj).
	SessionReplay []SessionReplayObservation `json:"sessionReplay,omitempty" tf:"session_replay,omitempty"`
}

type MobileAppEnablementParameters struct {

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// (Block List, Min: 1, Max: 1) (Field has overlap with dynatrace_mobile_application) Capture and analyze all user actions within your application. Enable Real User Monitoring (RUM) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience. (see below for nested schema)
	// (Field has overlap with `dynatrace_mobile_application`) Capture and analyze all user actions within your application. Enable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain insight into your user's behavior and experience.
	// +kubebuilder:validation:Optional
	Rum []MobileAppEnablementRumParameters `json:"rum,omitempty" tf:"rum,omitempty"`

	// like screen recordings that replay user actions immediately preceding a detected crash, while providing best-in-class security and data protection. (see below for nested schema)
	// (Field has overlap with `dynatrace_mobile_application`) [Session Replay on crashes](https://dt-url.net/session-replay) gives you additional context for crash analysis in the form of video-like screen recordings that replay user actions immediately preceding a detected crash, while providing [best-in-class security and data protection](https://dt-url.net/b303zxj).
	// +kubebuilder:validation:Optional
	SessionReplay []SessionReplayParameters `json:"sessionReplay,omitempty" tf:"session_replay,omitempty"`
}

type MobileAppEnablementRumInitParameters struct {

	// action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
	// Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
	CostAndTrafficControl *float64 `json:"costAndTrafficControl,omitempty" tf:"cost_and_traffic_control,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MobileAppEnablementRumObservation struct {

	// action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
	// Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
	CostAndTrafficControl *float64 `json:"costAndTrafficControl,omitempty" tf:"cost_and_traffic_control,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MobileAppEnablementRumParameters struct {

	// action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
	// Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
	// +kubebuilder:validation:Optional
	CostAndTrafficControl *float64 `json:"costAndTrafficControl" tf:"cost_and_traffic_control,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`
}

type SessionReplayInitParameters struct {

	// (Boolean) Before enabling, Dynatrace checks your system against the prerequisites for Session Replay.
	// Before enabling, Dynatrace checks your system against the [prerequisites for Session Replay](https://dt-url.net/t23s0ppi).
	OnCrash *bool `json:"onCrash,omitempty" tf:"on_crash,omitempty"`
}

type SessionReplayObservation struct {

	// (Boolean) Before enabling, Dynatrace checks your system against the prerequisites for Session Replay.
	// Before enabling, Dynatrace checks your system against the [prerequisites for Session Replay](https://dt-url.net/t23s0ppi).
	OnCrash *bool `json:"onCrash,omitempty" tf:"on_crash,omitempty"`
}

type SessionReplayParameters struct {

	// (Boolean) Before enabling, Dynatrace checks your system against the prerequisites for Session Replay.
	// Before enabling, Dynatrace checks your system against the [prerequisites for Session Replay](https://dt-url.net/t23s0ppi).
	// +kubebuilder:validation:Optional
	OnCrash *bool `json:"onCrash" tf:"on_crash,omitempty"`
}

// MobileAppEnablementSpec defines the desired state of MobileAppEnablement
type MobileAppEnablementSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MobileAppEnablementParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MobileAppEnablementInitParameters `json:"initProvider,omitempty"`
}

// MobileAppEnablementStatus defines the observed state of MobileAppEnablement.
type MobileAppEnablementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MobileAppEnablementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MobileAppEnablement is the Schema for the MobileAppEnablements API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type MobileAppEnablement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rum) || (has(self.initProvider) && has(self.initProvider.rum))",message="spec.forProvider.rum is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sessionReplay) || (has(self.initProvider) && has(self.initProvider.sessionReplay))",message="spec.forProvider.sessionReplay is a required parameter"
	Spec   MobileAppEnablementSpec   `json:"spec"`
	Status MobileAppEnablementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MobileAppEnablementList contains a list of MobileAppEnablements
type MobileAppEnablementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MobileAppEnablement `json:"items"`
}

// Repository type metadata.
var (
	MobileAppEnablement_Kind             = "MobileAppEnablement"
	MobileAppEnablement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MobileAppEnablement_Kind}.String()
	MobileAppEnablement_KindAPIVersion   = MobileAppEnablement_Kind + "." + CRDGroupVersion.String()
	MobileAppEnablement_GroupVersionKind = CRDGroupVersion.WithKind(MobileAppEnablement_Kind)
)

func init() {
	SchemeBuilder.Register(&MobileAppEnablement{}, &MobileAppEnablementList{})
}
