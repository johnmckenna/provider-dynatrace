// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APIValueInitParameters struct {

	// The aggregation type of the property. It defines how multiple values of the property are aggregated. Possible values are `SUM`, `MIN`, `MAX`, `FIRST` and `LAST`
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The cleanup rule of the property. Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
	CleanupRule *string `json:"cleanupRule,omitempty" tf:"cleanup_rule,omitempty"`

	// The display name of the property
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The unique key of the mobile session or user action property
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The name of the reported value
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If `true`, the property is stored as a session property
	StoreAsSessionProperty *bool `json:"storeAsSessionProperty,omitempty" tf:"store_as_session_property,omitempty"`

	// If `true`, the property is stored as a user action property
	StoreAsUserActionProperty *bool `json:"storeAsUserActionProperty,omitempty" tf:"store_as_user_action_property,omitempty"`

	// The data type of the property. Possible values are `DOUBLE`, `LONG` and `STRING`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type APIValueObservation struct {

	// The aggregation type of the property. It defines how multiple values of the property are aggregated. Possible values are `SUM`, `MIN`, `MAX`, `FIRST` and `LAST`
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The cleanup rule of the property. Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
	CleanupRule *string `json:"cleanupRule,omitempty" tf:"cleanup_rule,omitempty"`

	// The display name of the property
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The unique key of the mobile session or user action property
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The name of the reported value
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If `true`, the property is stored as a session property
	StoreAsSessionProperty *bool `json:"storeAsSessionProperty,omitempty" tf:"store_as_session_property,omitempty"`

	// If `true`, the property is stored as a user action property
	StoreAsUserActionProperty *bool `json:"storeAsUserActionProperty,omitempty" tf:"store_as_user_action_property,omitempty"`

	// The data type of the property. Possible values are `DOUBLE`, `LONG` and `STRING`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type APIValueParameters struct {

	// The aggregation type of the property. It defines how multiple values of the property are aggregated. Possible values are `SUM`, `MIN`, `MAX`, `FIRST` and `LAST`
	// +kubebuilder:validation:Optional
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The cleanup rule of the property. Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
	// +kubebuilder:validation:Optional
	CleanupRule *string `json:"cleanupRule,omitempty" tf:"cleanup_rule,omitempty"`

	// The display name of the property
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The unique key of the mobile session or user action property
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// The name of the reported value
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If `true`, the property is stored as a session property
	// +kubebuilder:validation:Optional
	StoreAsSessionProperty *bool `json:"storeAsSessionProperty,omitempty" tf:"store_as_session_property,omitempty"`

	// If `true`, the property is stored as a user action property
	// +kubebuilder:validation:Optional
	StoreAsUserActionProperty *bool `json:"storeAsUserActionProperty,omitempty" tf:"store_as_user_action_property,omitempty"`

	// The data type of the property. Possible values are `DOUBLE`, `LONG` and `STRING`
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ApdexInitParameters struct {

	// Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated
	Frustrated *float64 `json:"frustrated,omitempty" tf:"frustrated,omitempty"`

	// Apdex error condition: if `true` the user session is considered frustrated when an error is reported
	FrustratedOnError *bool `json:"frustratedOnError,omitempty" tf:"frustrated_on_error,omitempty"`

	// Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable
	Tolerable *float64 `json:"tolerable,omitempty" tf:"tolerable,omitempty"`
}

type ApdexObservation struct {

	// Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated
	Frustrated *float64 `json:"frustrated,omitempty" tf:"frustrated,omitempty"`

	// Apdex error condition: if `true` the user session is considered frustrated when an error is reported
	FrustratedOnError *bool `json:"frustratedOnError,omitempty" tf:"frustrated_on_error,omitempty"`

	// Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable
	Tolerable *float64 `json:"tolerable,omitempty" tf:"tolerable,omitempty"`
}

type ApdexParameters struct {

	// Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated
	// +kubebuilder:validation:Optional
	Frustrated *float64 `json:"frustrated" tf:"frustrated,omitempty"`

	// Apdex error condition: if `true` the user session is considered frustrated when an error is reported
	// +kubebuilder:validation:Optional
	FrustratedOnError *bool `json:"frustratedOnError,omitempty" tf:"frustrated_on_error,omitempty"`

	// Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable
	// +kubebuilder:validation:Optional
	Tolerable *float64 `json:"tolerable" tf:"tolerable,omitempty"`
}

type MobileApplicationInitParameters struct {

	// Apdex configuration of a mobile application. A duration less than the **tolerable** threshold is considered satisfied
	Apdex []ApdexInitParameters `json:"apdex,omitempty" tf:"apdex,omitempty"`

	// The UUID of the application.
	//
	// It is used only by OneAgent to send data to Dynatrace. If not specified it will get generated.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// The type of the application. Either `CUSTOM_APPLICATION` or `MOBILE_APPLICATION`.
	ApplicationType *string `json:"applicationType,omitempty" tf:"application_type,omitempty"`

	// The type of the beacon endpoint. Possible values are `CLUSTER_ACTIVE_GATE`, `ENVIRONMENT_ACTIVE_GATE` and `INSTRUMENTED_WEB_SERVER`.
	BeaconEndpointType *string `json:"beaconEndpointType,omitempty" tf:"beacon_endpoint_type,omitempty"`

	// The URL of the beacon endpoint.
	//
	// Only applicable when the **beacon_endpoint_type** is set to `ENVIRONMENT_ACTIVE_GATE` or `INSTRUMENTED_WEB_SERVER`
	BeaconEndpointURL *string `json:"beaconEndpointUrl,omitempty" tf:"beacon_endpoint_url,omitempty"`

	// Custom application icon. Mobile apps always use the mobile device icon, so this icon can only be set for custom apps.
	IconType *string `json:"iconType,omitempty" tf:"icon_type,omitempty"`

	// User Action names to be flagged as Key User Actions
	// +listType=set
	KeyUserActions []*string `json:"keyUserActions,omitempty" tf:"key_user_actions,omitempty"`

	// The name of the application
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The opt-in mode is enabled (`true`) or disabled (`false`)
	OptInMode *bool `json:"optInMode,omitempty" tf:"opt_in_mode,omitempty"`

	// User Action and Session Properties
	Properties []PropertiesInitParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// (Field has overlap with `dynatrace_mobile_app_enablement`) The session replay is enabled (`true`) or disabled (`false`).
	SessionReplay *bool `json:"sessionReplay,omitempty" tf:"session_replay,omitempty"`

	// The session replay on crash is enabled (`true`) or disabled (`false`).
	//
	// Enabling requires both **sessionReplayEnabled** and **optInModeEnabled** values set to `true`.
	SessionReplayOnCrash *bool `json:"sessionReplayOnCrash,omitempty" tf:"session_replay_on_crash,omitempty"`

	// (Field has overlap with `dynatrace_mobile_app_enablement` for mobile and `dynatrace_custom_app_enablement` for custom apps) The percentage of user sessions to be analyzed
	UserSessionPercentage *float64 `json:"userSessionPercentage,omitempty" tf:"user_session_percentage,omitempty"`
}

type MobileApplicationObservation struct {

	// Apdex configuration of a mobile application. A duration less than the **tolerable** threshold is considered satisfied
	Apdex []ApdexObservation `json:"apdex,omitempty" tf:"apdex,omitempty"`

	// The UUID of the application.
	//
	// It is used only by OneAgent to send data to Dynatrace. If not specified it will get generated.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// The type of the application. Either `CUSTOM_APPLICATION` or `MOBILE_APPLICATION`.
	ApplicationType *string `json:"applicationType,omitempty" tf:"application_type,omitempty"`

	// The type of the beacon endpoint. Possible values are `CLUSTER_ACTIVE_GATE`, `ENVIRONMENT_ACTIVE_GATE` and `INSTRUMENTED_WEB_SERVER`.
	BeaconEndpointType *string `json:"beaconEndpointType,omitempty" tf:"beacon_endpoint_type,omitempty"`

	// The URL of the beacon endpoint.
	//
	// Only applicable when the **beacon_endpoint_type** is set to `ENVIRONMENT_ACTIVE_GATE` or `INSTRUMENTED_WEB_SERVER`
	BeaconEndpointURL *string `json:"beaconEndpointUrl,omitempty" tf:"beacon_endpoint_url,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Custom application icon. Mobile apps always use the mobile device icon, so this icon can only be set for custom apps.
	IconType *string `json:"iconType,omitempty" tf:"icon_type,omitempty"`

	// User Action names to be flagged as Key User Actions
	// +listType=set
	KeyUserActions []*string `json:"keyUserActions,omitempty" tf:"key_user_actions,omitempty"`

	// The name of the application
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The opt-in mode is enabled (`true`) or disabled (`false`)
	OptInMode *bool `json:"optInMode,omitempty" tf:"opt_in_mode,omitempty"`

	// User Action and Session Properties
	Properties []PropertiesObservation `json:"properties,omitempty" tf:"properties,omitempty"`

	// (Field has overlap with `dynatrace_mobile_app_enablement`) The session replay is enabled (`true`) or disabled (`false`).
	SessionReplay *bool `json:"sessionReplay,omitempty" tf:"session_replay,omitempty"`

	// The session replay on crash is enabled (`true`) or disabled (`false`).
	//
	// Enabling requires both **sessionReplayEnabled** and **optInModeEnabled** values set to `true`.
	SessionReplayOnCrash *bool `json:"sessionReplayOnCrash,omitempty" tf:"session_replay_on_crash,omitempty"`

	// (Field has overlap with `dynatrace_mobile_app_enablement` for mobile and `dynatrace_custom_app_enablement` for custom apps) The percentage of user sessions to be analyzed
	UserSessionPercentage *float64 `json:"userSessionPercentage,omitempty" tf:"user_session_percentage,omitempty"`
}

type MobileApplicationParameters struct {

	// Apdex configuration of a mobile application. A duration less than the **tolerable** threshold is considered satisfied
	// +kubebuilder:validation:Optional
	Apdex []ApdexParameters `json:"apdex,omitempty" tf:"apdex,omitempty"`

	// The UUID of the application.
	//
	// It is used only by OneAgent to send data to Dynatrace. If not specified it will get generated.
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// The type of the application. Either `CUSTOM_APPLICATION` or `MOBILE_APPLICATION`.
	// +kubebuilder:validation:Optional
	ApplicationType *string `json:"applicationType,omitempty" tf:"application_type,omitempty"`

	// The type of the beacon endpoint. Possible values are `CLUSTER_ACTIVE_GATE`, `ENVIRONMENT_ACTIVE_GATE` and `INSTRUMENTED_WEB_SERVER`.
	// +kubebuilder:validation:Optional
	BeaconEndpointType *string `json:"beaconEndpointType,omitempty" tf:"beacon_endpoint_type,omitempty"`

	// The URL of the beacon endpoint.
	//
	// Only applicable when the **beacon_endpoint_type** is set to `ENVIRONMENT_ACTIVE_GATE` or `INSTRUMENTED_WEB_SERVER`
	// +kubebuilder:validation:Optional
	BeaconEndpointURL *string `json:"beaconEndpointUrl,omitempty" tf:"beacon_endpoint_url,omitempty"`

	// Custom application icon. Mobile apps always use the mobile device icon, so this icon can only be set for custom apps.
	// +kubebuilder:validation:Optional
	IconType *string `json:"iconType,omitempty" tf:"icon_type,omitempty"`

	// User Action names to be flagged as Key User Actions
	// +kubebuilder:validation:Optional
	// +listType=set
	KeyUserActions []*string `json:"keyUserActions,omitempty" tf:"key_user_actions,omitempty"`

	// The name of the application
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The opt-in mode is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	OptInMode *bool `json:"optInMode,omitempty" tf:"opt_in_mode,omitempty"`

	// User Action and Session Properties
	// +kubebuilder:validation:Optional
	Properties []PropertiesParameters `json:"properties,omitempty" tf:"properties,omitempty"`

	// (Field has overlap with `dynatrace_mobile_app_enablement`) The session replay is enabled (`true`) or disabled (`false`).
	// +kubebuilder:validation:Optional
	SessionReplay *bool `json:"sessionReplay,omitempty" tf:"session_replay,omitempty"`

	// The session replay on crash is enabled (`true`) or disabled (`false`).
	//
	// Enabling requires both **sessionReplayEnabled** and **optInModeEnabled** values set to `true`.
	// +kubebuilder:validation:Optional
	SessionReplayOnCrash *bool `json:"sessionReplayOnCrash,omitempty" tf:"session_replay_on_crash,omitempty"`

	// (Field has overlap with `dynatrace_mobile_app_enablement` for mobile and `dynatrace_custom_app_enablement` for custom apps) The percentage of user sessions to be analyzed
	// +kubebuilder:validation:Optional
	UserSessionPercentage *float64 `json:"userSessionPercentage,omitempty" tf:"user_session_percentage,omitempty"`
}

type PropertiesInitParameters struct {

	// A User Action / Session Property based on a value reported by the API
	APIValue []APIValueInitParameters `json:"apiValue,omitempty" tf:"api_value,omitempty"`

	// A User Action / Session Property based on a Server Side Request Attribute
	RequestAttribute []RequestAttributeInitParameters `json:"requestAttribute,omitempty" tf:"request_attribute,omitempty"`
}

type PropertiesObservation struct {

	// A User Action / Session Property based on a value reported by the API
	APIValue []APIValueObservation `json:"apiValue,omitempty" tf:"api_value,omitempty"`

	// A User Action / Session Property based on a Server Side Request Attribute
	RequestAttribute []RequestAttributeObservation `json:"requestAttribute,omitempty" tf:"request_attribute,omitempty"`
}

type PropertiesParameters struct {

	// A User Action / Session Property based on a value reported by the API
	// +kubebuilder:validation:Optional
	APIValue []APIValueParameters `json:"apiValue,omitempty" tf:"api_value,omitempty"`

	// A User Action / Session Property based on a Server Side Request Attribute
	// +kubebuilder:validation:Optional
	RequestAttribute []RequestAttributeParameters `json:"requestAttribute,omitempty" tf:"request_attribute,omitempty"`
}

type RequestAttributeInitParameters struct {

	// The aggregation type of the property. It defines how multiple values of the property are aggregated. Possible values are `SUM`, `MIN`, `MAX`, `FIRST` and `LAST`
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The cleanup rule of the property. Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
	CleanupRule *string `json:"cleanupRule,omitempty" tf:"cleanup_rule,omitempty"`

	// The display name of the property
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The ID of the request attribute
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique key of the mobile session or user action property
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// If `true`, the property is stored as a session property
	StoreAsSessionProperty *bool `json:"storeAsSessionProperty,omitempty" tf:"store_as_session_property,omitempty"`

	// If `true`, the property is stored as a user action property
	StoreAsUserActionProperty *bool `json:"storeAsUserActionProperty,omitempty" tf:"store_as_user_action_property,omitempty"`

	// The data type of the property. Possible values are `DOUBLE`, `LONG` and `STRING`. The value MUST match the data type of the Request Attribute.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RequestAttributeObservation struct {

	// The aggregation type of the property. It defines how multiple values of the property are aggregated. Possible values are `SUM`, `MIN`, `MAX`, `FIRST` and `LAST`
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The cleanup rule of the property. Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
	CleanupRule *string `json:"cleanupRule,omitempty" tf:"cleanup_rule,omitempty"`

	// The display name of the property
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The ID of the request attribute
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique key of the mobile session or user action property
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// If `true`, the property is stored as a session property
	StoreAsSessionProperty *bool `json:"storeAsSessionProperty,omitempty" tf:"store_as_session_property,omitempty"`

	// If `true`, the property is stored as a user action property
	StoreAsUserActionProperty *bool `json:"storeAsUserActionProperty,omitempty" tf:"store_as_user_action_property,omitempty"`

	// The data type of the property. Possible values are `DOUBLE`, `LONG` and `STRING`. The value MUST match the data type of the Request Attribute.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RequestAttributeParameters struct {

	// The aggregation type of the property. It defines how multiple values of the property are aggregated. Possible values are `SUM`, `MIN`, `MAX`, `FIRST` and `LAST`
	// +kubebuilder:validation:Optional
	Aggregation *string `json:"aggregation,omitempty" tf:"aggregation,omitempty"`

	// The cleanup rule of the property. Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
	// +kubebuilder:validation:Optional
	CleanupRule *string `json:"cleanupRule,omitempty" tf:"cleanup_rule,omitempty"`

	// The display name of the property
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The ID of the request attribute
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// The unique key of the mobile session or user action property
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// If `true`, the property is stored as a session property
	// +kubebuilder:validation:Optional
	StoreAsSessionProperty *bool `json:"storeAsSessionProperty,omitempty" tf:"store_as_session_property,omitempty"`

	// If `true`, the property is stored as a user action property
	// +kubebuilder:validation:Optional
	StoreAsUserActionProperty *bool `json:"storeAsUserActionProperty,omitempty" tf:"store_as_user_action_property,omitempty"`

	// The data type of the property. Possible values are `DOUBLE`, `LONG` and `STRING`. The value MUST match the data type of the Request Attribute.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// MobileApplicationSpec defines the desired state of MobileApplication
type MobileApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MobileApplicationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MobileApplicationInitParameters `json:"initProvider,omitempty"`
}

// MobileApplicationStatus defines the observed state of MobileApplication.
type MobileApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MobileApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// MobileApplication is the Schema for the MobileApplications API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type MobileApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apdex) || (has(self.initProvider) && has(self.initProvider.apdex))",message="spec.forProvider.apdex is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.beaconEndpointType) || (has(self.initProvider) && has(self.initProvider.beaconEndpointType))",message="spec.forProvider.beaconEndpointType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   MobileApplicationSpec   `json:"spec"`
	Status MobileApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MobileApplicationList contains a list of MobileApplications
type MobileApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MobileApplication `json:"items"`
}

// Repository type metadata.
var (
	MobileApplication_Kind             = "MobileApplication"
	MobileApplication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MobileApplication_Kind}.String()
	MobileApplication_KindAPIVersion   = MobileApplication_Kind + "." + CRDGroupVersion.String()
	MobileApplication_GroupVersionKind = CRDGroupVersion.WithKind(MobileApplication_Kind)
)

func init() {
	SchemeBuilder.Register(&MobileApplication{}, &MobileApplicationList{})
}
