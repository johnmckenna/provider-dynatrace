// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CalculatedMobileMetricInitParameters struct {

	// The Dynatrace entity ID of the application to which the metric belongs.
	AppIdentifier *string `json:"appIdentifier,omitempty" tf:"app_identifier,omitempty"`

	// Descriptor of a calculated mobile/custom app metric.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Parameters of a definition of a calculated mobile/custom app metric.
	Dimensions []DimensionsInitParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// The metric is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The unique key of the calculated mobile/custom app metric.
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// The type of the metric. Possible values: [ REPORTED_ERROR_COUNT, USER_ACTION_DURATION, WEB_REQUEST_COUNT, WEB_REQUEST_ERROR_COUNT ]
	MetricType *string `json:"metricType,omitempty" tf:"metric_type,omitempty"`

	// The displayed name of the metric.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Parameters of a definition of a calculated mobile/custom app metric.
	UserActionFilter []UserActionFilterInitParameters `json:"userActionFilter,omitempty" tf:"user_action_filter,omitempty"`
}

type CalculatedMobileMetricObservation struct {

	// The Dynatrace entity ID of the application to which the metric belongs.
	AppIdentifier *string `json:"appIdentifier,omitempty" tf:"app_identifier,omitempty"`

	// Descriptor of a calculated mobile/custom app metric.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Parameters of a definition of a calculated mobile/custom app metric.
	Dimensions []DimensionsObservation `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// The metric is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique key of the calculated mobile/custom app metric.
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// The type of the metric. Possible values: [ REPORTED_ERROR_COUNT, USER_ACTION_DURATION, WEB_REQUEST_COUNT, WEB_REQUEST_ERROR_COUNT ]
	MetricType *string `json:"metricType,omitempty" tf:"metric_type,omitempty"`

	// The displayed name of the metric.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Parameters of a definition of a calculated mobile/custom app metric.
	UserActionFilter []UserActionFilterObservation `json:"userActionFilter,omitempty" tf:"user_action_filter,omitempty"`
}

type CalculatedMobileMetricParameters struct {

	// The Dynatrace entity ID of the application to which the metric belongs.
	// +kubebuilder:validation:Optional
	AppIdentifier *string `json:"appIdentifier,omitempty" tf:"app_identifier,omitempty"`

	// Descriptor of a calculated mobile/custom app metric.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Parameters of a definition of a calculated mobile/custom app metric.
	// +kubebuilder:validation:Optional
	Dimensions []DimensionsParameters `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// The metric is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The unique key of the calculated mobile/custom app metric.
	// +kubebuilder:validation:Optional
	MetricKey *string `json:"metricKey,omitempty" tf:"metric_key,omitempty"`

	// The type of the metric. Possible values: [ REPORTED_ERROR_COUNT, USER_ACTION_DURATION, WEB_REQUEST_COUNT, WEB_REQUEST_ERROR_COUNT ]
	// +kubebuilder:validation:Optional
	MetricType *string `json:"metricType,omitempty" tf:"metric_type,omitempty"`

	// The displayed name of the metric.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Parameters of a definition of a calculated mobile/custom app metric.
	// +kubebuilder:validation:Optional
	UserActionFilter []UserActionFilterParameters `json:"userActionFilter,omitempty" tf:"user_action_filter,omitempty"`
}

type DimensionInitParameters struct {

	// The dimension of the metric. Possible values are `ApdexType`, `Browser`, `ErrorContext`, `ErrorOrigin`, `ErrorType`, `GeoLocation`, `StringProperty`, `UserActionType`
	Dimension *string `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// The number of top values to be calculated
	TopX *float64 `json:"topX,omitempty" tf:"top_x,omitempty"`
}

type DimensionObservation struct {

	// The dimension of the metric. Possible values are `ApdexType`, `Browser`, `ErrorContext`, `ErrorOrigin`, `ErrorType`, `GeoLocation`, `StringProperty`, `UserActionType`
	Dimension *string `json:"dimension,omitempty" tf:"dimension,omitempty"`

	// The number of top values to be calculated
	TopX *float64 `json:"topX,omitempty" tf:"top_x,omitempty"`
}

type DimensionParameters struct {

	// The dimension of the metric. Possible values are `ApdexType`, `Browser`, `ErrorContext`, `ErrorOrigin`, `ErrorType`, `GeoLocation`, `StringProperty`, `UserActionType`
	// +kubebuilder:validation:Optional
	Dimension *string `json:"dimension" tf:"dimension,omitempty"`

	// The number of top values to be calculated
	// +kubebuilder:validation:Optional
	TopX *float64 `json:"topX" tf:"top_x,omitempty"`
}

type DimensionsInitParameters struct {

	// A dimensions for the metric usage
	Dimension []DimensionInitParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`
}

type DimensionsObservation struct {

	// A dimensions for the metric usage
	Dimension []DimensionObservation `json:"dimension,omitempty" tf:"dimension,omitempty"`
}

type DimensionsParameters struct {

	// A dimensions for the metric usage
	// +kubebuilder:validation:Optional
	Dimension []DimensionParameters `json:"dimension,omitempty" tf:"dimension,omitempty"`
}

type UserActionFilterInitParameters struct {

	// Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationFromMilliseconds *float64 `json:"actionDurationFromMilliseconds,omitempty" tf:"action_duration_from_milliseconds,omitempty"`

	// Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationToMilliseconds *float64 `json:"actionDurationToMilliseconds,omitempty" tf:"action_duration_to_milliseconds,omitempty"`

	// Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
	Apdex *string `json:"apdex,omitempty" tf:"apdex,omitempty"`

	// Only actions coming from this app version are included in the metric calculation.
	AppVersion *string `json:"appVersion,omitempty" tf:"app_version,omitempty"`

	// Only actions coming from this carrier type are included in the metric calculation.
	Carrier *string `json:"carrier,omitempty" tf:"carrier,omitempty"`

	// Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Only actions coming from this connection type are included in the metric calculation. Possible values: [ LAN, MOBILE, OFFLINE, UNKNOWN, WIFI ]
	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type,omitempty"`

	// Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
	Continent *string `json:"continent,omitempty" tf:"continent,omitempty"`

	// Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// Only actions coming from this app version are included in the metric calculation.
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The request error status of the actions to be included in the metric calculation: `true` or `false`
	HasHTTPError *bool `json:"hasHttpError,omitempty" tf:"has_http_error,omitempty"`

	// The error status of the actions to be included in the metric calculation: `true` or `false`
	HasReportedError *bool `json:"hasReportedError,omitempty" tf:"has_reported_error,omitempty"`

	// Only actions coming from this internet service provider are included in the metric calculation.
	Isp *string `json:"isp,omitempty" tf:"isp,omitempty"`

	// Only actions coming from devices of this manufacturer are included in the metric calculation.
	Manufacturer *string `json:"manufacturer,omitempty" tf:"manufacturer,omitempty"`

	// Filter by network technology
	NetworkTechnology *string `json:"networkTechnology,omitempty" tf:"network_technology,omitempty"`

	// Only actions coming from devices with this display orientation are included in the metric calculation. Possible values: [ LANDSCAPE, PORTRAIT, UNKNOWN ]
	Orientation *string `json:"orientation,omitempty" tf:"orientation,omitempty"`

	// Only actions coming from this OS family are included in the metric calculation.
	OsFamily *string `json:"osFamily,omitempty" tf:"os_family,omitempty"`

	// Only actions coming from this OS version are included in the metric calculation.
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`

	// Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Only actions coming from devices with this display resolution are included in the metric calculation. Possible values: [ CGA, DCI2K, DCI4K, DVGA, FHD, FWVGA, FWXGA, GHDPlus, HD, HQVGA, HQVGA2, HSXGA, HUXGA, HVGA, HXGA, NTSC, PAL, QHD, QQVGA, QSXGA, QUXGA, QVGA, QWXGA, QXGA, SVGA, SXGA, SXGAMinus, SXGAPlus, UGA, UHD16K, UHD4K, UHD8K, UHDPlus, UNKNOWN, UWQHD, UXGA, VGA, WHSXGA, WHUXGA, WHXGA, WQSXGA, WQUXGA, WQVGA, WQVGA2, WQVGA3, WQXGA, WQXGA2, WSVGA, WSVGA2, WSXGA, WSXGAPlus, WUXGA, WVGA, WVGA2, WXGA, WXGA2, WXGA3, WXGAPlus, XGA, XGAPLUS, _1280x854, nHD, qHD ]
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// Only actions with this name are included in the metric calculation.
	UserActionName *string `json:"userActionName,omitempty" tf:"user_action_name,omitempty"`
}

type UserActionFilterObservation struct {

	// Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationFromMilliseconds *float64 `json:"actionDurationFromMilliseconds,omitempty" tf:"action_duration_from_milliseconds,omitempty"`

	// Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	ActionDurationToMilliseconds *float64 `json:"actionDurationToMilliseconds,omitempty" tf:"action_duration_to_milliseconds,omitempty"`

	// Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
	Apdex *string `json:"apdex,omitempty" tf:"apdex,omitempty"`

	// Only actions coming from this app version are included in the metric calculation.
	AppVersion *string `json:"appVersion,omitempty" tf:"app_version,omitempty"`

	// Only actions coming from this carrier type are included in the metric calculation.
	Carrier *string `json:"carrier,omitempty" tf:"carrier,omitempty"`

	// Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Only actions coming from this connection type are included in the metric calculation. Possible values: [ LAN, MOBILE, OFFLINE, UNKNOWN, WIFI ]
	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type,omitempty"`

	// Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
	Continent *string `json:"continent,omitempty" tf:"continent,omitempty"`

	// Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// Only actions coming from this app version are included in the metric calculation.
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The request error status of the actions to be included in the metric calculation: `true` or `false`
	HasHTTPError *bool `json:"hasHttpError,omitempty" tf:"has_http_error,omitempty"`

	// The error status of the actions to be included in the metric calculation: `true` or `false`
	HasReportedError *bool `json:"hasReportedError,omitempty" tf:"has_reported_error,omitempty"`

	// Only actions coming from this internet service provider are included in the metric calculation.
	Isp *string `json:"isp,omitempty" tf:"isp,omitempty"`

	// Only actions coming from devices of this manufacturer are included in the metric calculation.
	Manufacturer *string `json:"manufacturer,omitempty" tf:"manufacturer,omitempty"`

	// Filter by network technology
	NetworkTechnology *string `json:"networkTechnology,omitempty" tf:"network_technology,omitempty"`

	// Only actions coming from devices with this display orientation are included in the metric calculation. Possible values: [ LANDSCAPE, PORTRAIT, UNKNOWN ]
	Orientation *string `json:"orientation,omitempty" tf:"orientation,omitempty"`

	// Only actions coming from this OS family are included in the metric calculation.
	OsFamily *string `json:"osFamily,omitempty" tf:"os_family,omitempty"`

	// Only actions coming from this OS version are included in the metric calculation.
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`

	// Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Only actions coming from devices with this display resolution are included in the metric calculation. Possible values: [ CGA, DCI2K, DCI4K, DVGA, FHD, FWVGA, FWXGA, GHDPlus, HD, HQVGA, HQVGA2, HSXGA, HUXGA, HVGA, HXGA, NTSC, PAL, QHD, QQVGA, QSXGA, QUXGA, QVGA, QWXGA, QXGA, SVGA, SXGA, SXGAMinus, SXGAPlus, UGA, UHD16K, UHD4K, UHD8K, UHDPlus, UNKNOWN, UWQHD, UXGA, VGA, WHSXGA, WHUXGA, WHXGA, WQSXGA, WQUXGA, WQVGA, WQVGA2, WQVGA3, WQXGA, WQXGA2, WSVGA, WSVGA2, WSXGA, WSXGAPlus, WUXGA, WVGA, WVGA2, WXGA, WXGA2, WXGA3, WXGAPlus, XGA, XGAPLUS, _1280x854, nHD, qHD ]
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// Only actions with this name are included in the metric calculation.
	UserActionName *string `json:"userActionName,omitempty" tf:"user_action_name,omitempty"`
}

type UserActionFilterParameters struct {

	// Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
	// +kubebuilder:validation:Optional
	ActionDurationFromMilliseconds *float64 `json:"actionDurationFromMilliseconds,omitempty" tf:"action_duration_from_milliseconds,omitempty"`

	// Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
	// +kubebuilder:validation:Optional
	ActionDurationToMilliseconds *float64 `json:"actionDurationToMilliseconds,omitempty" tf:"action_duration_to_milliseconds,omitempty"`

	// Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
	// +kubebuilder:validation:Optional
	Apdex *string `json:"apdex,omitempty" tf:"apdex,omitempty"`

	// Only actions coming from this app version are included in the metric calculation.
	// +kubebuilder:validation:Optional
	AppVersion *string `json:"appVersion,omitempty" tf:"app_version,omitempty"`

	// Only actions coming from this carrier type are included in the metric calculation.
	// +kubebuilder:validation:Optional
	Carrier *string `json:"carrier,omitempty" tf:"carrier,omitempty"`

	// Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
	// +kubebuilder:validation:Optional
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Only actions coming from this connection type are included in the metric calculation. Possible values: [ LAN, MOBILE, OFFLINE, UNKNOWN, WIFI ]
	// +kubebuilder:validation:Optional
	ConnectionType *string `json:"connectionType,omitempty" tf:"connection_type,omitempty"`

	// Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
	// +kubebuilder:validation:Optional
	Continent *string `json:"continent,omitempty" tf:"continent,omitempty"`

	// Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// Only actions coming from this app version are included in the metric calculation.
	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The request error status of the actions to be included in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	HasHTTPError *bool `json:"hasHttpError,omitempty" tf:"has_http_error,omitempty"`

	// The error status of the actions to be included in the metric calculation: `true` or `false`
	// +kubebuilder:validation:Optional
	HasReportedError *bool `json:"hasReportedError,omitempty" tf:"has_reported_error,omitempty"`

	// Only actions coming from this internet service provider are included in the metric calculation.
	// +kubebuilder:validation:Optional
	Isp *string `json:"isp,omitempty" tf:"isp,omitempty"`

	// Only actions coming from devices of this manufacturer are included in the metric calculation.
	// +kubebuilder:validation:Optional
	Manufacturer *string `json:"manufacturer,omitempty" tf:"manufacturer,omitempty"`

	// Filter by network technology
	// +kubebuilder:validation:Optional
	NetworkTechnology *string `json:"networkTechnology,omitempty" tf:"network_technology,omitempty"`

	// Only actions coming from devices with this display orientation are included in the metric calculation. Possible values: [ LANDSCAPE, PORTRAIT, UNKNOWN ]
	// +kubebuilder:validation:Optional
	Orientation *string `json:"orientation,omitempty" tf:"orientation,omitempty"`

	// Only actions coming from this OS family are included in the metric calculation.
	// +kubebuilder:validation:Optional
	OsFamily *string `json:"osFamily,omitempty" tf:"os_family,omitempty"`

	// Only actions coming from this OS version are included in the metric calculation.
	// +kubebuilder:validation:Optional
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`

	// Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Only actions coming from devices with this display resolution are included in the metric calculation. Possible values: [ CGA, DCI2K, DCI4K, DVGA, FHD, FWVGA, FWXGA, GHDPlus, HD, HQVGA, HQVGA2, HSXGA, HUXGA, HVGA, HXGA, NTSC, PAL, QHD, QQVGA, QSXGA, QUXGA, QVGA, QWXGA, QXGA, SVGA, SXGA, SXGAMinus, SXGAPlus, UGA, UHD16K, UHD4K, UHD8K, UHDPlus, UNKNOWN, UWQHD, UXGA, VGA, WHSXGA, WHUXGA, WHXGA, WQSXGA, WQUXGA, WQVGA, WQVGA2, WQVGA3, WQXGA, WQXGA2, WSVGA, WSVGA2, WSXGA, WSXGAPlus, WUXGA, WVGA, WVGA2, WXGA, WXGA2, WXGA3, WXGAPlus, XGA, XGAPLUS, _1280x854, nHD, qHD ]
	// +kubebuilder:validation:Optional
	Resolution *string `json:"resolution,omitempty" tf:"resolution,omitempty"`

	// Only actions with this name are included in the metric calculation.
	// +kubebuilder:validation:Optional
	UserActionName *string `json:"userActionName,omitempty" tf:"user_action_name,omitempty"`
}

// CalculatedMobileMetricSpec defines the desired state of CalculatedMobileMetric
type CalculatedMobileMetricSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CalculatedMobileMetricParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CalculatedMobileMetricInitParameters `json:"initProvider,omitempty"`
}

// CalculatedMobileMetricStatus defines the observed state of CalculatedMobileMetric.
type CalculatedMobileMetricStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CalculatedMobileMetricObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CalculatedMobileMetric is the Schema for the CalculatedMobileMetrics API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type CalculatedMobileMetric struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.appIdentifier) || (has(self.initProvider) && has(self.initProvider.appIdentifier))",message="spec.forProvider.appIdentifier is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricKey) || (has(self.initProvider) && has(self.initProvider.metricKey))",message="spec.forProvider.metricKey is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.metricType) || (has(self.initProvider) && has(self.initProvider.metricType))",message="spec.forProvider.metricType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CalculatedMobileMetricSpec   `json:"spec"`
	Status CalculatedMobileMetricStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CalculatedMobileMetricList contains a list of CalculatedMobileMetrics
type CalculatedMobileMetricList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CalculatedMobileMetric `json:"items"`
}

// Repository type metadata.
var (
	CalculatedMobileMetric_Kind             = "CalculatedMobileMetric"
	CalculatedMobileMetric_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CalculatedMobileMetric_Kind}.String()
	CalculatedMobileMetric_KindAPIVersion   = CalculatedMobileMetric_Kind + "." + CRDGroupVersion.String()
	CalculatedMobileMetric_GroupVersionKind = CRDGroupVersion.WithKind(CalculatedMobileMetric_Kind)
)

func init() {
	SchemeBuilder.Register(&CalculatedMobileMetric{}, &CalculatedMobileMetricList{})
}
