// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdditionalAttributeInitParameters struct {

	// (String) Attribute key
	// Attribute key
	AttributeKey *string `json:"attributeKey,omitempty" tf:"attribute_key,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type AdditionalAttributeObservation struct {

	// (String) Attribute key
	// Attribute key
	AttributeKey *string `json:"attributeKey,omitempty" tf:"attribute_key,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type AdditionalAttributeParameters struct {

	// (String) Attribute key
	// Attribute key
	// +kubebuilder:validation:Optional
	AttributeKey *string `json:"attributeKey" tf:"attribute_key,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`
}

type AdditionalAttributesInitParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	AdditionalAttribute []AdditionalAttributeInitParameters `json:"additionalAttribute,omitempty" tf:"additional_attribute,omitempty"`
}

type AdditionalAttributesObservation struct {

	// (Block Set, Min: 1) (see below for nested schema)
	AdditionalAttribute []AdditionalAttributeObservation `json:"additionalAttribute,omitempty" tf:"additional_attribute,omitempty"`
}

type AdditionalAttributesParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	AdditionalAttribute []AdditionalAttributeParameters `json:"additionalAttribute" tf:"additional_attribute,omitempty"`
}

type OpentelemetryMetricsInitParameters struct {

	// (Block List, Max: 1) When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
	// When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
	//
	// **Notes:**
	//
	// * Modifying this setting (renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated manually.
	//
	// * Dynatrace does not recommend changing/removing the attributes starting with "dt.". Dynatrace leverages these attributes to [Enrich metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
	AdditionalAttributes []AdditionalAttributesInitParameters `json:"additionalAttributes,omitempty" tf:"additional_attributes,omitempty"`

	// (Boolean) Add the resource and scope attributes configured below as dimensions
	// Add the resource and scope attributes configured below as dimensions
	AdditionalAttributesToDimensionEnabled *bool `json:"additionalAttributesToDimensionEnabled,omitempty" tf:"additional_attributes_to_dimension_enabled,omitempty"`

	// (Boolean) When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs) and version will be added as dimensions (otel.scope.name and otel.scope.version) to ingested OTLP metrics.
	// When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs) and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics.
	//
	// **Note:** Modifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated manually
	MeterNameToDimensionEnabled *bool `json:"meterNameToDimensionEnabled,omitempty" tf:"meter_name_to_dimension_enabled,omitempty"`

	// (String) Specifies whether the given attributes to enable (additional_attributes) and the attributes to drop (to_drop_attributes) will get applied explicitly (EXPLICIT) or additive (ADDITIVE).
	// Specifies whether the given attributes to enable (`additional_attributes`) and the attributes to drop (`to_drop_attributes`) will get applied explicitly (`EXPLICIT`) or additive (`ADDITIVE`).
	//
	// **Note:** Using `ADDITIVE` and `EXPLICIT` at the same time within differnt resource instances will lead to unexpected results.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// default). Omit this property if you want to cover the whole environment.
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Block List, Max: 1) The attributes defined in the list below will be dropped from all ingested OTLP metrics.
	// The attributes defined in the list below will be dropped from all ingested OTLP metrics.
	//
	// Upon ingest, the *Allow list: resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny list therefore applies to all attributes from all sources (data points, scope and resource).
	//
	// **Notes:**
	//
	// * Modifying this setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated manually.
	//
	// * Dynatrace does not recommend including attributes starting with "dt." to the deny list. Dynatrace leverages these attributes to [Enrich metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
	ToDropAttributes []ToDropAttributesInitParameters `json:"toDropAttributes,omitempty" tf:"to_drop_attributes,omitempty"`
}

type OpentelemetryMetricsObservation struct {

	// (Block List, Max: 1) When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
	// When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
	//
	// **Notes:**
	//
	// * Modifying this setting (renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated manually.
	//
	// * Dynatrace does not recommend changing/removing the attributes starting with "dt.". Dynatrace leverages these attributes to [Enrich metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
	AdditionalAttributes []AdditionalAttributesObservation `json:"additionalAttributes,omitempty" tf:"additional_attributes,omitempty"`

	// (Boolean) Add the resource and scope attributes configured below as dimensions
	// Add the resource and scope attributes configured below as dimensions
	AdditionalAttributesToDimensionEnabled *bool `json:"additionalAttributesToDimensionEnabled,omitempty" tf:"additional_attributes_to_dimension_enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs) and version will be added as dimensions (otel.scope.name and otel.scope.version) to ingested OTLP metrics.
	// When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs) and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics.
	//
	// **Note:** Modifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated manually
	MeterNameToDimensionEnabled *bool `json:"meterNameToDimensionEnabled,omitempty" tf:"meter_name_to_dimension_enabled,omitempty"`

	// (String) Specifies whether the given attributes to enable (additional_attributes) and the attributes to drop (to_drop_attributes) will get applied explicitly (EXPLICIT) or additive (ADDITIVE).
	// Specifies whether the given attributes to enable (`additional_attributes`) and the attributes to drop (`to_drop_attributes`) will get applied explicitly (`EXPLICIT`) or additive (`ADDITIVE`).
	//
	// **Note:** Using `ADDITIVE` and `EXPLICIT` at the same time within differnt resource instances will lead to unexpected results.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// default). Omit this property if you want to cover the whole environment.
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Block List, Max: 1) The attributes defined in the list below will be dropped from all ingested OTLP metrics.
	// The attributes defined in the list below will be dropped from all ingested OTLP metrics.
	//
	// Upon ingest, the *Allow list: resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny list therefore applies to all attributes from all sources (data points, scope and resource).
	//
	// **Notes:**
	//
	// * Modifying this setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated manually.
	//
	// * Dynatrace does not recommend including attributes starting with "dt." to the deny list. Dynatrace leverages these attributes to [Enrich metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
	ToDropAttributes []ToDropAttributesObservation `json:"toDropAttributes,omitempty" tf:"to_drop_attributes,omitempty"`
}

type OpentelemetryMetricsParameters struct {

	// (Block List, Max: 1) When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
	// When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are present in the OpenTelemetry resource or in the instrumentation scope.
	//
	// **Notes:**
	//
	// * Modifying this setting (renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated manually.
	//
	// * Dynatrace does not recommend changing/removing the attributes starting with "dt.". Dynatrace leverages these attributes to [Enrich metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
	// +kubebuilder:validation:Optional
	AdditionalAttributes []AdditionalAttributesParameters `json:"additionalAttributes,omitempty" tf:"additional_attributes,omitempty"`

	// (Boolean) Add the resource and scope attributes configured below as dimensions
	// Add the resource and scope attributes configured below as dimensions
	// +kubebuilder:validation:Optional
	AdditionalAttributesToDimensionEnabled *bool `json:"additionalAttributesToDimensionEnabled,omitempty" tf:"additional_attributes_to_dimension_enabled,omitempty"`

	// (Boolean) When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs) and version will be added as dimensions (otel.scope.name and otel.scope.version) to ingested OTLP metrics.
	// When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs) and version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics.
	//
	// **Note:** Modifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated manually
	// +kubebuilder:validation:Optional
	MeterNameToDimensionEnabled *bool `json:"meterNameToDimensionEnabled,omitempty" tf:"meter_name_to_dimension_enabled,omitempty"`

	// (String) Specifies whether the given attributes to enable (additional_attributes) and the attributes to drop (to_drop_attributes) will get applied explicitly (EXPLICIT) or additive (ADDITIVE).
	// Specifies whether the given attributes to enable (`additional_attributes`) and the attributes to drop (`to_drop_attributes`) will get applied explicitly (`EXPLICIT`) or additive (`ADDITIVE`).
	//
	// **Note:** Using `ADDITIVE` and `EXPLICIT` at the same time within differnt resource instances will lead to unexpected results.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// default). Omit this property if you want to cover the whole environment.
	// The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// (Block List, Max: 1) The attributes defined in the list below will be dropped from all ingested OTLP metrics.
	// The attributes defined in the list below will be dropped from all ingested OTLP metrics.
	//
	// Upon ingest, the *Allow list: resource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny list therefore applies to all attributes from all sources (data points, scope and resource).
	//
	// **Notes:**
	//
	// * Modifying this setting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated manually.
	//
	// * Dynatrace does not recommend including attributes starting with "dt." to the deny list. Dynatrace leverages these attributes to [Enrich metrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).
	// +kubebuilder:validation:Optional
	ToDropAttributes []ToDropAttributesParameters `json:"toDropAttributes,omitempty" tf:"to_drop_attributes,omitempty"`
}

type ToDropAttributeInitParameters struct {

	// (String) Attribute key
	// Attribute key
	AttributeKey *string `json:"attributeKey,omitempty" tf:"attribute_key,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ToDropAttributeObservation struct {

	// (String) Attribute key
	// Attribute key
	AttributeKey *string `json:"attributeKey,omitempty" tf:"attribute_key,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ToDropAttributeParameters struct {

	// (String) Attribute key
	// Attribute key
	// +kubebuilder:validation:Optional
	AttributeKey *string `json:"attributeKey" tf:"attribute_key,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`
}

type ToDropAttributesInitParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	ToDropAttribute []ToDropAttributeInitParameters `json:"toDropAttribute,omitempty" tf:"to_drop_attribute,omitempty"`
}

type ToDropAttributesObservation struct {

	// (Block Set, Min: 1) (see below for nested schema)
	ToDropAttribute []ToDropAttributeObservation `json:"toDropAttribute,omitempty" tf:"to_drop_attribute,omitempty"`
}

type ToDropAttributesParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	ToDropAttribute []ToDropAttributeParameters `json:"toDropAttribute" tf:"to_drop_attribute,omitempty"`
}

// OpentelemetryMetricsSpec defines the desired state of OpentelemetryMetrics
type OpentelemetryMetricsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OpentelemetryMetricsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OpentelemetryMetricsInitParameters `json:"initProvider,omitempty"`
}

// OpentelemetryMetricsStatus defines the observed state of OpentelemetryMetrics.
type OpentelemetryMetricsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OpentelemetryMetricsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OpentelemetryMetrics is the Schema for the OpentelemetryMetricss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type OpentelemetryMetrics struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OpentelemetryMetricsSpec   `json:"spec"`
	Status            OpentelemetryMetricsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpentelemetryMetricsList contains a list of OpentelemetryMetricss
type OpentelemetryMetricsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OpentelemetryMetrics `json:"items"`
}

// Repository type metadata.
var (
	OpentelemetryMetrics_Kind             = "OpentelemetryMetrics"
	OpentelemetryMetrics_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OpentelemetryMetrics_Kind}.String()
	OpentelemetryMetrics_KindAPIVersion   = OpentelemetryMetrics_Kind + "." + CRDGroupVersion.String()
	OpentelemetryMetrics_GroupVersionKind = CRDGroupVersion.WithKind(OpentelemetryMetrics_Kind)
)

func init() {
	SchemeBuilder.Register(&OpentelemetryMetrics{}, &OpentelemetryMetricsList{})
}
