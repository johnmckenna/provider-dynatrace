// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionInitParameters struct {

	// (String) supported only with OneAgent 1.167+
	// supported only with OneAgent 1.167+
	EnvVar *string `json:"envVar,omitempty" tf:"env_var,omitempty"`

	// (String) Condition target
	// Condition target
	Item *string `json:"item,omitempty" tf:"item,omitempty"`

	// (String) Condition operator
	// Condition operator
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Condition value
	// Condition value
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionObservation struct {

	// (String) supported only with OneAgent 1.167+
	// supported only with OneAgent 1.167+
	EnvVar *string `json:"envVar,omitempty" tf:"env_var,omitempty"`

	// (String) Condition target
	// Condition target
	Item *string `json:"item,omitempty" tf:"item,omitempty"`

	// (String) Condition operator
	// Condition operator
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) Condition value
	// Condition value
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConditionParameters struct {

	// (String) supported only with OneAgent 1.167+
	// supported only with OneAgent 1.167+
	// +kubebuilder:validation:Optional
	EnvVar *string `json:"envVar,omitempty" tf:"env_var,omitempty"`

	// (String) Condition target
	// Condition target
	// +kubebuilder:validation:Optional
	Item *string `json:"item" tf:"item,omitempty"`

	// (String) Condition operator
	// Condition operator
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) Condition value
	// Condition value
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ProcessMonitoringRuleInitParameters struct {

	// (Block List, Min: 1, Max: 1) Condition (see below for nested schema)
	// Condition
	Condition []ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope
	HostGroupID *string `json:"hostGroupId,omitempty" tf:"host_group_id,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Possible Values: MONITORING_ON, MONITORING_OFF
	// Possible Values: `MONITORING_ON`, `MONITORING_OFF`
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ProcessMonitoringRuleObservation struct {

	// (Block List, Min: 1, Max: 1) Condition (see below for nested schema)
	// Condition
	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope
	HostGroupID *string `json:"hostGroupId,omitempty" tf:"host_group_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Possible Values: MONITORING_ON, MONITORING_OFF
	// Possible Values: `MONITORING_ON`, `MONITORING_OFF`
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type ProcessMonitoringRuleParameters struct {

	// (Block List, Min: 1, Max: 1) Condition (see below for nested schema)
	// Condition
	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope
	// +kubebuilder:validation:Optional
	HostGroupID *string `json:"hostGroupId,omitempty" tf:"host_group_id,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// +kubebuilder:validation:Optional
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Possible Values: MONITORING_ON, MONITORING_OFF
	// Possible Values: `MONITORING_ON`, `MONITORING_OFF`
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

// ProcessMonitoringRuleSpec defines the desired state of ProcessMonitoringRule
type ProcessMonitoringRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProcessMonitoringRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProcessMonitoringRuleInitParameters `json:"initProvider,omitempty"`
}

// ProcessMonitoringRuleStatus defines the observed state of ProcessMonitoringRule.
type ProcessMonitoringRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProcessMonitoringRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProcessMonitoringRule is the Schema for the ProcessMonitoringRules API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ProcessMonitoringRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.condition) || (has(self.initProvider) && has(self.initProvider.condition))",message="spec.forProvider.condition is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mode) || (has(self.initProvider) && has(self.initProvider.mode))",message="spec.forProvider.mode is a required parameter"
	Spec   ProcessMonitoringRuleSpec   `json:"spec"`
	Status ProcessMonitoringRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProcessMonitoringRuleList contains a list of ProcessMonitoringRules
type ProcessMonitoringRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProcessMonitoringRule `json:"items"`
}

// Repository type metadata.
var (
	ProcessMonitoringRule_Kind             = "ProcessMonitoringRule"
	ProcessMonitoringRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProcessMonitoringRule_Kind}.String()
	ProcessMonitoringRule_KindAPIVersion   = ProcessMonitoringRule_Kind + "." + CRDGroupVersion.String()
	ProcessMonitoringRule_GroupVersionKind = CRDGroupVersion.WithKind(ProcessMonitoringRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ProcessMonitoringRule{}, &ProcessMonitoringRuleList{})
}
