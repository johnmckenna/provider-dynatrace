// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProcessMonitoringInitParameters struct {

	// (Boolean) By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a respective deep monitoring rule or where monitoring is enabled explicitly.
	// Disabling only works if all installed Agents have version 1.123 or higher.
	// By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a respective deep monitoring rule or where monitoring is enabled explicitly.
	// Disabling only works if all installed Agents have version 1.123 or higher.
	//
	// With automatic monitoring enabled, you can create rules that define exceptions to automatic process detection and monitoring. With automatic monitoring disabled, you can define rules that identify specific processes that should be monitored. Rules are applied in the order listed in the custom and built-in process monitoring rules settings. This means that you can construct complex operations for fine-grain control over the processes that are monitored in your environment. For example, you might define an inclusion rule that’s followed by an exclusion rule covering the same process.
	// Once created, monitoring rules can be enabled/disabled at any time. The rules will only take effect after restart of the processes in question. Alternatively, you can disable automatic monitoring entirely and instead define "Include" rules for those processes you want to monitor.
	AutoMonitoring *bool `json:"autoMonitoring,omitempty" tf:"auto_monitoring,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostGroupID *string `json:"hostGroupId,omitempty" tf:"host_group_id,omitempty"`
}

type ProcessMonitoringObservation struct {

	// (Boolean) By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a respective deep monitoring rule or where monitoring is enabled explicitly.
	// Disabling only works if all installed Agents have version 1.123 or higher.
	// By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a respective deep monitoring rule or where monitoring is enabled explicitly.
	// Disabling only works if all installed Agents have version 1.123 or higher.
	//
	// With automatic monitoring enabled, you can create rules that define exceptions to automatic process detection and monitoring. With automatic monitoring disabled, you can define rules that identify specific processes that should be monitored. Rules are applied in the order listed in the custom and built-in process monitoring rules settings. This means that you can construct complex operations for fine-grain control over the processes that are monitored in your environment. For example, you might define an inclusion rule that’s followed by an exclusion rule covering the same process.
	// Once created, monitoring rules can be enabled/disabled at any time. The rules will only take effect after restart of the processes in question. Alternatively, you can disable automatic monitoring entirely and instead define "Include" rules for those processes you want to monitor.
	AutoMonitoring *bool `json:"autoMonitoring,omitempty" tf:"auto_monitoring,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	HostGroupID *string `json:"hostGroupId,omitempty" tf:"host_group_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProcessMonitoringParameters struct {

	// (Boolean) By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a respective deep monitoring rule or where monitoring is enabled explicitly.
	// Disabling only works if all installed Agents have version 1.123 or higher.
	// By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a respective deep monitoring rule or where monitoring is enabled explicitly.
	// Disabling only works if all installed Agents have version 1.123 or higher.
	//
	// With automatic monitoring enabled, you can create rules that define exceptions to automatic process detection and monitoring. With automatic monitoring disabled, you can define rules that identify specific processes that should be monitored. Rules are applied in the order listed in the custom and built-in process monitoring rules settings. This means that you can construct complex operations for fine-grain control over the processes that are monitored in your environment. For example, you might define an inclusion rule that’s followed by an exclusion rule covering the same process.
	// Once created, monitoring rules can be enabled/disabled at any time. The rules will only take effect after restart of the processes in question. Alternatively, you can disable automatic monitoring entirely and instead define "Include" rules for those processes you want to monitor.
	// +kubebuilder:validation:Optional
	AutoMonitoring *bool `json:"autoMonitoring,omitempty" tf:"auto_monitoring,omitempty"`

	// (String) The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.
	// +kubebuilder:validation:Optional
	HostGroupID *string `json:"hostGroupId,omitempty" tf:"host_group_id,omitempty"`
}

// ProcessMonitoringSpec defines the desired state of ProcessMonitoring
type ProcessMonitoringSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProcessMonitoringParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProcessMonitoringInitParameters `json:"initProvider,omitempty"`
}

// ProcessMonitoringStatus defines the observed state of ProcessMonitoring.
type ProcessMonitoringStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProcessMonitoringObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProcessMonitoring is the Schema for the ProcessMonitorings API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ProcessMonitoring struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.autoMonitoring) || (has(self.initProvider) && has(self.initProvider.autoMonitoring))",message="spec.forProvider.autoMonitoring is a required parameter"
	Spec   ProcessMonitoringSpec   `json:"spec"`
	Status ProcessMonitoringStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProcessMonitoringList contains a list of ProcessMonitorings
type ProcessMonitoringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProcessMonitoring `json:"items"`
}

// Repository type metadata.
var (
	ProcessMonitoring_Kind             = "ProcessMonitoring"
	ProcessMonitoring_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProcessMonitoring_Kind}.String()
	ProcessMonitoring_KindAPIVersion   = ProcessMonitoring_Kind + "." + CRDGroupVersion.String()
	ProcessMonitoring_GroupVersionKind = CRDGroupVersion.WithKind(ProcessMonitoring_Kind)
)

func init() {
	SchemeBuilder.Register(&ProcessMonitoring{}, &ProcessMonitoringList{})
}
