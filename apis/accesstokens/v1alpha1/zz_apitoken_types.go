// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APITokenInitParameters struct {

	// MM-dd'T'HH:mm:ss.SSS'Z')
	// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	// (Boolean) The token is enabled (true) or disabled (false), default disabled (false).
	// The token is enabled (true) or disabled (false), default disabled (false).
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The expiration date of the token.
	// The expiration date of the token.
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// MM-dd'T'HH:mm:ss.SSS'Z')
	// Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	LastUsedDate *string `json:"lastUsedDate,omitempty" tf:"last_used_date,omitempty"`

	// (String) Token last used IP address.
	// Token last used IP address.
	LastUsedIPAddress *string `json:"lastUsedIpAddress,omitempty" tf:"last_used_ip_address,omitempty"`

	// MM-dd'T'HH:mm:ss.SSS'Z').
	// Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
	ModifiedDate *string `json:"modifiedDate,omitempty" tf:"modified_date,omitempty"`

	// (String) The name of the token.
	// The name of the token.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The owner of the token
	// The owner of the token
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) The token is a personal access token (true) or an API token (false).
	// The token is a personal access token (true) or an API token (false).
	PersonalAccessToken *bool `json:"personalAccessToken,omitempty" tf:"personal_access_token,omitempty"`

	// (Set of String) A list of the scopes to be assigned to the token.
	// A list of the scopes to be assigned to the token.
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

type APITokenObservation struct {

	// MM-dd'T'HH:mm:ss.SSS'Z')
	// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	// (Boolean) The token is enabled (true) or disabled (false), default disabled (false).
	// The token is enabled (true) or disabled (false), default disabled (false).
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The expiration date of the token.
	// The expiration date of the token.
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// MM-dd'T'HH:mm:ss.SSS'Z')
	// Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	LastUsedDate *string `json:"lastUsedDate,omitempty" tf:"last_used_date,omitempty"`

	// (String) Token last used IP address.
	// Token last used IP address.
	LastUsedIPAddress *string `json:"lastUsedIpAddress,omitempty" tf:"last_used_ip_address,omitempty"`

	// MM-dd'T'HH:mm:ss.SSS'Z').
	// Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
	ModifiedDate *string `json:"modifiedDate,omitempty" tf:"modified_date,omitempty"`

	// (String) The name of the token.
	// The name of the token.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The owner of the token
	// The owner of the token
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) The token is a personal access token (true) or an API token (false).
	// The token is a personal access token (true) or an API token (false).
	PersonalAccessToken *bool `json:"personalAccessToken,omitempty" tf:"personal_access_token,omitempty"`

	// (Set of String) A list of the scopes to be assigned to the token.
	// A list of the scopes to be assigned to the token.
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

type APITokenParameters struct {

	// MM-dd'T'HH:mm:ss.SSS'Z')
	// Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	// +kubebuilder:validation:Optional
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`

	// (Boolean) The token is enabled (true) or disabled (false), default disabled (false).
	// The token is enabled (true) or disabled (false), default disabled (false).
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The expiration date of the token.
	// The expiration date of the token.
	// +kubebuilder:validation:Optional
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// MM-dd'T'HH:mm:ss.SSS'Z')
	// Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')
	// +kubebuilder:validation:Optional
	LastUsedDate *string `json:"lastUsedDate,omitempty" tf:"last_used_date,omitempty"`

	// (String) Token last used IP address.
	// Token last used IP address.
	// +kubebuilder:validation:Optional
	LastUsedIPAddress *string `json:"lastUsedIpAddress,omitempty" tf:"last_used_ip_address,omitempty"`

	// MM-dd'T'HH:mm:ss.SSS'Z').
	// Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').
	// +kubebuilder:validation:Optional
	ModifiedDate *string `json:"modifiedDate,omitempty" tf:"modified_date,omitempty"`

	// (String) The name of the token.
	// The name of the token.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The owner of the token
	// The owner of the token
	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Boolean) The token is a personal access token (true) or an API token (false).
	// The token is a personal access token (true) or an API token (false).
	// +kubebuilder:validation:Optional
	PersonalAccessToken *bool `json:"personalAccessToken,omitempty" tf:"personal_access_token,omitempty"`

	// (Set of String) A list of the scopes to be assigned to the token.
	// A list of the scopes to be assigned to the token.
	// +kubebuilder:validation:Optional
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

// APITokenSpec defines the desired state of APIToken
type APITokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     APITokenParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider APITokenInitParameters `json:"initProvider,omitempty"`
}

// APITokenStatus defines the observed state of APIToken.
type APITokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        APITokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// APIToken is the Schema for the APITokens API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type APIToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scopes) || (has(self.initProvider) && has(self.initProvider.scopes))",message="spec.forProvider.scopes is a required parameter"
	Spec   APITokenSpec   `json:"spec"`
	Status APITokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// APITokenList contains a list of APITokens
type APITokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []APIToken `json:"items"`
}

// Repository type metadata.
var (
	APIToken_Kind             = "APIToken"
	APIToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: APIToken_Kind}.String()
	APIToken_KindAPIVersion   = APIToken_Kind + "." + CRDGroupVersion.String()
	APIToken_GroupVersionKind = CRDGroupVersion.WithKind(APIToken_Kind)
)

func init() {
	SchemeBuilder.Register(&APIToken{}, &APITokenList{})
}
