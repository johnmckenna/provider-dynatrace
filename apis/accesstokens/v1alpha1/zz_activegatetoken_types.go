// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActivegateTokenInitParameters struct {

	// (Boolean) Manually enforce ActiveGate token authentication
	// Manually enforce ActiveGate token authentication
	AuthTokenEnforcementManuallyEnabled *bool `json:"authTokenEnforcementManuallyEnabled,omitempty" tf:"auth_token_enforcement_manually_enabled,omitempty"`

	// (Boolean) Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined (see notification settings)
	// Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](/ui/settings/builtin:problem.notifications))
	ExpiringTokenNotificationsEnabled *bool `json:"expiringTokenNotificationsEnabled,omitempty" tf:"expiring_token_notifications_enabled,omitempty"`
}

type ActivegateTokenObservation struct {

	// (Boolean) Manually enforce ActiveGate token authentication
	// Manually enforce ActiveGate token authentication
	AuthTokenEnforcementManuallyEnabled *bool `json:"authTokenEnforcementManuallyEnabled,omitempty" tf:"auth_token_enforcement_manually_enabled,omitempty"`

	// (Boolean) Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined (see notification settings)
	// Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](/ui/settings/builtin:problem.notifications))
	ExpiringTokenNotificationsEnabled *bool `json:"expiringTokenNotificationsEnabled,omitempty" tf:"expiring_token_notifications_enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ActivegateTokenParameters struct {

	// (Boolean) Manually enforce ActiveGate token authentication
	// Manually enforce ActiveGate token authentication
	// +kubebuilder:validation:Optional
	AuthTokenEnforcementManuallyEnabled *bool `json:"authTokenEnforcementManuallyEnabled,omitempty" tf:"auth_token_enforcement_manually_enabled,omitempty"`

	// (Boolean) Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined (see notification settings)
	// Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your environment and notifications are defined ([see notification settings](/ui/settings/builtin:problem.notifications))
	// +kubebuilder:validation:Optional
	ExpiringTokenNotificationsEnabled *bool `json:"expiringTokenNotificationsEnabled,omitempty" tf:"expiring_token_notifications_enabled,omitempty"`
}

// ActivegateTokenSpec defines the desired state of ActivegateToken
type ActivegateTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActivegateTokenParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ActivegateTokenInitParameters `json:"initProvider,omitempty"`
}

// ActivegateTokenStatus defines the observed state of ActivegateToken.
type ActivegateTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActivegateTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ActivegateToken is the Schema for the ActivegateTokens API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ActivegateToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authTokenEnforcementManuallyEnabled) || (has(self.initProvider) && has(self.initProvider.authTokenEnforcementManuallyEnabled))",message="spec.forProvider.authTokenEnforcementManuallyEnabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.expiringTokenNotificationsEnabled) || (has(self.initProvider) && has(self.initProvider.expiringTokenNotificationsEnabled))",message="spec.forProvider.expiringTokenNotificationsEnabled is a required parameter"
	Spec   ActivegateTokenSpec   `json:"spec"`
	Status ActivegateTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActivegateTokenList contains a list of ActivegateTokens
type ActivegateTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ActivegateToken `json:"items"`
}

// Repository type metadata.
var (
	ActivegateToken_Kind             = "ActivegateToken"
	ActivegateToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ActivegateToken_Kind}.String()
	ActivegateToken_KindAPIVersion   = ActivegateToken_Kind + "." + CRDGroupVersion.String()
	ActivegateToken_GroupVersionKind = CRDGroupVersion.WithKind(ActivegateToken_Kind)
)

func init() {
	SchemeBuilder.Register(&ActivegateToken{}, &ActivegateTokenList{})
}
