// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AgTokenInitParameters struct {

	// (String) The expiration date of the token.
	// The expiration date of the token.
	//
	// You can use one of the following formats:
	//
	// * Timestamp in UTC milliseconds.
	// * Human-readable format of 2021-01-25T05:57:01.123+01:00. If no time zone is specified, UTC is used. You can use a space character instead of the T. Seconds and fractions of a second are optional.
	// * Relative timeframe, back from now. The format is now-NU/A, where N is the amount of time, U is the unit of time, and A is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, now-1y/w is one year back, aligned by a week. You can also specify relative timeframe without an alignment: now-NU. Supported time units for the relative timeframe are:
	// - m: minutes
	// - h: hours
	// - d: days
	// - w: weeks
	// - M: months
	// - y: years
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// (String) The name of the token.
	// The name of the token.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) The token is a seed token (true) or an individual token (false). We recommend the individual token option (false)
	// The token is a seed token (true) or an individual token (false). We recommend the individual token option (false)
	Seed *bool `json:"seed,omitempty" tf:"seed,omitempty"`

	// (String) The type of the ActiveGate for which the token is valid. Possible values are ENVIRONMENT or CLUSTER
	// The type of the ActiveGate for which the token is valid. Possible values are `ENVIRONMENT` or `CLUSTER`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AgTokenObservation struct {

	// (String) The expiration date of the token.
	// The expiration date of the token.
	//
	// You can use one of the following formats:
	//
	// * Timestamp in UTC milliseconds.
	// * Human-readable format of 2021-01-25T05:57:01.123+01:00. If no time zone is specified, UTC is used. You can use a space character instead of the T. Seconds and fractions of a second are optional.
	// * Relative timeframe, back from now. The format is now-NU/A, where N is the amount of time, U is the unit of time, and A is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, now-1y/w is one year back, aligned by a week. You can also specify relative timeframe without an alignment: now-NU. Supported time units for the relative timeframe are:
	// - m: minutes
	// - h: hours
	// - d: days
	// - w: weeks
	// - M: months
	// - y: years
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the token.
	// The name of the token.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) The token is a seed token (true) or an individual token (false). We recommend the individual token option (false)
	// The token is a seed token (true) or an individual token (false). We recommend the individual token option (false)
	Seed *bool `json:"seed,omitempty" tf:"seed,omitempty"`

	// (String) The type of the ActiveGate for which the token is valid. Possible values are ENVIRONMENT or CLUSTER
	// The type of the ActiveGate for which the token is valid. Possible values are `ENVIRONMENT` or `CLUSTER`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AgTokenParameters struct {

	// (String) The expiration date of the token.
	// The expiration date of the token.
	//
	// You can use one of the following formats:
	//
	// * Timestamp in UTC milliseconds.
	// * Human-readable format of 2021-01-25T05:57:01.123+01:00. If no time zone is specified, UTC is used. You can use a space character instead of the T. Seconds and fractions of a second are optional.
	// * Relative timeframe, back from now. The format is now-NU/A, where N is the amount of time, U is the unit of time, and A is an alignment. The alignment rounds all the smaller values to the nearest zero in the past. For example, now-1y/w is one year back, aligned by a week. You can also specify relative timeframe without an alignment: now-NU. Supported time units for the relative timeframe are:
	// - m: minutes
	// - h: hours
	// - d: days
	// - w: weeks
	// - M: months
	// - y: years
	// +kubebuilder:validation:Optional
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// (String) The name of the token.
	// The name of the token.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean) The token is a seed token (true) or an individual token (false). We recommend the individual token option (false)
	// The token is a seed token (true) or an individual token (false). We recommend the individual token option (false)
	// +kubebuilder:validation:Optional
	Seed *bool `json:"seed,omitempty" tf:"seed,omitempty"`

	// (String) The type of the ActiveGate for which the token is valid. Possible values are ENVIRONMENT or CLUSTER
	// The type of the ActiveGate for which the token is valid. Possible values are `ENVIRONMENT` or `CLUSTER`
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// AgTokenSpec defines the desired state of AgToken
type AgTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AgTokenParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AgTokenInitParameters `json:"initProvider,omitempty"`
}

// AgTokenStatus defines the observed state of AgToken.
type AgTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AgTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AgToken is the Schema for the AgTokens API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type AgToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   AgTokenSpec   `json:"spec"`
	Status AgTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AgTokenList contains a list of AgTokens
type AgTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AgToken `json:"items"`
}

// Repository type metadata.
var (
	AgToken_Kind             = "AgToken"
	AgToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AgToken_Kind}.String()
	AgToken_KindAPIVersion   = AgToken_Kind + "." + CRDGroupVersion.String()
	AgToken_GroupVersionKind = CRDGroupVersion.WithKind(AgToken_Kind)
)

func init() {
	SchemeBuilder.Register(&AgToken{}, &AgTokenList{})
}
