// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectivityAlertsInitParameters struct {

	// (Boolean) TCP connectivity problems
	// TCP connectivity problems
	ConnectivityAlerts *bool `json:"connectivityAlerts,omitempty" tf:"connectivity_alerts,omitempty"`

	// (String) The scope of this settings
	// The scope of this settings
	ProcessGroupID *string `json:"processGroupId,omitempty" tf:"process_group_id,omitempty"`
}

type ConnectivityAlertsObservation struct {

	// (Boolean) TCP connectivity problems
	// TCP connectivity problems
	ConnectivityAlerts *bool `json:"connectivityAlerts,omitempty" tf:"connectivity_alerts,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The scope of this settings
	// The scope of this settings
	ProcessGroupID *string `json:"processGroupId,omitempty" tf:"process_group_id,omitempty"`
}

type ConnectivityAlertsParameters struct {

	// (Boolean) TCP connectivity problems
	// TCP connectivity problems
	// +kubebuilder:validation:Optional
	ConnectivityAlerts *bool `json:"connectivityAlerts,omitempty" tf:"connectivity_alerts,omitempty"`

	// (String) The scope of this settings
	// The scope of this settings
	// +kubebuilder:validation:Optional
	ProcessGroupID *string `json:"processGroupId,omitempty" tf:"process_group_id,omitempty"`
}

// ConnectivityAlertsSpec defines the desired state of ConnectivityAlerts
type ConnectivityAlertsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectivityAlertsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConnectivityAlertsInitParameters `json:"initProvider,omitempty"`
}

// ConnectivityAlertsStatus defines the observed state of ConnectivityAlerts.
type ConnectivityAlertsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectivityAlertsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ConnectivityAlerts is the Schema for the ConnectivityAlertss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ConnectivityAlerts struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.connectivityAlerts) || (has(self.initProvider) && has(self.initProvider.connectivityAlerts))",message="spec.forProvider.connectivityAlerts is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.processGroupId) || (has(self.initProvider) && has(self.initProvider.processGroupId))",message="spec.forProvider.processGroupId is a required parameter"
	Spec   ConnectivityAlertsSpec   `json:"spec"`
	Status ConnectivityAlertsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectivityAlertsList contains a list of ConnectivityAlertss
type ConnectivityAlertsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectivityAlerts `json:"items"`
}

// Repository type metadata.
var (
	ConnectivityAlerts_Kind             = "ConnectivityAlerts"
	ConnectivityAlerts_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectivityAlerts_Kind}.String()
	ConnectivityAlerts_KindAPIVersion   = ConnectivityAlerts_Kind + "." + CRDGroupVersion.String()
	ConnectivityAlerts_GroupVersionKind = CRDGroupVersion.WithKind(ConnectivityAlerts_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectivityAlerts{}, &ConnectivityAlertsList{})
}
