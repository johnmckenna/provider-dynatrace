// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HeadersHeaderInitParameters struct {

	// (String) The name of the notification configuration
	// The name of the HTTP header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Sensitive) The value of the HTTP header as a sensitive property. May contain an empty value. secret_value and value are mutually exclusive. Only one of those two is allowed to be specified.
	// The value of the HTTP header as a sensitive property. May contain an empty value. `secret_value` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
	SecretValueSecretRef *v1.SecretKeySelector `json:"secretValueSecretRef,omitempty" tf:"-"`

	// (String) The value of the HTTP header. May contain an empty value. secret_value and value are mutually exclusive. Only one of those two is allowed to be specified.
	// The value of the HTTP header. May contain an empty value. `secret_value` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeadersHeaderObservation struct {

	// (String) The name of the notification configuration
	// The name of the HTTP header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the HTTP header. May contain an empty value. secret_value and value are mutually exclusive. Only one of those two is allowed to be specified.
	// The value of the HTTP header. May contain an empty value. `secret_value` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeadersHeaderParameters struct {

	// (String) The name of the notification configuration
	// The name of the HTTP header
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String, Sensitive) The value of the HTTP header as a sensitive property. May contain an empty value. secret_value and value are mutually exclusive. Only one of those two is allowed to be specified.
	// The value of the HTTP header as a sensitive property. May contain an empty value. `secret_value` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
	// +kubebuilder:validation:Optional
	SecretValueSecretRef *v1.SecretKeySelector `json:"secretValueSecretRef,omitempty" tf:"-"`

	// (String) The value of the HTTP header. May contain an empty value. secret_value and value are mutually exclusive. Only one of those two is allowed to be specified.
	// The value of the HTTP header. May contain an empty value. `secret_value` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type XmattersNotificationHeadersInitParameters struct {

	// (Block Set, Min: 1) An additional HTTP Header to include when sending requests (see below for nested schema)
	// An additional HTTP Header to include when sending requests
	Header []HeadersHeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`
}

type XmattersNotificationHeadersObservation struct {

	// (Block Set, Min: 1) An additional HTTP Header to include when sending requests (see below for nested schema)
	// An additional HTTP Header to include when sending requests
	Header []HeadersHeaderObservation `json:"header,omitempty" tf:"header,omitempty"`
}

type XmattersNotificationHeadersParameters struct {

	// (Block Set, Min: 1) An additional HTTP Header to include when sending requests (see below for nested schema)
	// An additional HTTP Header to include when sending requests
	// +kubebuilder:validation:Optional
	Header []HeadersHeaderParameters `json:"header" tf:"header,omitempty"`
}

type XmattersNotificationInitParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Block List, Max: 1) A list of the additional HTTP headers (see below for nested schema)
	// A list of the additional HTTP headers
	Headers []XmattersNotificationHeadersInitParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) The ID of these settings when referred to from resources requiring the REST API V1 keys
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyID *string `json:"legacyId,omitempty" tf:"legacy_id,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the notification message. You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// (String) The URL of the WebHook endpoint
	// The URL of the WebHook endpoint
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type XmattersNotificationObservation struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Block List, Max: 1) A list of the additional HTTP headers (see below for nested schema)
	// A list of the additional HTTP headers
	Headers []XmattersNotificationHeadersObservation `json:"headers,omitempty" tf:"headers,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) The ID of these settings when referred to from resources requiring the REST API V1 keys
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyID *string `json:"legacyId,omitempty" tf:"legacy_id,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the notification message. You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// (String) The URL of the WebHook endpoint
	// The URL of the WebHook endpoint
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type XmattersNotificationParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Block List, Max: 1) A list of the additional HTTP headers (see below for nested schema)
	// A list of the additional HTTP headers
	// +kubebuilder:validation:Optional
	Headers []XmattersNotificationHeadersParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// signed and invalid, SSL certificate (true) or only trusted (false) certificates
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	// +kubebuilder:validation:Optional
	Insecure *bool `json:"insecure,omitempty" tf:"insecure,omitempty"`

	// (String) The ID of these settings when referred to from resources requiring the REST API V1 keys
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	// +kubebuilder:validation:Optional
	LegacyID *string `json:"legacyId,omitempty" tf:"legacy_id,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// formatted string.  * {ProblemDetailsJSON}: All problem event details, including root cause, as a JSON object.  * {ProblemDetailsMarkdown}: All problem event details, including root cause, as a Markdown-formatted string.  * {ProblemDetailsText}: All problem event details, including root cause, as a text-formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the notification message. You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Optional
	Payload *string `json:"payload,omitempty" tf:"payload,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// (String) The URL of the WebHook endpoint
	// The URL of the WebHook endpoint
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// XmattersNotificationSpec defines the desired state of XmattersNotification
type XmattersNotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     XmattersNotificationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider XmattersNotificationInitParameters `json:"initProvider,omitempty"`
}

// XmattersNotificationStatus defines the observed state of XmattersNotification.
type XmattersNotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        XmattersNotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// XmattersNotification is the Schema for the XmattersNotifications API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type XmattersNotification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.active) || (has(self.initProvider) && has(self.initProvider.active))",message="spec.forProvider.active is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.payload) || (has(self.initProvider) && has(self.initProvider.payload))",message="spec.forProvider.payload is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.profile) || (has(self.initProvider) && has(self.initProvider.profile))",message="spec.forProvider.profile is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   XmattersNotificationSpec   `json:"spec"`
	Status XmattersNotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// XmattersNotificationList contains a list of XmattersNotifications
type XmattersNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []XmattersNotification `json:"items"`
}

// Repository type metadata.
var (
	XmattersNotification_Kind             = "XmattersNotification"
	XmattersNotification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: XmattersNotification_Kind}.String()
	XmattersNotification_KindAPIVersion   = XmattersNotification_Kind + "." + CRDGroupVersion.String()
	XmattersNotification_GroupVersionKind = CRDGroupVersion.WithKind(XmattersNotification_Kind)
)

func init() {
	SchemeBuilder.Register(&XmattersNotification{}, &XmattersNotificationList{})
}
