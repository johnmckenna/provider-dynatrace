// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceNowNotificationInitParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Boolean) Send events into ServiceNow ITOM
	// Send events into ServiceNow ITOM
	Events *bool `json:"events,omitempty" tf:"events,omitempty"`

	// (Boolean) Use text format for problem details instead of HTML.
	// Use text format for problem details instead of HTML.
	FormatProblemDetailsAsText *bool `json:"formatProblemDetailsAsText,omitempty" tf:"format_problem_details_as_text,omitempty"`

	// (Boolean) Send incidents into ServiceNow ITSM
	// Send incidents into ServiceNow ITSM
	Incidents *bool `json:"incidents,omitempty" tf:"incidents,omitempty"`

	// (String) The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the url field. You can only use one of them
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the **url** field. You can only use one of them
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// (String) The ID of these settings when referred to from resources requiring the REST API V1 keys
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyID *string `json:"legacyId,omitempty" tf:"legacy_id,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the ServiceNow description. You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Sensitive) The password to the ServiceNow account
	// The password to the ServiceNow account
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// premise ServiceNow installation. This field is mutually exclusive with the instance field. You can only use one of them
	// The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can only use one of them
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) The username of the ServiceNow account.   Make sure that your user account has the rest_service, web_request_admin, and x_dynat_ruxit.Integration roles
	// The username of the ServiceNow account.   Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ServiceNowNotificationObservation struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Boolean) Send events into ServiceNow ITOM
	// Send events into ServiceNow ITOM
	Events *bool `json:"events,omitempty" tf:"events,omitempty"`

	// (Boolean) Use text format for problem details instead of HTML.
	// Use text format for problem details instead of HTML.
	FormatProblemDetailsAsText *bool `json:"formatProblemDetailsAsText,omitempty" tf:"format_problem_details_as_text,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Send incidents into ServiceNow ITSM
	// Send incidents into ServiceNow ITSM
	Incidents *bool `json:"incidents,omitempty" tf:"incidents,omitempty"`

	// (String) The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the url field. You can only use one of them
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the **url** field. You can only use one of them
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// (String) The ID of these settings when referred to from resources requiring the REST API V1 keys
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	LegacyID *string `json:"legacyId,omitempty" tf:"legacy_id,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the ServiceNow description. You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// premise ServiceNow installation. This field is mutually exclusive with the instance field. You can only use one of them
	// The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can only use one of them
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) The username of the ServiceNow account.   Make sure that your user account has the rest_service, web_request_admin, and x_dynat_ruxit.Integration roles
	// The username of the ServiceNow account.   Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ServiceNowNotificationParameters struct {

	// (Boolean) The configuration is enabled (true) or disabled (false)
	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// (Boolean) Send events into ServiceNow ITOM
	// Send events into ServiceNow ITOM
	// +kubebuilder:validation:Optional
	Events *bool `json:"events,omitempty" tf:"events,omitempty"`

	// (Boolean) Use text format for problem details instead of HTML.
	// Use text format for problem details instead of HTML.
	// +kubebuilder:validation:Optional
	FormatProblemDetailsAsText *bool `json:"formatProblemDetailsAsText,omitempty" tf:"format_problem_details_as_text,omitempty"`

	// (Boolean) Send incidents into ServiceNow ITSM
	// Send incidents into ServiceNow ITSM
	// +kubebuilder:validation:Optional
	Incidents *bool `json:"incidents,omitempty" tf:"incidents,omitempty"`

	// (String) The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the url field. You can only use one of them
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually exclusive with the **url** field. You can only use one of them
	// +kubebuilder:validation:Optional
	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	// (String) The ID of these settings when referred to from resources requiring the REST API V1 keys
	// The ID of these settings when referred to from resources requiring the REST API V1 keys
	// +kubebuilder:validation:Optional
	LegacyID *string `json:"legacyId,omitempty" tf:"legacy_id,omitempty"`

	// formatted string.  * {ProblemID}: The display number of the reported problem.  * {ProblemImpact}: The impact level of the problem. Possible values are APPLICATION, SERVICE, and INFRASTRUCTURE.  * {ProblemSeverity}: The severity level of the problem. Possible values are AVAILABILITY, ERROR, PERFORMANCE, RESOURCE_CONTENTION, and CUSTOM_ALERT.  * {ProblemTitle}: A short description of the problem.  * {ProblemURL}: The URL of the problem within Dynatrace.  * {State}: The state of the problem. Possible values are OPEN and RESOLVED.  * {Tags}: The list of tags that are defined for all impacted entities, separated by commas
	// The content of the ServiceNow description. You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// (String) The name of the notification configuration
	// The name of the notification configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Sensitive) The password to the ServiceNow account
	// The password to the ServiceNow account
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (String) The ID of the associated alerting profile
	// The ID of the associated alerting profile
	// +kubebuilder:validation:Optional
	Profile *string `json:"profile,omitempty" tf:"profile,omitempty"`

	// premise ServiceNow installation. This field is mutually exclusive with the instance field. You can only use one of them
	// The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can only use one of them
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (String) The username of the ServiceNow account.   Make sure that your user account has the rest_service, web_request_admin, and x_dynat_ruxit.Integration roles
	// The username of the ServiceNow account.   Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// ServiceNowNotificationSpec defines the desired state of ServiceNowNotification
type ServiceNowNotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceNowNotificationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceNowNotificationInitParameters `json:"initProvider,omitempty"`
}

// ServiceNowNotificationStatus defines the observed state of ServiceNowNotification.
type ServiceNowNotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceNowNotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServiceNowNotification is the Schema for the ServiceNowNotifications API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ServiceNowNotification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.active) || (has(self.initProvider) && has(self.initProvider.active))",message="spec.forProvider.active is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.incidents) || (has(self.initProvider) && has(self.initProvider.incidents))",message="spec.forProvider.incidents is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.message) || (has(self.initProvider) && has(self.initProvider.message))",message="spec.forProvider.message is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.profile) || (has(self.initProvider) && has(self.initProvider.profile))",message="spec.forProvider.profile is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.username) || (has(self.initProvider) && has(self.initProvider.username))",message="spec.forProvider.username is a required parameter"
	Spec   ServiceNowNotificationSpec   `json:"spec"`
	Status ServiceNowNotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceNowNotificationList contains a list of ServiceNowNotifications
type ServiceNowNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceNowNotification `json:"items"`
}

// Repository type metadata.
var (
	ServiceNowNotification_Kind             = "ServiceNowNotification"
	ServiceNowNotification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceNowNotification_Kind}.String()
	ServiceNowNotification_KindAPIVersion   = ServiceNowNotification_Kind + "." + CRDGroupVersion.String()
	ServiceNowNotification_GroupVersionKind = CRDGroupVersion.WithKind(ServiceNowNotification_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceNowNotification{}, &ServiceNowNotificationList{})
}
