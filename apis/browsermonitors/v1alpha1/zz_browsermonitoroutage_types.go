// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BrowserMonitorOutageInitParameters struct {

	// (Number) (Field has overlap with dynatrace_browser_monitor) Alert if all locations are unable to access my web application
	// (Field has overlap with `dynatrace_browser_monitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold *float64 `json:"globalConsecutiveOutageCountThreshold,omitempty" tf:"global_consecutive_outage_count_threshold,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	// (Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages *bool `json:"globalOutages,omitempty" tf:"global_outages,omitempty"`

	// (Number) (Field has overlap with dynatrace_browser_monitor) are unable to access my web application
	// (Field has overlap with `dynatrace_browser_monitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold *float64 `json:"localConsecutiveOutageCountThreshold,omitempty" tf:"local_consecutive_outage_count_threshold,omitempty"`

	// (Number) (Field has overlap with dynatrace_browser_monitor) Alert if at least
	// (Field has overlap with `dynatrace_browser_monitor`) Alert if at least
	LocalLocationOutageCountThreshold *float64 `json:"localLocationOutageCountThreshold,omitempty" tf:"local_location_outage_count_threshold,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	// (Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages *bool `json:"localOutages,omitempty" tf:"local_outages,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	// (Field has overlap with `dynatrace_browser_monitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	RetryOnError *bool `json:"retryOnError,omitempty" tf:"retry_on_error,omitempty"`

	// (String) The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type BrowserMonitorOutageObservation struct {

	// (Number) (Field has overlap with dynatrace_browser_monitor) Alert if all locations are unable to access my web application
	// (Field has overlap with `dynatrace_browser_monitor`) Alert if all locations are unable to access my web application
	GlobalConsecutiveOutageCountThreshold *float64 `json:"globalConsecutiveOutageCountThreshold,omitempty" tf:"global_consecutive_outage_count_threshold,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	// (Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	GlobalOutages *bool `json:"globalOutages,omitempty" tf:"global_outages,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) (Field has overlap with dynatrace_browser_monitor) are unable to access my web application
	// (Field has overlap with `dynatrace_browser_monitor`) are unable to access my web application
	LocalConsecutiveOutageCountThreshold *float64 `json:"localConsecutiveOutageCountThreshold,omitempty" tf:"local_consecutive_outage_count_threshold,omitempty"`

	// (Number) (Field has overlap with dynatrace_browser_monitor) Alert if at least
	// (Field has overlap with `dynatrace_browser_monitor`) Alert if at least
	LocalLocationOutageCountThreshold *float64 `json:"localLocationOutageCountThreshold,omitempty" tf:"local_location_outage_count_threshold,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	// (Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	LocalOutages *bool `json:"localOutages,omitempty" tf:"local_outages,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	// (Field has overlap with `dynatrace_browser_monitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	RetryOnError *bool `json:"retryOnError,omitempty" tf:"retry_on_error,omitempty"`

	// (String) The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type BrowserMonitorOutageParameters struct {

	// (Number) (Field has overlap with dynatrace_browser_monitor) Alert if all locations are unable to access my web application
	// (Field has overlap with `dynatrace_browser_monitor`) Alert if all locations are unable to access my web application
	// +kubebuilder:validation:Optional
	GlobalConsecutiveOutageCountThreshold *float64 `json:"globalConsecutiveOutageCountThreshold,omitempty" tf:"global_consecutive_outage_count_threshold,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	// (Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is unavailable at all configured locations.
	// +kubebuilder:validation:Optional
	GlobalOutages *bool `json:"globalOutages,omitempty" tf:"global_outages,omitempty"`

	// (Number) (Field has overlap with dynatrace_browser_monitor) are unable to access my web application
	// (Field has overlap with `dynatrace_browser_monitor`) are unable to access my web application
	// +kubebuilder:validation:Optional
	LocalConsecutiveOutageCountThreshold *float64 `json:"localConsecutiveOutageCountThreshold,omitempty" tf:"local_consecutive_outage_count_threshold,omitempty"`

	// (Number) (Field has overlap with dynatrace_browser_monitor) Alert if at least
	// (Field has overlap with `dynatrace_browser_monitor`) Alert if at least
	// +kubebuilder:validation:Optional
	LocalLocationOutageCountThreshold *float64 `json:"localLocationOutageCountThreshold,omitempty" tf:"local_location_outage_count_threshold,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	// (Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location.
	// +kubebuilder:validation:Optional
	LocalOutages *bool `json:"localOutages,omitempty" tf:"local_outages,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	// (Field has overlap with `dynatrace_browser_monitor`) When enabled, which is the default, failing monitor executions are retried immediately one time to avoid false positives and only the second result is used. When disabled, we use the first result right away.
	// Requires ActiveGate version 1.207+ for private locations.
	// +kubebuilder:validation:Optional
	RetryOnError *bool `json:"retryOnError,omitempty" tf:"retry_on_error,omitempty"`

	// (String) The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	// The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

// BrowserMonitorOutageSpec defines the desired state of BrowserMonitorOutage
type BrowserMonitorOutageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BrowserMonitorOutageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BrowserMonitorOutageInitParameters `json:"initProvider,omitempty"`
}

// BrowserMonitorOutageStatus defines the observed state of BrowserMonitorOutage.
type BrowserMonitorOutageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BrowserMonitorOutageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BrowserMonitorOutage is the Schema for the BrowserMonitorOutages API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type BrowserMonitorOutage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.globalOutages) || (has(self.initProvider) && has(self.initProvider.globalOutages))",message="spec.forProvider.globalOutages is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.localOutages) || (has(self.initProvider) && has(self.initProvider.localOutages))",message="spec.forProvider.localOutages is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.retryOnError) || (has(self.initProvider) && has(self.initProvider.retryOnError))",message="spec.forProvider.retryOnError is a required parameter"
	Spec   BrowserMonitorOutageSpec   `json:"spec"`
	Status BrowserMonitorOutageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BrowserMonitorOutageList contains a list of BrowserMonitorOutages
type BrowserMonitorOutageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BrowserMonitorOutage `json:"items"`
}

// Repository type metadata.
var (
	BrowserMonitorOutage_Kind             = "BrowserMonitorOutage"
	BrowserMonitorOutage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BrowserMonitorOutage_Kind}.String()
	BrowserMonitorOutage_KindAPIVersion   = BrowserMonitorOutage_Kind + "." + CRDGroupVersion.String()
	BrowserMonitorOutage_GroupVersionKind = CRDGroupVersion.WithKind(BrowserMonitorOutage_Kind)
)

func init() {
	SchemeBuilder.Register(&BrowserMonitorOutage{}, &BrowserMonitorOutageList{})
}
