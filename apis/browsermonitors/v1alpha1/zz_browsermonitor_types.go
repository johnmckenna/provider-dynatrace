// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnomalyDetectionInitParameters struct {

	// (Block List) Thresholds for loading times (see below for nested schema)
	// Thresholds for loading times
	LoadingTimeThresholds []LoadingTimeThresholdsInitParameters `json:"loadingTimeThresholds,omitempty" tf:"loading_time_thresholds,omitempty"`

	// (Block List) Outage handling configuration (see below for nested schema)
	// Outage handling configuration
	OutageHandling []OutageHandlingInitParameters `json:"outageHandling,omitempty" tf:"outage_handling,omitempty"`
}

type AnomalyDetectionObservation struct {

	// (Block List) Thresholds for loading times (see below for nested schema)
	// Thresholds for loading times
	LoadingTimeThresholds []LoadingTimeThresholdsObservation `json:"loadingTimeThresholds,omitempty" tf:"loading_time_thresholds,omitempty"`

	// (Block List) Outage handling configuration (see below for nested schema)
	// Outage handling configuration
	OutageHandling []OutageHandlingObservation `json:"outageHandling,omitempty" tf:"outage_handling,omitempty"`
}

type AnomalyDetectionParameters struct {

	// (Block List) Thresholds for loading times (see below for nested schema)
	// Thresholds for loading times
	// +kubebuilder:validation:Optional
	LoadingTimeThresholds []LoadingTimeThresholdsParameters `json:"loadingTimeThresholds,omitempty" tf:"loading_time_thresholds,omitempty"`

	// (Block List) Outage handling configuration (see below for nested schema)
	// Outage handling configuration
	// +kubebuilder:validation:Optional
	OutageHandling []OutageHandlingParameters `json:"outageHandling,omitempty" tf:"outage_handling,omitempty"`
}

type AuthenticationInitParameters struct {

	// (String) A reference to the entry within the credential vault
	// A reference to the entry within the credential vault
	Creds *string `json:"creds,omitempty" tf:"creds,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of authentication
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AuthenticationObservation struct {

	// (String) A reference to the entry within the credential vault
	// A reference to the entry within the credential vault
	Creds *string `json:"creds,omitempty" tf:"creds,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of authentication
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AuthenticationParameters struct {

	// (String) A reference to the entry within the credential vault
	// A reference to the entry within the credential vault
	// +kubebuilder:validation:Optional
	Creds *string `json:"creds" tf:"creds,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of authentication
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type BandwidthInitParameters struct {

	// (Number) The download speed of the network, in bytes per second
	// The download speed of the network, in bytes per second
	Download *float64 `json:"download,omitempty" tf:"download,omitempty"`

	// (Number) The latency of the network, in milliseconds
	// The latency of the network, in milliseconds
	Latency *float64 `json:"latency,omitempty" tf:"latency,omitempty"`

	// (String) The type of the preconfigured network—when editing in the browser, press Crtl+Spacebar to see the list of available networks
	// The type of the preconfigured network—when editing in the browser, press `Crtl+Spacebar` to see the list of available networks
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// (Number) The upload speed of the network, in bytes per second
	// The upload speed of the network, in bytes per second
	Upload *float64 `json:"upload,omitempty" tf:"upload,omitempty"`
}

type BandwidthObservation struct {

	// (Number) The download speed of the network, in bytes per second
	// The download speed of the network, in bytes per second
	Download *float64 `json:"download,omitempty" tf:"download,omitempty"`

	// (Number) The latency of the network, in milliseconds
	// The latency of the network, in milliseconds
	Latency *float64 `json:"latency,omitempty" tf:"latency,omitempty"`

	// (String) The type of the preconfigured network—when editing in the browser, press Crtl+Spacebar to see the list of available networks
	// The type of the preconfigured network—when editing in the browser, press `Crtl+Spacebar` to see the list of available networks
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// (Number) The upload speed of the network, in bytes per second
	// The upload speed of the network, in bytes per second
	Upload *float64 `json:"upload,omitempty" tf:"upload,omitempty"`
}

type BandwidthParameters struct {

	// (Number) The download speed of the network, in bytes per second
	// The download speed of the network, in bytes per second
	// +kubebuilder:validation:Optional
	Download *float64 `json:"download,omitempty" tf:"download,omitempty"`

	// (Number) The latency of the network, in milliseconds
	// The latency of the network, in milliseconds
	// +kubebuilder:validation:Optional
	Latency *float64 `json:"latency,omitempty" tf:"latency,omitempty"`

	// (String) The type of the preconfigured network—when editing in the browser, press Crtl+Spacebar to see the list of available networks
	// The type of the preconfigured network—when editing in the browser, press `Crtl+Spacebar` to see the list of available networks
	// +kubebuilder:validation:Optional
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// (Number) The upload speed of the network, in bytes per second
	// The upload speed of the network, in bytes per second
	// +kubebuilder:validation:Optional
	Upload *float64 `json:"upload,omitempty" tf:"upload,omitempty"`
}

type BrowserMonitorInitParameters struct {

	// (Block List, Max: 1) The anomaly detection configuration. (see below for nested schema)
	// The anomaly detection configuration.
	AnomalyDetection []AnomalyDetectionInitParameters `json:"anomalyDetection,omitempty" tf:"anomaly_detection,omitempty"`

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// The monitor is enabled (`true`) or disabled (`false`).
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The frequency of the monitor, in minutes.
	// The frequency of the monitor, in minutes.
	//
	// You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (Block List, Min: 1, Max: 1) The key performance metrics configuration (see below for nested schema)
	// The key performance metrics configuration
	KeyPerformanceMetrics []KeyPerformanceMetricsInitParameters `json:"keyPerformanceMetrics,omitempty" tf:"key_performance_metrics,omitempty"`

	// (Set of String) A list of locations from which the monitor is executed.
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (Set of String) A set of manually assigned applications.
	// A set of manually assigned applications.
	// +listType=set
	ManuallyAssignedApps []*string `json:"manuallyAssignedApps,omitempty" tf:"manually_assigned_apps,omitempty"`

	// (String) The name of the monitor.
	// The name of the monitor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) The Browser Script (see below for nested schema)
	// The Browser Script
	Script []ScriptInitParameters `json:"script,omitempty" tf:"script,omitempty"`

	// (Block List) A set of tags assigned to the monitor.
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type BrowserMonitorObservation struct {

	// (Block List, Max: 1) The anomaly detection configuration. (see below for nested schema)
	// The anomaly detection configuration.
	AnomalyDetection []AnomalyDetectionObservation `json:"anomalyDetection,omitempty" tf:"anomaly_detection,omitempty"`

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// The monitor is enabled (`true`) or disabled (`false`).
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The frequency of the monitor, in minutes.
	// The frequency of the monitor, in minutes.
	//
	// You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Min: 1, Max: 1) The key performance metrics configuration (see below for nested schema)
	// The key performance metrics configuration
	KeyPerformanceMetrics []KeyPerformanceMetricsObservation `json:"keyPerformanceMetrics,omitempty" tf:"key_performance_metrics,omitempty"`

	// (Set of String) A list of locations from which the monitor is executed.
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (Set of String) A set of manually assigned applications.
	// A set of manually assigned applications.
	// +listType=set
	ManuallyAssignedApps []*string `json:"manuallyAssignedApps,omitempty" tf:"manually_assigned_apps,omitempty"`

	// (String) The name of the monitor.
	// The name of the monitor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) The Browser Script (see below for nested schema)
	// The Browser Script
	Script []ScriptObservation `json:"script,omitempty" tf:"script,omitempty"`

	// (Block List) A set of tags assigned to the monitor.
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`
}

type BrowserMonitorParameters struct {

	// (Block List, Max: 1) The anomaly detection configuration. (see below for nested schema)
	// The anomaly detection configuration.
	// +kubebuilder:validation:Optional
	AnomalyDetection []AnomalyDetectionParameters `json:"anomalyDetection,omitempty" tf:"anomaly_detection,omitempty"`

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// The monitor is enabled (`true`) or disabled (`false`).
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) The frequency of the monitor, in minutes.
	// The frequency of the monitor, in minutes.
	//
	// You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.
	// +kubebuilder:validation:Optional
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (Block List, Min: 1, Max: 1) The key performance metrics configuration (see below for nested schema)
	// The key performance metrics configuration
	// +kubebuilder:validation:Optional
	KeyPerformanceMetrics []KeyPerformanceMetricsParameters `json:"keyPerformanceMetrics,omitempty" tf:"key_performance_metrics,omitempty"`

	// (Set of String) A list of locations from which the monitor is executed.
	// A list of locations from which the monitor is executed.
	//
	// To specify a location, use its entity ID.
	// +kubebuilder:validation:Optional
	// +listType=set
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// (Set of String) A set of manually assigned applications.
	// A set of manually assigned applications.
	// +kubebuilder:validation:Optional
	// +listType=set
	ManuallyAssignedApps []*string `json:"manuallyAssignedApps,omitempty" tf:"manually_assigned_apps,omitempty"`

	// (String) The name of the monitor.
	// The name of the monitor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) The Browser Script (see below for nested schema)
	// The Browser Script
	// +kubebuilder:validation:Optional
	Script []ScriptParameters `json:"script,omitempty" tf:"script,omitempty"`

	// (Block List) A set of tags assigned to the monitor.
	// A set of tags assigned to the monitor.
	//
	// You can specify only the value of the tag here and the `CONTEXTLESS` context and source 'USER' will be added automatically.
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ClickInitParameters struct {

	// (Number) the mouse button to be used for the click
	// the mouse button to be used for the click
	Button *float64 `json:"button,omitempty" tf:"button,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []TargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	Validate []ValidateInitParameters `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []WaitInitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type ClickObservation struct {

	// (Number) the mouse button to be used for the click
	// the mouse button to be used for the click
	Button *float64 `json:"button,omitempty" tf:"button,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []TargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	Validate []ValidateObservation `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []WaitObservation `json:"wait,omitempty" tf:"wait,omitempty"`
}

type ClickParameters struct {

	// (Number) the mouse button to be used for the click
	// the mouse button to be used for the click
	// +kubebuilder:validation:Optional
	Button *float64 `json:"button" tf:"button,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	// +kubebuilder:validation:Optional
	Target []TargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	// +kubebuilder:validation:Optional
	Validate []ValidateParameters `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	// +kubebuilder:validation:Optional
	Wait []WaitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type ConfigurationInitParameters struct {

	// (Block List, Max: 1) The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	// The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	//
	// If not set, then the Desktop preconfigured device is used
	Bandwidth []BandwidthInitParameters `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// (Set of String) Block these URLs
	// Block these URLs
	// +listType=set
	Block []*string `json:"block,omitempty" tf:"block,omitempty"`

	// (Boolean) Bypass Content Security Policy of monitored pages
	// Bypass Content Security Policy of monitored pages
	BypassCsp *bool `json:"bypassCsp,omitempty" tf:"bypass_csp,omitempty"`

	// (Block List, Max: 1) These cookies are added before execution of the first step (see below for nested schema)
	// These cookies are added before execution of the first step
	Cookies []CookiesInitParameters `json:"cookies,omitempty" tf:"cookies,omitempty"`

	// (Block List, Max: 1) The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	// The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	//
	// If not set, then the Desktop preconfigured device is used
	Device []DeviceInitParameters `json:"device,omitempty" tf:"device,omitempty"`

	// (Boolean) No documentation available
	// No documentation available
	DisableWebSecurity *bool `json:"disableWebSecurity,omitempty" tf:"disable_web_security,omitempty"`

	// (Block List, Max: 1) The list of HTTP headers to be sent with requests of the monitor (see below for nested schema)
	// The list of HTTP headers to be sent with requests of the monitor
	Headers []HeadersInitParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Block List, Max: 1) Ignore specific status codes (see below for nested schema)
	// Ignore specific status codes
	IgnoredErrorCodes []IgnoredErrorCodesInitParameters `json:"ignoredErrorCodes,omitempty" tf:"ignored_error_codes,omitempty"`

	// (Block List, Max: 1) Custom JavaScript Agent settings (see below for nested schema)
	// Custom JavaScript Agent settings
	JavascriptSetttings []JavascriptSetttingsInitParameters `json:"javascriptSetttings,omitempty" tf:"javascript_setttings,omitempty"`

	// (Boolean) Capture performance metrics for pages loaded in frames
	// Capture performance metrics for pages loaded in frames
	MonitorFrames *bool `json:"monitorFrames,omitempty" tf:"monitor_frames,omitempty"`

	// (String) The user agent of the request
	// The user agent of the request
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type ConfigurationObservation struct {

	// (Block List, Max: 1) The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	// The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	//
	// If not set, then the Desktop preconfigured device is used
	Bandwidth []BandwidthObservation `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// (Set of String) Block these URLs
	// Block these URLs
	// +listType=set
	Block []*string `json:"block,omitempty" tf:"block,omitempty"`

	// (Boolean) Bypass Content Security Policy of monitored pages
	// Bypass Content Security Policy of monitored pages
	BypassCsp *bool `json:"bypassCsp,omitempty" tf:"bypass_csp,omitempty"`

	// (Block List, Max: 1) These cookies are added before execution of the first step (see below for nested schema)
	// These cookies are added before execution of the first step
	Cookies []CookiesObservation `json:"cookies,omitempty" tf:"cookies,omitempty"`

	// (Block List, Max: 1) The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	// The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	//
	// If not set, then the Desktop preconfigured device is used
	Device []DeviceObservation `json:"device,omitempty" tf:"device,omitempty"`

	// (Boolean) No documentation available
	// No documentation available
	DisableWebSecurity *bool `json:"disableWebSecurity,omitempty" tf:"disable_web_security,omitempty"`

	// (Block List, Max: 1) The list of HTTP headers to be sent with requests of the monitor (see below for nested schema)
	// The list of HTTP headers to be sent with requests of the monitor
	Headers []HeadersObservation `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Block List, Max: 1) Ignore specific status codes (see below for nested schema)
	// Ignore specific status codes
	IgnoredErrorCodes []IgnoredErrorCodesObservation `json:"ignoredErrorCodes,omitempty" tf:"ignored_error_codes,omitempty"`

	// (Block List, Max: 1) Custom JavaScript Agent settings (see below for nested schema)
	// Custom JavaScript Agent settings
	JavascriptSetttings []JavascriptSetttingsObservation `json:"javascriptSetttings,omitempty" tf:"javascript_setttings,omitempty"`

	// (Boolean) Capture performance metrics for pages loaded in frames
	// Capture performance metrics for pages loaded in frames
	MonitorFrames *bool `json:"monitorFrames,omitempty" tf:"monitor_frames,omitempty"`

	// (String) The user agent of the request
	// The user agent of the request
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type ConfigurationParameters struct {

	// (Block List, Max: 1) The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	// The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	//
	// If not set, then the Desktop preconfigured device is used
	// +kubebuilder:validation:Optional
	Bandwidth []BandwidthParameters `json:"bandwidth,omitempty" tf:"bandwidth,omitempty"`

	// (Set of String) Block these URLs
	// Block these URLs
	// +kubebuilder:validation:Optional
	// +listType=set
	Block []*string `json:"block,omitempty" tf:"block,omitempty"`

	// (Boolean) Bypass Content Security Policy of monitored pages
	// Bypass Content Security Policy of monitored pages
	// +kubebuilder:validation:Optional
	BypassCsp *bool `json:"bypassCsp,omitempty" tf:"bypass_csp,omitempty"`

	// (Block List, Max: 1) These cookies are added before execution of the first step (see below for nested schema)
	// These cookies are added before execution of the first step
	// +kubebuilder:validation:Optional
	Cookies []CookiesParameters `json:"cookies,omitempty" tf:"cookies,omitempty"`

	// (Block List, Max: 1) The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	// The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
	//
	// If not set, then the Desktop preconfigured device is used
	// +kubebuilder:validation:Optional
	Device []DeviceParameters `json:"device,omitempty" tf:"device,omitempty"`

	// (Boolean) No documentation available
	// No documentation available
	// +kubebuilder:validation:Optional
	DisableWebSecurity *bool `json:"disableWebSecurity,omitempty" tf:"disable_web_security,omitempty"`

	// (Block List, Max: 1) The list of HTTP headers to be sent with requests of the monitor (see below for nested schema)
	// The list of HTTP headers to be sent with requests of the monitor
	// +kubebuilder:validation:Optional
	Headers []HeadersParameters `json:"headers,omitempty" tf:"headers,omitempty"`

	// (Block List, Max: 1) Ignore specific status codes (see below for nested schema)
	// Ignore specific status codes
	// +kubebuilder:validation:Optional
	IgnoredErrorCodes []IgnoredErrorCodesParameters `json:"ignoredErrorCodes,omitempty" tf:"ignored_error_codes,omitempty"`

	// (Block List, Max: 1) Custom JavaScript Agent settings (see below for nested schema)
	// Custom JavaScript Agent settings
	// +kubebuilder:validation:Optional
	JavascriptSetttings []JavascriptSetttingsParameters `json:"javascriptSetttings,omitempty" tf:"javascript_setttings,omitempty"`

	// (Boolean) Capture performance metrics for pages loaded in frames
	// Capture performance metrics for pages loaded in frames
	// +kubebuilder:validation:Optional
	MonitorFrames *bool `json:"monitorFrames,omitempty" tf:"monitor_frames,omitempty"`

	// (String) The user agent of the request
	// The user agent of the request
	// +kubebuilder:validation:Optional
	UserAgent *string `json:"userAgent,omitempty" tf:"user_agent,omitempty"`
}

type CookieCookiesInitParameters struct {

	// (Block List, Min: 1) A request cookie (see below for nested schema)
	// A request cookie
	Cookie []CookiesCookieInitParameters `json:"cookie,omitempty" tf:"cookie,omitempty"`
}

type CookieCookiesObservation struct {

	// (Block List, Min: 1) A request cookie (see below for nested schema)
	// A request cookie
	Cookie []CookiesCookieObservation `json:"cookie,omitempty" tf:"cookie,omitempty"`
}

type CookieCookiesParameters struct {

	// (Block List, Min: 1) A request cookie (see below for nested schema)
	// A request cookie
	// +kubebuilder:validation:Optional
	Cookie []CookiesCookieParameters `json:"cookie" tf:"cookie,omitempty"`
}

type CookieInitParameters struct {

	// (String) The domain of the cookie.
	// The domain of the cookie.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) The name of the monitor.
	// The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The path of the cookie.
	// The path of the cookie.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CookieObservation struct {

	// (String) The domain of the cookie.
	// The domain of the cookie.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) The name of the monitor.
	// The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The path of the cookie.
	// The path of the cookie.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CookieParameters struct {

	// (String) The domain of the cookie.
	// The domain of the cookie.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// (String) The name of the monitor.
	// The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The path of the cookie.
	// The path of the cookie.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type CookiesCookieInitParameters struct {

	// (String) The domain of the cookie.
	// The domain of the cookie.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) The name of the monitor.
	// The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The path of the cookie.
	// The path of the cookie.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CookiesCookieObservation struct {

	// (String) The domain of the cookie.
	// The domain of the cookie.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// (String) The name of the monitor.
	// The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The path of the cookie.
	// The path of the cookie.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CookiesCookieParameters struct {

	// (String) The domain of the cookie.
	// The domain of the cookie.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// (String) The name of the monitor.
	// The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The path of the cookie.
	// The path of the cookie.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type CookiesInitParameters struct {

	// (Block List, Min: 1) A request cookie (see below for nested schema)
	// A request cookie
	Cookie []CookieInitParameters `json:"cookie,omitempty" tf:"cookie,omitempty"`
}

type CookiesObservation struct {

	// (Block List, Min: 1) A request cookie (see below for nested schema)
	// A request cookie
	Cookie []CookieObservation `json:"cookie,omitempty" tf:"cookie,omitempty"`
}

type CookiesParameters struct {

	// (Block List, Min: 1) A request cookie (see below for nested schema)
	// A request cookie
	// +kubebuilder:validation:Optional
	Cookie []CookieParameters `json:"cookie" tf:"cookie,omitempty"`
}

type CredentialInitParameters struct {

	// (String) Either username or password
	// Either `username` or `password`
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// (String) The ID of the credential within the Credentials Vault
	// The ID of the credential within the Credentials Vault
	VaultID *string `json:"vaultId,omitempty" tf:"vault_id,omitempty"`
}

type CredentialObservation struct {

	// (String) Either username or password
	// Either `username` or `password`
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// (String) The ID of the credential within the Credentials Vault
	// The ID of the credential within the Credentials Vault
	VaultID *string `json:"vaultId,omitempty" tf:"vault_id,omitempty"`
}

type CredentialParameters struct {

	// (String) Either username or password
	// Either `username` or `password`
	// +kubebuilder:validation:Optional
	Field *string `json:"field" tf:"field,omitempty"`

	// (String) The ID of the credential within the Credentials Vault
	// The ID of the credential within the Credentials Vault
	// +kubebuilder:validation:Optional
	VaultID *string `json:"vaultId" tf:"vault_id,omitempty"`
}

type DeviceInitParameters struct {

	// (Number) The height of the screen in pixels.
	// The maximum allowed width is 1080.
	// The height of the screen in pixels.
	// The maximum allowed width is `1080`.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (Boolean) The flag of the mobile device.
	// Set to true for mobile devices or false for a desktop or laptop.
	// The flag of the mobile device.
	// Set to `true` for mobile devices or `false` for a desktop or laptop.
	Mobile *bool `json:"mobile,omitempty" tf:"mobile,omitempty"`

	// (String) The name of the monitor.
	// The name of the preconfigured device—when editing in the browser, press `Crtl+Spacebar` to see the list of available devices
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The orientation of the device. Possible values are portrait or landscape. Desktop and laptop devices are not allowed to use the portrait orientation
	// The orientation of the device. Possible values are `portrait` or `landscape`. Desktop and laptop devices are not allowed to use the `portrait` orientation
	Orientation *string `json:"orientation,omitempty" tf:"orientation,omitempty"`

	// (Number) The pixel ratio of the device.
	// The pixel ratio of the device.
	ScaleFactor *float64 `json:"scaleFactor,omitempty" tf:"scale_factor,omitempty"`

	// (Boolean) The flag of the touchscreen.
	// Set to true if the device uses touchscreen. In that case, use can set interaction event as tap.
	// The flag of the touchscreen.
	// Set to `true` if the device uses touchscreen. In that case, use can set interaction event as `tap`.
	TouchEnabled *bool `json:"touchEnabled,omitempty" tf:"touch_enabled,omitempty"`

	// (Number) The width of the screen in pixels.
	// The maximum allowed width is 1920.
	// The width of the screen in pixels.
	// The maximum allowed width is `1920`.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type DeviceObservation struct {

	// (Number) The height of the screen in pixels.
	// The maximum allowed width is 1080.
	// The height of the screen in pixels.
	// The maximum allowed width is `1080`.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (Boolean) The flag of the mobile device.
	// Set to true for mobile devices or false for a desktop or laptop.
	// The flag of the mobile device.
	// Set to `true` for mobile devices or `false` for a desktop or laptop.
	Mobile *bool `json:"mobile,omitempty" tf:"mobile,omitempty"`

	// (String) The name of the monitor.
	// The name of the preconfigured device—when editing in the browser, press `Crtl+Spacebar` to see the list of available devices
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The orientation of the device. Possible values are portrait or landscape. Desktop and laptop devices are not allowed to use the portrait orientation
	// The orientation of the device. Possible values are `portrait` or `landscape`. Desktop and laptop devices are not allowed to use the `portrait` orientation
	Orientation *string `json:"orientation,omitempty" tf:"orientation,omitempty"`

	// (Number) The pixel ratio of the device.
	// The pixel ratio of the device.
	ScaleFactor *float64 `json:"scaleFactor,omitempty" tf:"scale_factor,omitempty"`

	// (Boolean) The flag of the touchscreen.
	// Set to true if the device uses touchscreen. In that case, use can set interaction event as tap.
	// The flag of the touchscreen.
	// Set to `true` if the device uses touchscreen. In that case, use can set interaction event as `tap`.
	TouchEnabled *bool `json:"touchEnabled,omitempty" tf:"touch_enabled,omitempty"`

	// (Number) The width of the screen in pixels.
	// The maximum allowed width is 1920.
	// The width of the screen in pixels.
	// The maximum allowed width is `1920`.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type DeviceParameters struct {

	// (Number) The height of the screen in pixels.
	// The maximum allowed width is 1080.
	// The height of the screen in pixels.
	// The maximum allowed width is `1080`.
	// +kubebuilder:validation:Optional
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// (Boolean) The flag of the mobile device.
	// Set to true for mobile devices or false for a desktop or laptop.
	// The flag of the mobile device.
	// Set to `true` for mobile devices or `false` for a desktop or laptop.
	// +kubebuilder:validation:Optional
	Mobile *bool `json:"mobile,omitempty" tf:"mobile,omitempty"`

	// (String) The name of the monitor.
	// The name of the preconfigured device—when editing in the browser, press `Crtl+Spacebar` to see the list of available devices
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The orientation of the device. Possible values are portrait or landscape. Desktop and laptop devices are not allowed to use the portrait orientation
	// The orientation of the device. Possible values are `portrait` or `landscape`. Desktop and laptop devices are not allowed to use the `portrait` orientation
	// +kubebuilder:validation:Optional
	Orientation *string `json:"orientation,omitempty" tf:"orientation,omitempty"`

	// (Number) The pixel ratio of the device.
	// The pixel ratio of the device.
	// +kubebuilder:validation:Optional
	ScaleFactor *float64 `json:"scaleFactor,omitempty" tf:"scale_factor,omitempty"`

	// (Boolean) The flag of the touchscreen.
	// Set to true if the device uses touchscreen. In that case, use can set interaction event as tap.
	// The flag of the touchscreen.
	// Set to `true` if the device uses touchscreen. In that case, use can set interaction event as `tap`.
	// +kubebuilder:validation:Optional
	TouchEnabled *bool `json:"touchEnabled,omitempty" tf:"touch_enabled,omitempty"`

	// (Number) The width of the screen in pixels.
	// The maximum allowed width is 1920.
	// The width of the screen in pixels.
	// The maximum allowed width is `1920`.
	// +kubebuilder:validation:Optional
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type EventCookieInitParameters struct {

	// (Block List, Max: 1) These cookies are added before execution of the first step (see below for nested schema)
	// Every cookie must be unique within the list. However, you can use the same cookie again in other event
	Cookies []CookieCookiesInitParameters `json:"cookies,omitempty" tf:"cookies,omitempty"`
}

type EventCookieObservation struct {

	// (Block List, Max: 1) These cookies are added before execution of the first step (see below for nested schema)
	// Every cookie must be unique within the list. However, you can use the same cookie again in other event
	Cookies []CookieCookiesObservation `json:"cookies,omitempty" tf:"cookies,omitempty"`
}

type EventCookieParameters struct {

	// (Block List, Max: 1) These cookies are added before execution of the first step (see below for nested schema)
	// Every cookie must be unique within the list. However, you can use the same cookie again in other event
	// +kubebuilder:validation:Optional
	Cookies []CookieCookiesParameters `json:"cookies" tf:"cookies,omitempty"`
}

type EventInitParameters struct {

	// (Block List, Max: 1) Properties specified for a click event (see below for nested schema)
	// Properties specified for a click event
	Click []ClickInitParameters `json:"click,omitempty" tf:"click,omitempty"`

	// (Block List, Min: 1) A request cookie (see below for nested schema)
	// Properties specified for a cookie event
	Cookie []EventCookieInitParameters `json:"cookie,omitempty" tf:"cookie,omitempty"`

	// (String) A short description of the event to appear in the UI
	// A short description of the event to appear in the UI
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List, Max: 1) Properties specified for a javascript event (see below for nested schema)
	// Properties specified for a javascript event
	Javascript []JavascriptInitParameters `json:"javascript,omitempty" tf:"javascript,omitempty"`

	// (Block List, Max: 1) Properties specified for a key strokes event (see below for nested schema)
	// Properties specified for a key strokes event
	Keystrokes []KeystrokesInitParameters `json:"keystrokes,omitempty" tf:"keystrokes,omitempty"`

	// (Block List, Max: 1) Properties specified for a navigation event (see below for nested schema)
	// Properties specified for a navigation event
	Navigate []NavigateInitParameters `json:"navigate,omitempty" tf:"navigate,omitempty"`

	// (Block List, Max: 1) Properties specified for a key strokes event. (see below for nested schema)
	// Properties specified for a key strokes event.
	Select []SelectInitParameters `json:"select,omitempty" tf:"select,omitempty"`

	// (Block List, Max: 1) Properties specified for a tap event (see below for nested schema)
	// Properties specified for a tap event
	Tap []TapInitParameters `json:"tap,omitempty" tf:"tap,omitempty"`
}

type EventObservation struct {

	// (Block List, Max: 1) Properties specified for a click event (see below for nested schema)
	// Properties specified for a click event
	Click []ClickObservation `json:"click,omitempty" tf:"click,omitempty"`

	// (Block List, Min: 1) A request cookie (see below for nested schema)
	// Properties specified for a cookie event
	Cookie []EventCookieObservation `json:"cookie,omitempty" tf:"cookie,omitempty"`

	// (String) A short description of the event to appear in the UI
	// A short description of the event to appear in the UI
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List, Max: 1) Properties specified for a javascript event (see below for nested schema)
	// Properties specified for a javascript event
	Javascript []JavascriptObservation `json:"javascript,omitempty" tf:"javascript,omitempty"`

	// (Block List, Max: 1) Properties specified for a key strokes event (see below for nested schema)
	// Properties specified for a key strokes event
	Keystrokes []KeystrokesObservation `json:"keystrokes,omitempty" tf:"keystrokes,omitempty"`

	// (Block List, Max: 1) Properties specified for a navigation event (see below for nested schema)
	// Properties specified for a navigation event
	Navigate []NavigateObservation `json:"navigate,omitempty" tf:"navigate,omitempty"`

	// (Block List, Max: 1) Properties specified for a key strokes event. (see below for nested schema)
	// Properties specified for a key strokes event.
	Select []SelectObservation `json:"select,omitempty" tf:"select,omitempty"`

	// (Block List, Max: 1) Properties specified for a tap event (see below for nested schema)
	// Properties specified for a tap event
	Tap []TapObservation `json:"tap,omitempty" tf:"tap,omitempty"`
}

type EventParameters struct {

	// (Block List, Max: 1) Properties specified for a click event (see below for nested schema)
	// Properties specified for a click event
	// +kubebuilder:validation:Optional
	Click []ClickParameters `json:"click,omitempty" tf:"click,omitempty"`

	// (Block List, Min: 1) A request cookie (see below for nested schema)
	// Properties specified for a cookie event
	// +kubebuilder:validation:Optional
	Cookie []EventCookieParameters `json:"cookie,omitempty" tf:"cookie,omitempty"`

	// (String) A short description of the event to appear in the UI
	// A short description of the event to appear in the UI
	// +kubebuilder:validation:Optional
	Description *string `json:"description" tf:"description,omitempty"`

	// (Block List, Max: 1) Properties specified for a javascript event (see below for nested schema)
	// Properties specified for a javascript event
	// +kubebuilder:validation:Optional
	Javascript []JavascriptParameters `json:"javascript,omitempty" tf:"javascript,omitempty"`

	// (Block List, Max: 1) Properties specified for a key strokes event (see below for nested schema)
	// Properties specified for a key strokes event
	// +kubebuilder:validation:Optional
	Keystrokes []KeystrokesParameters `json:"keystrokes,omitempty" tf:"keystrokes,omitempty"`

	// (Block List, Max: 1) Properties specified for a navigation event (see below for nested schema)
	// Properties specified for a navigation event
	// +kubebuilder:validation:Optional
	Navigate []NavigateParameters `json:"navigate,omitempty" tf:"navigate,omitempty"`

	// (Block List, Max: 1) Properties specified for a key strokes event. (see below for nested schema)
	// Properties specified for a key strokes event.
	// +kubebuilder:validation:Optional
	Select []SelectParameters `json:"select,omitempty" tf:"select,omitempty"`

	// (Block List, Max: 1) Properties specified for a tap event (see below for nested schema)
	// Properties specified for a tap event
	// +kubebuilder:validation:Optional
	Tap []TapParameters `json:"tap,omitempty" tf:"tap,omitempty"`
}

type EventsInitParameters struct {

	// (Block List) An event (see below for nested schema)
	// An event
	Event []EventInitParameters `json:"event,omitempty" tf:"event,omitempty"`
}

type EventsObservation struct {

	// (Block List) An event (see below for nested schema)
	// An event
	Event []EventObservation `json:"event,omitempty" tf:"event,omitempty"`
}

type EventsParameters struct {

	// (Block List) An event (see below for nested schema)
	// An event
	// +kubebuilder:validation:Optional
	Event []EventParameters `json:"event,omitempty" tf:"event,omitempty"`
}

type GlobalOutagePolicyInitParameters struct {

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	ConsecutiveRuns *float64 `json:"consecutiveRuns,omitempty" tf:"consecutive_runs,omitempty"`
}

type GlobalOutagePolicyObservation struct {

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	ConsecutiveRuns *float64 `json:"consecutiveRuns,omitempty" tf:"consecutive_runs,omitempty"`
}

type GlobalOutagePolicyParameters struct {

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	// +kubebuilder:validation:Optional
	ConsecutiveRuns *float64 `json:"consecutiveRuns" tf:"consecutive_runs,omitempty"`
}

type HeaderInitParameters struct {

	// (String) The name of the monitor.
	// The key of the header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the header
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderObservation struct {

	// (String) The name of the monitor.
	// The key of the header
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the header
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HeaderParameters struct {

	// (String) The name of the monitor.
	// The key of the header
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the header
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type HeadersInitParameters struct {

	// (Block Set, Min: 1) contains an HTTP header of the request (see below for nested schema)
	// contains an HTTP header of the request
	Header []HeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	// (Set of String) Restrict applying headers to a set of URLs
	// Restrict applying headers to a set of URLs
	// +listType=set
	Restrictions []*string `json:"restrictions,omitempty" tf:"restrictions,omitempty"`
}

type HeadersObservation struct {

	// (Block Set, Min: 1) contains an HTTP header of the request (see below for nested schema)
	// contains an HTTP header of the request
	Header []HeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	// (Set of String) Restrict applying headers to a set of URLs
	// Restrict applying headers to a set of URLs
	// +listType=set
	Restrictions []*string `json:"restrictions,omitempty" tf:"restrictions,omitempty"`
}

type HeadersParameters struct {

	// (Block Set, Min: 1) contains an HTTP header of the request (see below for nested schema)
	// contains an HTTP header of the request
	// +kubebuilder:validation:Optional
	Header []HeaderParameters `json:"header" tf:"header,omitempty"`

	// (Set of String) Restrict applying headers to a set of URLs
	// Restrict applying headers to a set of URLs
	// +kubebuilder:validation:Optional
	// +listType=set
	Restrictions []*string `json:"restrictions,omitempty" tf:"restrictions,omitempty"`
}

type IgnoredErrorCodesInitParameters struct {

	// (String) Only apply to document request matching this regex
	// Only apply to document request matching this regex
	MatchingDocumentRequests *string `json:"matchingDocumentRequests,omitempty" tf:"matching_document_requests,omitempty"`

	// 410, 5xx
	// You can use exact number, range or status class mask. Multiple values can be separated by comma, i.e. 404, 405-410, 5xx
	StatusCodes *string `json:"statusCodes,omitempty" tf:"status_codes,omitempty"`
}

type IgnoredErrorCodesObservation struct {

	// (String) Only apply to document request matching this regex
	// Only apply to document request matching this regex
	MatchingDocumentRequests *string `json:"matchingDocumentRequests,omitempty" tf:"matching_document_requests,omitempty"`

	// 410, 5xx
	// You can use exact number, range or status class mask. Multiple values can be separated by comma, i.e. 404, 405-410, 5xx
	StatusCodes *string `json:"statusCodes,omitempty" tf:"status_codes,omitempty"`
}

type IgnoredErrorCodesParameters struct {

	// (String) Only apply to document request matching this regex
	// Only apply to document request matching this regex
	// +kubebuilder:validation:Optional
	MatchingDocumentRequests *string `json:"matchingDocumentRequests,omitempty" tf:"matching_document_requests,omitempty"`

	// 410, 5xx
	// You can use exact number, range or status class mask. Multiple values can be separated by comma, i.e. 404, 405-410, 5xx
	// +kubebuilder:validation:Optional
	StatusCodes *string `json:"statusCodes" tf:"status_codes,omitempty"`
}

type JavascriptInitParameters struct {

	// (String) The JavaScript code to be executed in this event
	// The JavaScript code to be executed in this event
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []JavascriptTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []JavascriptWaitInitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type JavascriptObservation struct {

	// (String) The JavaScript code to be executed in this event
	// The JavaScript code to be executed in this event
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []JavascriptTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []JavascriptWaitObservation `json:"wait,omitempty" tf:"wait,omitempty"`
}

type JavascriptParameters struct {

	// (String) The JavaScript code to be executed in this event
	// The JavaScript code to be executed in this event
	// +kubebuilder:validation:Optional
	Code *string `json:"code" tf:"code,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	// +kubebuilder:validation:Optional
	Target []JavascriptTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	// +kubebuilder:validation:Optional
	Wait []JavascriptWaitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type JavascriptSetttingsInitParameters struct {

	// (String) Additional Javascript Agent Properties
	// Additional Javascript Agent Properties
	CustomProperties *string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// (Block List, Max: 1) Custom JavaScript Agent settings (see below for nested schema)
	// Custom JavaScript Agent settings
	TimeoutSettings []TimeoutSettingsInitParameters `json:"timeoutSettings,omitempty" tf:"timeout_settings,omitempty"`

	// (Block List, Max: 1) Parameters for Visually complete and Speed index calculation (see below for nested schema)
	// Parameters for Visually complete and Speed index calculation
	VisuallyCompleteOptions []VisuallyCompleteOptionsInitParameters `json:"visuallyCompleteOptions,omitempty" tf:"visually_complete_options,omitempty"`
}

type JavascriptSetttingsObservation struct {

	// (String) Additional Javascript Agent Properties
	// Additional Javascript Agent Properties
	CustomProperties *string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// (Block List, Max: 1) Custom JavaScript Agent settings (see below for nested schema)
	// Custom JavaScript Agent settings
	TimeoutSettings []TimeoutSettingsObservation `json:"timeoutSettings,omitempty" tf:"timeout_settings,omitempty"`

	// (Block List, Max: 1) Parameters for Visually complete and Speed index calculation (see below for nested schema)
	// Parameters for Visually complete and Speed index calculation
	VisuallyCompleteOptions []VisuallyCompleteOptionsObservation `json:"visuallyCompleteOptions,omitempty" tf:"visually_complete_options,omitempty"`
}

type JavascriptSetttingsParameters struct {

	// (String) Additional Javascript Agent Properties
	// Additional Javascript Agent Properties
	// +kubebuilder:validation:Optional
	CustomProperties *string `json:"customProperties,omitempty" tf:"custom_properties,omitempty"`

	// (Block List, Max: 1) Custom JavaScript Agent settings (see below for nested schema)
	// Custom JavaScript Agent settings
	// +kubebuilder:validation:Optional
	TimeoutSettings []TimeoutSettingsParameters `json:"timeoutSettings,omitempty" tf:"timeout_settings,omitempty"`

	// (Block List, Max: 1) Parameters for Visually complete and Speed index calculation (see below for nested schema)
	// Parameters for Visually complete and Speed index calculation
	// +kubebuilder:validation:Optional
	VisuallyCompleteOptions []VisuallyCompleteOptionsParameters `json:"visuallyCompleteOptions,omitempty" tf:"visually_complete_options,omitempty"`
}

type JavascriptTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []JavascriptTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type JavascriptTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []JavascriptTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type JavascriptTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type JavascriptTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type JavascriptTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type JavascriptTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []JavascriptTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type JavascriptTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []JavascriptTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type JavascriptTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []JavascriptTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type JavascriptTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []JavascriptTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type JavascriptWaitInitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []JavascriptWaitValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type JavascriptWaitObservation struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []JavascriptWaitValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type JavascriptWaitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []JavascriptWaitValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	// +kubebuilder:validation:Optional
	WaitFor *string `json:"waitFor" tf:"wait_for,omitempty"`
}

type JavascriptWaitValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []JavascriptWaitValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type JavascriptWaitValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []JavascriptWaitValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type JavascriptWaitValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []JavascriptWaitValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type JavascriptWaitValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []WaitValidationTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type JavascriptWaitValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []WaitValidationTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type JavascriptWaitValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []WaitValidationTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type KeyPerformanceMetricsInitParameters struct {

	// (String) Defines the key performance metric for load actions. Supported values are VISUALLY_COMPLETE, SPEED_INDEX, USER_ACTION_DURATION, TIME_TO_FIRST_BYTE, HTML_DOWNLOADED, DOM_INTERACTIVE, LOAD_EVENT_START and LOAD_EVENT_END.
	// Defines the key performance metric for load actions. Supported values are `VISUALLY_COMPLETE`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE`, `HTML_DOWNLOADED`, `DOM_INTERACTIVE`, `LOAD_EVENT_START` and `LOAD_EVENT_END`.
	LoadActionKpm *string `json:"loadActionKpm,omitempty" tf:"load_action_kpm,omitempty"`

	// (String) Defines the key performance metric for XHR actions. Supported values are VISUALLY_COMPLETE, USER_ACTION_DURATION, TIME_TO_FIRST_BYTE and RESPONSE_END.
	// Defines the key performance metric for XHR actions. Supported values are `VISUALLY_COMPLETE`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE` and `RESPONSE_END`.
	XhrActionKpm *string `json:"xhrActionKpm,omitempty" tf:"xhr_action_kpm,omitempty"`
}

type KeyPerformanceMetricsObservation struct {

	// (String) Defines the key performance metric for load actions. Supported values are VISUALLY_COMPLETE, SPEED_INDEX, USER_ACTION_DURATION, TIME_TO_FIRST_BYTE, HTML_DOWNLOADED, DOM_INTERACTIVE, LOAD_EVENT_START and LOAD_EVENT_END.
	// Defines the key performance metric for load actions. Supported values are `VISUALLY_COMPLETE`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE`, `HTML_DOWNLOADED`, `DOM_INTERACTIVE`, `LOAD_EVENT_START` and `LOAD_EVENT_END`.
	LoadActionKpm *string `json:"loadActionKpm,omitempty" tf:"load_action_kpm,omitempty"`

	// (String) Defines the key performance metric for XHR actions. Supported values are VISUALLY_COMPLETE, USER_ACTION_DURATION, TIME_TO_FIRST_BYTE and RESPONSE_END.
	// Defines the key performance metric for XHR actions. Supported values are `VISUALLY_COMPLETE`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE` and `RESPONSE_END`.
	XhrActionKpm *string `json:"xhrActionKpm,omitempty" tf:"xhr_action_kpm,omitempty"`
}

type KeyPerformanceMetricsParameters struct {

	// (String) Defines the key performance metric for load actions. Supported values are VISUALLY_COMPLETE, SPEED_INDEX, USER_ACTION_DURATION, TIME_TO_FIRST_BYTE, HTML_DOWNLOADED, DOM_INTERACTIVE, LOAD_EVENT_START and LOAD_EVENT_END.
	// Defines the key performance metric for load actions. Supported values are `VISUALLY_COMPLETE`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE`, `HTML_DOWNLOADED`, `DOM_INTERACTIVE`, `LOAD_EVENT_START` and `LOAD_EVENT_END`.
	// +kubebuilder:validation:Optional
	LoadActionKpm *string `json:"loadActionKpm" tf:"load_action_kpm,omitempty"`

	// (String) Defines the key performance metric for XHR actions. Supported values are VISUALLY_COMPLETE, USER_ACTION_DURATION, TIME_TO_FIRST_BYTE and RESPONSE_END.
	// Defines the key performance metric for XHR actions. Supported values are `VISUALLY_COMPLETE`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE` and `RESPONSE_END`.
	// +kubebuilder:validation:Optional
	XhrActionKpm *string `json:"xhrActionKpm" tf:"xhr_action_kpm,omitempty"`
}

type KeystrokesInitParameters struct {

	// (Block List, Max: 1) Credentials for this event (see below for nested schema)
	// Credentials for this event
	Credential []CredentialInitParameters `json:"credential,omitempty" tf:"credential,omitempty"`

	// (Boolean) Indicates whether the textValue is encrypted (true) or not (false). Must not be specified if credentials from the vault are being used
	// Indicates whether the `textValue` is encrypted (`true`) or not (`false`). Must not be specified if `credentials` from the vault are being used
	Masked *bool `json:"masked,omitempty" tf:"masked,omitempty"`

	// (Boolean) Defines whether to blur the text field when it loses focus.
	// Set to true to trigger the blur the textValue
	// Defines whether to blur the text field when it loses focus.
	// Set to `true` to trigger the blur the `textValue`
	SimulateBlurEvent *bool `json:"simulateBlurEvent,omitempty" tf:"simulate_blur_event,omitempty"`

	// (Boolean) Simulates pressing the 'Return' key after simulating other keystrokes. For example, to submit a form or trigger a login.
	// Simulates pressing the 'Return' key after simulating other keystrokes. For example, to submit a form or trigger a login.
	SimulateReturnKey *bool `json:"simulateReturnKey,omitempty" tf:"simulate_return_key,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []KeystrokesTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The text to enter. Must not be specified if credentials from the vault are being used
	// The text to enter. Must not be specified if `credentials` from the vault are being used
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	Validate []KeystrokesValidateInitParameters `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []KeystrokesWaitInitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type KeystrokesObservation struct {

	// (Block List, Max: 1) Credentials for this event (see below for nested schema)
	// Credentials for this event
	Credential []CredentialObservation `json:"credential,omitempty" tf:"credential,omitempty"`

	// (Boolean) Indicates whether the textValue is encrypted (true) or not (false). Must not be specified if credentials from the vault are being used
	// Indicates whether the `textValue` is encrypted (`true`) or not (`false`). Must not be specified if `credentials` from the vault are being used
	Masked *bool `json:"masked,omitempty" tf:"masked,omitempty"`

	// (Boolean) Defines whether to blur the text field when it loses focus.
	// Set to true to trigger the blur the textValue
	// Defines whether to blur the text field when it loses focus.
	// Set to `true` to trigger the blur the `textValue`
	SimulateBlurEvent *bool `json:"simulateBlurEvent,omitempty" tf:"simulate_blur_event,omitempty"`

	// (Boolean) Simulates pressing the 'Return' key after simulating other keystrokes. For example, to submit a form or trigger a login.
	// Simulates pressing the 'Return' key after simulating other keystrokes. For example, to submit a form or trigger a login.
	SimulateReturnKey *bool `json:"simulateReturnKey,omitempty" tf:"simulate_return_key,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []KeystrokesTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The text to enter. Must not be specified if credentials from the vault are being used
	// The text to enter. Must not be specified if `credentials` from the vault are being used
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	Validate []KeystrokesValidateObservation `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []KeystrokesWaitObservation `json:"wait,omitempty" tf:"wait,omitempty"`
}

type KeystrokesParameters struct {

	// (Block List, Max: 1) Credentials for this event (see below for nested schema)
	// Credentials for this event
	// +kubebuilder:validation:Optional
	Credential []CredentialParameters `json:"credential,omitempty" tf:"credential,omitempty"`

	// (Boolean) Indicates whether the textValue is encrypted (true) or not (false). Must not be specified if credentials from the vault are being used
	// Indicates whether the `textValue` is encrypted (`true`) or not (`false`). Must not be specified if `credentials` from the vault are being used
	// +kubebuilder:validation:Optional
	Masked *bool `json:"masked,omitempty" tf:"masked,omitempty"`

	// (Boolean) Defines whether to blur the text field when it loses focus.
	// Set to true to trigger the blur the textValue
	// Defines whether to blur the text field when it loses focus.
	// Set to `true` to trigger the blur the `textValue`
	// +kubebuilder:validation:Optional
	SimulateBlurEvent *bool `json:"simulateBlurEvent,omitempty" tf:"simulate_blur_event,omitempty"`

	// (Boolean) Simulates pressing the 'Return' key after simulating other keystrokes. For example, to submit a form or trigger a login.
	// Simulates pressing the 'Return' key after simulating other keystrokes. For example, to submit a form or trigger a login.
	// +kubebuilder:validation:Optional
	SimulateReturnKey *bool `json:"simulateReturnKey,omitempty" tf:"simulate_return_key,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	// +kubebuilder:validation:Optional
	Target []KeystrokesTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The text to enter. Must not be specified if credentials from the vault are being used
	// The text to enter. Must not be specified if `credentials` from the vault are being used
	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	// +kubebuilder:validation:Optional
	Validate []KeystrokesValidateParameters `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	// +kubebuilder:validation:Optional
	Wait []KeystrokesWaitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type KeystrokesTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []KeystrokesTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type KeystrokesTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []KeystrokesTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type KeystrokesTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type KeystrokesTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type KeystrokesTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type KeystrokesTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []KeystrokesTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type KeystrokesTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []KeystrokesTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type KeystrokesTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []KeystrokesTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type KeystrokesTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []KeystrokesTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type KeystrokesValidateInitParameters struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []ValidateValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type KeystrokesValidateObservation struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []ValidateValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type KeystrokesValidateParameters struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []ValidateValidationParameters `json:"validation" tf:"validation,omitempty"`
}

type KeystrokesWaitInitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []KeystrokesWaitValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type KeystrokesWaitObservation struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []KeystrokesWaitValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type KeystrokesWaitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []KeystrokesWaitValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	// +kubebuilder:validation:Optional
	WaitFor *string `json:"waitFor" tf:"wait_for,omitempty"`
}

type KeystrokesWaitValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []KeystrokesWaitValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type KeystrokesWaitValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []KeystrokesWaitValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type KeystrokesWaitValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []KeystrokesWaitValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type KeystrokesWaitValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []KeystrokesWaitValidationTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type KeystrokesWaitValidationTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []WaitValidationTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type KeystrokesWaitValidationTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []WaitValidationTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type KeystrokesWaitValidationTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []WaitValidationTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type KeystrokesWaitValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []KeystrokesWaitValidationTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type KeystrokesWaitValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []KeystrokesWaitValidationTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type LoadingTimeThresholdsInitParameters struct {

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// Performance threshold is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Thresholds []ThresholdsInitParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type LoadingTimeThresholdsObservation struct {

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// Performance threshold is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Thresholds []ThresholdsObservation `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type LoadingTimeThresholdsParameters struct {

	// (Boolean) The monitor is enabled (true) or disabled (false).
	// Performance threshold is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Block List) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	// +kubebuilder:validation:Optional
	Thresholds []ThresholdsParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`
}

type LocalOutagePolicyInitParameters struct {

	// (Number) The number of affected locations to trigger an alert
	// The number of affected locations to trigger an alert
	AffectedLocations *float64 `json:"affectedLocations,omitempty" tf:"affected_locations,omitempty"`

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	ConsecutiveRuns *float64 `json:"consecutiveRuns,omitempty" tf:"consecutive_runs,omitempty"`
}

type LocalOutagePolicyObservation struct {

	// (Number) The number of affected locations to trigger an alert
	// The number of affected locations to trigger an alert
	AffectedLocations *float64 `json:"affectedLocations,omitempty" tf:"affected_locations,omitempty"`

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	ConsecutiveRuns *float64 `json:"consecutiveRuns,omitempty" tf:"consecutive_runs,omitempty"`
}

type LocalOutagePolicyParameters struct {

	// (Number) The number of affected locations to trigger an alert
	// The number of affected locations to trigger an alert
	// +kubebuilder:validation:Optional
	AffectedLocations *float64 `json:"affectedLocations" tf:"affected_locations,omitempty"`

	// (Number) The number of consecutive fails to trigger an alert
	// The number of consecutive fails to trigger an alert
	// +kubebuilder:validation:Optional
	ConsecutiveRuns *float64 `json:"consecutiveRuns" tf:"consecutive_runs,omitempty"`
}

type LocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type LocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []LocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type LocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type LocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []LocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type LocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []LocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type NavigateInitParameters struct {

	// (Block List, Max: 1) The login credentials to bypass the browser login mask (see below for nested schema)
	// The login credentials to bypass the browser login mask
	Authentication []AuthenticationInitParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []NavigateTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The URL to navigate to
	// The URL to navigate to
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	Validate []NavigateValidateInitParameters `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []NavigateWaitInitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type NavigateObservation struct {

	// (Block List, Max: 1) The login credentials to bypass the browser login mask (see below for nested schema)
	// The login credentials to bypass the browser login mask
	Authentication []AuthenticationObservation `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []NavigateTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The URL to navigate to
	// The URL to navigate to
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	Validate []NavigateValidateObservation `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []NavigateWaitObservation `json:"wait,omitempty" tf:"wait,omitempty"`
}

type NavigateParameters struct {

	// (Block List, Max: 1) The login credentials to bypass the browser login mask (see below for nested schema)
	// The login credentials to bypass the browser login mask
	// +kubebuilder:validation:Optional
	Authentication []AuthenticationParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	// +kubebuilder:validation:Optional
	Target []NavigateTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The URL to navigate to
	// The URL to navigate to
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	// +kubebuilder:validation:Optional
	Validate []NavigateValidateParameters `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	// +kubebuilder:validation:Optional
	Wait []NavigateWaitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type NavigateTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []NavigateTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type NavigateTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []NavigateTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type NavigateTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NavigateTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NavigateTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type NavigateTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []NavigateTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type NavigateTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []NavigateTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type NavigateTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []NavigateTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type NavigateTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []NavigateTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type NavigateValidateInitParameters struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []NavigateValidateValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type NavigateValidateObservation struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []NavigateValidateValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type NavigateValidateParameters struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []NavigateValidateValidationParameters `json:"validation" tf:"validation,omitempty"`
}

type NavigateValidateValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []NavigateValidateValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NavigateValidateValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []NavigateValidateValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NavigateValidateValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []NavigateValidateValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NavigateValidateValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []NavigateValidateValidationTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type NavigateValidateValidationTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []NavigateValidateValidationTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type NavigateValidateValidationTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NavigateValidateValidationTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NavigateValidateValidationTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type NavigateValidateValidationTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []NavigateValidateValidationTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type NavigateValidateValidationTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []NavigateValidateValidationTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type NavigateValidateValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []NavigateValidateValidationTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type NavigateValidateValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []NavigateValidateValidationTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type NavigateWaitInitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []NavigateWaitValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type NavigateWaitObservation struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []NavigateWaitValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type NavigateWaitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []NavigateWaitValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	// +kubebuilder:validation:Optional
	WaitFor *string `json:"waitFor" tf:"wait_for,omitempty"`
}

type NavigateWaitValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []NavigateWaitValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NavigateWaitValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []NavigateWaitValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NavigateWaitValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []NavigateWaitValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NavigateWaitValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []NavigateWaitValidationTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type NavigateWaitValidationTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []NavigateWaitValidationTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type NavigateWaitValidationTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NavigateWaitValidationTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NavigateWaitValidationTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type NavigateWaitValidationTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []NavigateWaitValidationTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type NavigateWaitValidationTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []NavigateWaitValidationTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type NavigateWaitValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []NavigateWaitValidationTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type NavigateWaitValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []NavigateWaitValidationTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type OptionInitParameters struct {

	// (Number) The index of the option to be selected
	// The index of the option to be selected
	Index *float64 `json:"index,omitempty" tf:"index,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the option to be selected
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OptionObservation struct {

	// (Number) The index of the option to be selected
	// The index of the option to be selected
	Index *float64 `json:"index,omitempty" tf:"index,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the option to be selected
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OptionParameters struct {

	// (Number) The index of the option to be selected
	// The index of the option to be selected
	// +kubebuilder:validation:Optional
	Index *float64 `json:"index" tf:"index,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the option to be selected
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type OutageHandlingInitParameters struct {

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable at all configured locations
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
	GlobalOutage *bool `json:"globalOutage,omitempty" tf:"global_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Global outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Global outage handling configuration.
	//
	// Alert if **consecutiveRuns** times consecutively
	GlobalOutagePolicy []GlobalOutagePolicyInitParameters `json:"globalOutagePolicy,omitempty" tf:"global_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	LocalOutage *bool `json:"localOutage,omitempty" tf:"local_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Local outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Local outage handling configuration.
	//
	// Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
	LocalOutagePolicy []LocalOutagePolicyInitParameters `json:"localOutagePolicy,omitempty" tf:"local_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	RetryOnError *bool `json:"retryOnError,omitempty" tf:"retry_on_error,omitempty"`
}

type OutageHandlingObservation struct {

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable at all configured locations
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
	GlobalOutage *bool `json:"globalOutage,omitempty" tf:"global_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Global outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Global outage handling configuration.
	//
	// Alert if **consecutiveRuns** times consecutively
	GlobalOutagePolicy []GlobalOutagePolicyObservation `json:"globalOutagePolicy,omitempty" tf:"global_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	LocalOutage *bool `json:"localOutage,omitempty" tf:"local_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Local outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Local outage handling configuration.
	//
	// Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
	LocalOutagePolicy []LocalOutagePolicyObservation `json:"localOutagePolicy,omitempty" tf:"local_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	RetryOnError *bool `json:"retryOnError,omitempty" tf:"retry_on_error,omitempty"`
}

type OutageHandlingParameters struct {

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable at all configured locations
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
	// +kubebuilder:validation:Optional
	GlobalOutage *bool `json:"globalOutage,omitempty" tf:"global_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Global outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Global outage handling configuration.
	//
	// Alert if **consecutiveRuns** times consecutively
	// +kubebuilder:validation:Optional
	GlobalOutagePolicy []GlobalOutagePolicyParameters `json:"globalOutagePolicy,omitempty" tf:"global_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) When enabled (true), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable for one or more consecutive runs at any location
	// +kubebuilder:validation:Optional
	LocalOutage *bool `json:"localOutage,omitempty" tf:"local_outage,omitempty"`

	// (Block List) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Local outage handling configuration.
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Local outage handling configuration.
	//
	// Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively
	// +kubebuilder:validation:Optional
	LocalOutagePolicy []LocalOutagePolicyParameters `json:"localOutagePolicy,omitempty" tf:"local_outage_policy,omitempty"`

	// (Boolean) (Field has overlap with dynatrace_browser_monitor_outage and dynatrace_http_monitor_outage) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	// (Field has overlap with `dynatrace_browser_monitor_outage` and `dynatrace_http_monitor_outage`) Schedule retry if browser monitor execution results in a fail. For HTTP monitors this property is ignored
	// +kubebuilder:validation:Optional
	RetryOnError *bool `json:"retryOnError,omitempty" tf:"retry_on_error,omitempty"`
}

type ScriptInitParameters struct {

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	Configuration []ConfigurationInitParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (Block List, Max: 1) Steps of the clickpath—the first step must always be of the navigate type (see below for nested schema)
	// Steps of the clickpath—the first step must always be of the `navigate` type
	Events []EventsInitParameters `json:"events,omitempty" tf:"events,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ScriptObservation struct {

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	Configuration []ConfigurationObservation `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (Block List, Max: 1) Steps of the clickpath—the first step must always be of the navigate type (see below for nested schema)
	// Steps of the clickpath—the first step must always be of the `navigate` type
	Events []EventsObservation `json:"events,omitempty" tf:"events,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ScriptParameters struct {

	// (Block List, Max: 1) The setup of the monitor (see below for nested schema)
	// The setup of the monitor
	// +kubebuilder:validation:Optional
	Configuration []ConfigurationParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// (Block List, Max: 1) Steps of the clickpath—the first step must always be of the navigate type (see below for nested schema)
	// Steps of the clickpath—the first step must always be of the `navigate` type
	// +kubebuilder:validation:Optional
	Events []EventsParameters `json:"events,omitempty" tf:"events,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SelectInitParameters struct {

	// (Block List, Min: 1, Max: 1) The options to be selected (see below for nested schema)
	// The options to be selected
	Selections []SelectionsInitParameters `json:"selections,omitempty" tf:"selections,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []SelectTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	Validate []SelectValidateInitParameters `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []SelectWaitInitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type SelectObservation struct {

	// (Block List, Min: 1, Max: 1) The options to be selected (see below for nested schema)
	// The options to be selected
	Selections []SelectionsObservation `json:"selections,omitempty" tf:"selections,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []SelectTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	Validate []SelectValidateObservation `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []SelectWaitObservation `json:"wait,omitempty" tf:"wait,omitempty"`
}

type SelectParameters struct {

	// (Block List, Min: 1, Max: 1) The options to be selected (see below for nested schema)
	// The options to be selected
	// +kubebuilder:validation:Optional
	Selections []SelectionsParameters `json:"selections" tf:"selections,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	// +kubebuilder:validation:Optional
	Target []SelectTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	// +kubebuilder:validation:Optional
	Validate []SelectValidateParameters `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	// +kubebuilder:validation:Optional
	Wait []SelectWaitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type SelectTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []SelectTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type SelectTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []SelectTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type SelectTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SelectTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SelectTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type SelectTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []SelectTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type SelectTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []SelectTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type SelectTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []SelectTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type SelectTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []SelectTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type SelectValidateInitParameters struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []SelectValidateValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type SelectValidateObservation struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []SelectValidateValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type SelectValidateParameters struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []SelectValidateValidationParameters `json:"validation" tf:"validation,omitempty"`
}

type SelectValidateValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []SelectValidateValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SelectValidateValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []SelectValidateValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SelectValidateValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []SelectValidateValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SelectValidateValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []SelectValidateValidationTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type SelectValidateValidationTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []SelectValidateValidationTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type SelectValidateValidationTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SelectValidateValidationTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SelectValidateValidationTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type SelectValidateValidationTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []SelectValidateValidationTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type SelectValidateValidationTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []SelectValidateValidationTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type SelectValidateValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []SelectValidateValidationTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type SelectValidateValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []SelectValidateValidationTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type SelectWaitInitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []SelectWaitValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type SelectWaitObservation struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []SelectWaitValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type SelectWaitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []SelectWaitValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	// +kubebuilder:validation:Optional
	WaitFor *string `json:"waitFor" tf:"wait_for,omitempty"`
}

type SelectWaitValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []SelectWaitValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SelectWaitValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []SelectWaitValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SelectWaitValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []SelectWaitValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SelectWaitValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []SelectWaitValidationTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type SelectWaitValidationTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []SelectWaitValidationTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type SelectWaitValidationTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SelectWaitValidationTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SelectWaitValidationTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type SelectWaitValidationTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []SelectWaitValidationTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type SelectWaitValidationTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []SelectWaitValidationTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type SelectWaitValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []SelectWaitValidationTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type SelectWaitValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []SelectWaitValidationTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type SelectionsInitParameters struct {

	// (Block List, Min: 1) The option to be selected (see below for nested schema)
	// The option to be selected
	Option []OptionInitParameters `json:"option,omitempty" tf:"option,omitempty"`
}

type SelectionsObservation struct {

	// (Block List, Min: 1) The option to be selected (see below for nested schema)
	// The option to be selected
	Option []OptionObservation `json:"option,omitempty" tf:"option,omitempty"`
}

type SelectionsParameters struct {

	// (Block List, Min: 1) The option to be selected (see below for nested schema)
	// The option to be selected
	// +kubebuilder:validation:Optional
	Option []OptionParameters `json:"option" tf:"option,omitempty"`
}

type TagInitParameters struct {

	// (String) The origin of the tag. Supported values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES.
	// The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
	//
	// Custom tags use the `CONTEXTLESS` value.
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag.
	// The key of the tag.
	//
	// Custom tags have the tag value here.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the tag. Supported values are USER, RULE_BASED and AUTO.
	// The source of the tag. Supported values are `USER`, `RULE_BASED` and `AUTO`.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the tag.
	//
	// Not applicable to custom tags.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagObservation struct {

	// (String) The origin of the tag. Supported values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES.
	// The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
	//
	// Custom tags use the `CONTEXTLESS` value.
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (String) The key of the tag.
	// The key of the tag.
	//
	// Custom tags have the tag value here.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the tag. Supported values are USER, RULE_BASED and AUTO.
	// The source of the tag. Supported values are `USER`, `RULE_BASED` and `AUTO`.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the tag.
	//
	// Not applicable to custom tags.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagParameters struct {

	// (String) The origin of the tag. Supported values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES.
	// The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
	//
	// Custom tags use the `CONTEXTLESS` value.
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (String) The key of the tag.
	// The key of the tag.
	//
	// Custom tags have the tag value here.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the tag. Supported values are USER, RULE_BASED and AUTO.
	// The source of the tag. Supported values are `USER`, `RULE_BASED` and `AUTO`.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The value of the tag.
	//
	// Not applicable to custom tags.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsInitParameters struct {

	// (Block Set) Tag with source of a Dynatrace entity. (see below for nested schema)
	// Tag with source of a Dynatrace entity.
	Tag []TagInitParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagsObservation struct {

	// (Block Set) Tag with source of a Dynatrace entity. (see below for nested schema)
	// Tag with source of a Dynatrace entity.
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagsParameters struct {

	// (Block Set) Tag with source of a Dynatrace entity. (see below for nested schema)
	// Tag with source of a Dynatrace entity.
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TapInitParameters struct {

	// (Number) the mouse button to be used for the click
	// the mouse button to be used for the click
	Button *float64 `json:"button,omitempty" tf:"button,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []TapTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	Validate []TapValidateInitParameters `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []TapWaitInitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type TapObservation struct {

	// (Number) the mouse button to be used for the click
	// the mouse button to be used for the click
	Button *float64 `json:"button,omitempty" tf:"button,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	Target []TapTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	Validate []TapValidateObservation `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	Wait []TapWaitObservation `json:"wait,omitempty" tf:"wait,omitempty"`
}

type TapParameters struct {

	// (Number) the mouse button to be used for the click
	// the mouse button to be used for the click
	// +kubebuilder:validation:Optional
	Button *float64 `json:"button" tf:"button,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The tab on which the page should open
	// +kubebuilder:validation:Optional
	Target []TapTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (Block List, Max: 1) The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element (see below for nested schema)
	// The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
	// +kubebuilder:validation:Optional
	Validate []TapValidateParameters `json:"validate,omitempty" tf:"validate,omitempty"`

	// (Block List, Max: 1) The wait condition for the event—defines how long Dynatrace should wait before the next action is executed (see below for nested schema)
	// The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
	// +kubebuilder:validation:Optional
	Wait []TapWaitParameters `json:"wait,omitempty" tf:"wait,omitempty"`
}

type TapTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []TapTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TapTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []TapTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type TapTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TapTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TapTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TapTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []TapTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type TapTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []TapTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type TapTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []TapTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TapTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []TapTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TapValidateInitParameters struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []TapValidateValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type TapValidateObservation struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []TapValidateValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type TapValidateParameters struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []TapValidateValidationParameters `json:"validation" tf:"validation,omitempty"`
}

type TapValidateValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []TapValidateValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TapValidateValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []TapValidateValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TapValidateValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []TapValidateValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type TapValidateValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []TapValidateValidationTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TapValidateValidationTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []TapValidateValidationTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type TapValidateValidationTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TapValidateValidationTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TapValidateValidationTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TapValidateValidationTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []TapValidateValidationTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type TapValidateValidationTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []TapValidateValidationTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type TapValidateValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []TapValidateValidationTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TapValidateValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []TapValidateValidationTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TapWaitInitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []TapWaitValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type TapWaitObservation struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []TapWaitValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type TapWaitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []TapWaitValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	// +kubebuilder:validation:Optional
	WaitFor *string `json:"waitFor" tf:"wait_for,omitempty"`
}

type TapWaitValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []TapWaitValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TapWaitValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []TapWaitValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TapWaitValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []TapWaitValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type TapWaitValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []TapWaitValidationTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TapWaitValidationTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []TapWaitValidationTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type TapWaitValidationTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TapWaitValidationTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TapWaitValidationTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TapWaitValidationTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []TapWaitValidationTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type TapWaitValidationTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []TapWaitValidationTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type TapWaitValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []TapWaitValidationTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TapWaitValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []TapWaitValidationTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []LocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []LocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type TargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []LocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type TargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []LocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type TargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []LocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type TargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []LocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type ThresholdInitParameters struct {

	// (Number) Specify the event to which an ACTION threshold applies
	// Specify the event to which an ACTION threshold applies
	EventIndex *float64 `json:"eventIndex,omitempty" tf:"event_index,omitempty"`

	// (Number) Specify the request to which an ACTION threshold applies
	// Specify the request to which an ACTION threshold applies
	RequestIndex *float64 `json:"requestIndex,omitempty" tf:"request_index,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Notify if monitor takes longer than X milliseconds to load
	// Notify if monitor takes longer than *X* milliseconds to load
	ValueMs *float64 `json:"valueMs,omitempty" tf:"value_ms,omitempty"`
}

type ThresholdObservation struct {

	// (Number) Specify the event to which an ACTION threshold applies
	// Specify the event to which an ACTION threshold applies
	EventIndex *float64 `json:"eventIndex,omitempty" tf:"event_index,omitempty"`

	// (Number) Specify the request to which an ACTION threshold applies
	// Specify the request to which an ACTION threshold applies
	RequestIndex *float64 `json:"requestIndex,omitempty" tf:"request_index,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Notify if monitor takes longer than X milliseconds to load
	// Notify if monitor takes longer than *X* milliseconds to load
	ValueMs *float64 `json:"valueMs,omitempty" tf:"value_ms,omitempty"`
}

type ThresholdParameters struct {

	// (Number) Specify the event to which an ACTION threshold applies
	// Specify the event to which an ACTION threshold applies
	// +kubebuilder:validation:Optional
	EventIndex *float64 `json:"eventIndex,omitempty" tf:"event_index,omitempty"`

	// (Number) Specify the request to which an ACTION threshold applies
	// Specify the request to which an ACTION threshold applies
	// +kubebuilder:validation:Optional
	RequestIndex *float64 `json:"requestIndex,omitempty" tf:"request_index,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number) Notify if monitor takes longer than X milliseconds to load
	// Notify if monitor takes longer than *X* milliseconds to load
	// +kubebuilder:validation:Optional
	ValueMs *float64 `json:"valueMs" tf:"value_ms,omitempty"`
}

type ThresholdsInitParameters struct {

	// (Block List, Min: 1) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Threshold []ThresholdInitParameters `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type ThresholdsObservation struct {

	// (Block List, Min: 1) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	Threshold []ThresholdObservation `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type ThresholdsParameters struct {

	// (Block List, Min: 1) The list of performance threshold rules (see below for nested schema)
	// The list of performance threshold rules
	// +kubebuilder:validation:Optional
	Threshold []ThresholdParameters `json:"threshold" tf:"threshold,omitempty"`
}

type TimeoutSettingsInitParameters struct {

	// (Number) Track up to n cascading setTimeout calls
	// Track up to n cascading setTimeout calls
	ActionLimit *float64 `json:"actionLimit,omitempty" tf:"action_limit,omitempty"`

	// (Number) Limit cascading timeouts cumulatively to n ms
	// Limit cascading timeouts cumulatively to n ms
	TotalTimeout *float64 `json:"totalTimeout,omitempty" tf:"total_timeout,omitempty"`
}

type TimeoutSettingsObservation struct {

	// (Number) Track up to n cascading setTimeout calls
	// Track up to n cascading setTimeout calls
	ActionLimit *float64 `json:"actionLimit,omitempty" tf:"action_limit,omitempty"`

	// (Number) Limit cascading timeouts cumulatively to n ms
	// Limit cascading timeouts cumulatively to n ms
	TotalTimeout *float64 `json:"totalTimeout,omitempty" tf:"total_timeout,omitempty"`
}

type TimeoutSettingsParameters struct {

	// (Number) Track up to n cascading setTimeout calls
	// Track up to n cascading setTimeout calls
	// +kubebuilder:validation:Optional
	ActionLimit *float64 `json:"actionLimit" tf:"action_limit,omitempty"`

	// (Number) Limit cascading timeouts cumulatively to n ms
	// Limit cascading timeouts cumulatively to n ms
	// +kubebuilder:validation:Optional
	TotalTimeout *float64 `json:"totalTimeout" tf:"total_timeout,omitempty"`
}

type ValidateInitParameters struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []ValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ValidateObservation struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []ValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`
}

type ValidateParameters struct {

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The element to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []ValidationParameters `json:"validation" tf:"validation,omitempty"`
}

type ValidateValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []ValidateValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ValidateValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []ValidateValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ValidateValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []ValidateValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ValidateValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []ValidateValidationTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type ValidateValidationTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []ValidateValidationTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type ValidateValidationTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ValidateValidationTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ValidateValidationTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ValidateValidationTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []ValidateValidationTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type ValidateValidationTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []ValidateValidationTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type ValidateValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []ValidateValidationTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type ValidateValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []ValidateValidationTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type ValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []ValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []ValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []ValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []TargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type ValidationTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []TargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type ValidationTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ValidationTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ValidationTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ValidationTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []TargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type ValidationTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []TargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type ValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []TargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type ValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []TargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type VisuallyCompleteOptionsInitParameters struct {

	// (List of String) Query CSS selectors to specify mutation nodes (elements that change) to ignore in Visually complete and Speed index calculation
	// Query CSS selectors to specify mutation nodes (elements that change) to ignore in Visually complete and Speed index calculation
	ExcludedElements []*string `json:"excludedElements,omitempty" tf:"excluded_elements,omitempty"`

	// (List of String) Parameters for Visually complete and Speed index calculation
	// Parameters for Visually complete and Speed index calculation
	ExcludedUrls []*string `json:"excludedUrls,omitempty" tf:"excluded_urls,omitempty"`

	// (Number) Use this setting to define the minimum visible area per element (in pixels) for an element to be counted towards Visually complete and Speed index
	// Use this setting to define the minimum visible area per element (in pixels) for an element to be counted towards Visually complete and Speed index
	ImageSizeThreshold *float64 `json:"imageSizeThreshold,omitempty" tf:"image_size_threshold,omitempty"`

	// (Number) The time the Visually complete module waits for inactivity and no further mutations on the page after the load action
	// The time the Visually complete module waits for inactivity and no further mutations on the page after the load action
	InactivityTimeout *float64 `json:"inactivityTimeout,omitempty" tf:"inactivity_timeout,omitempty"`

	// (Number) The time the Visually complete module waits after an XHR or custom action closes to start the calculation
	// The time the Visually complete module waits after an XHR or custom action closes to start the calculation
	MutationTimeout *float64 `json:"mutationTimeout,omitempty" tf:"mutation_timeout,omitempty"`
}

type VisuallyCompleteOptionsObservation struct {

	// (List of String) Query CSS selectors to specify mutation nodes (elements that change) to ignore in Visually complete and Speed index calculation
	// Query CSS selectors to specify mutation nodes (elements that change) to ignore in Visually complete and Speed index calculation
	ExcludedElements []*string `json:"excludedElements,omitempty" tf:"excluded_elements,omitempty"`

	// (List of String) Parameters for Visually complete and Speed index calculation
	// Parameters for Visually complete and Speed index calculation
	ExcludedUrls []*string `json:"excludedUrls,omitempty" tf:"excluded_urls,omitempty"`

	// (Number) Use this setting to define the minimum visible area per element (in pixels) for an element to be counted towards Visually complete and Speed index
	// Use this setting to define the minimum visible area per element (in pixels) for an element to be counted towards Visually complete and Speed index
	ImageSizeThreshold *float64 `json:"imageSizeThreshold,omitempty" tf:"image_size_threshold,omitempty"`

	// (Number) The time the Visually complete module waits for inactivity and no further mutations on the page after the load action
	// The time the Visually complete module waits for inactivity and no further mutations on the page after the load action
	InactivityTimeout *float64 `json:"inactivityTimeout,omitempty" tf:"inactivity_timeout,omitempty"`

	// (Number) The time the Visually complete module waits after an XHR or custom action closes to start the calculation
	// The time the Visually complete module waits after an XHR or custom action closes to start the calculation
	MutationTimeout *float64 `json:"mutationTimeout,omitempty" tf:"mutation_timeout,omitempty"`
}

type VisuallyCompleteOptionsParameters struct {

	// (List of String) Query CSS selectors to specify mutation nodes (elements that change) to ignore in Visually complete and Speed index calculation
	// Query CSS selectors to specify mutation nodes (elements that change) to ignore in Visually complete and Speed index calculation
	// +kubebuilder:validation:Optional
	ExcludedElements []*string `json:"excludedElements,omitempty" tf:"excluded_elements,omitempty"`

	// (List of String) Parameters for Visually complete and Speed index calculation
	// Parameters for Visually complete and Speed index calculation
	// +kubebuilder:validation:Optional
	ExcludedUrls []*string `json:"excludedUrls,omitempty" tf:"excluded_urls,omitempty"`

	// (Number) Use this setting to define the minimum visible area per element (in pixels) for an element to be counted towards Visually complete and Speed index
	// Use this setting to define the minimum visible area per element (in pixels) for an element to be counted towards Visually complete and Speed index
	// +kubebuilder:validation:Optional
	ImageSizeThreshold *float64 `json:"imageSizeThreshold" tf:"image_size_threshold,omitempty"`

	// (Number) The time the Visually complete module waits for inactivity and no further mutations on the page after the load action
	// The time the Visually complete module waits for inactivity and no further mutations on the page after the load action
	// +kubebuilder:validation:Optional
	InactivityTimeout *float64 `json:"inactivityTimeout" tf:"inactivity_timeout,omitempty"`

	// (Number) The time the Visually complete module waits after an XHR or custom action closes to start the calculation
	// The time the Visually complete module waits after an XHR or custom action closes to start the calculation
	// +kubebuilder:validation:Optional
	MutationTimeout *float64 `json:"mutationTimeout" tf:"mutation_timeout,omitempty"`
}

type WaitInitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []WaitValidationInitParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type WaitObservation struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	Validation []WaitValidationObservation `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	WaitFor *string `json:"waitFor,omitempty" tf:"wait_for,omitempty"`
}

type WaitParameters struct {

	// (Number) The time to wait, in millisencods. The maximum allowed value is 60000. Required for the type time, not applicable otherwise.
	// The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Milliseconds *float64 `json:"milliseconds,omitempty" tf:"milliseconds,omitempty"`

	// (Number) he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type validation, not applicable otherwise..
	// he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
	// The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Block List, Min: 1) The element to wait for. Required for the validation type, not applicable otherwise. (see below for nested schema)
	// The elements to wait for. Required for the `validation` type, not applicable otherwise.
	// +kubebuilder:validation:Optional
	Validation []WaitValidationParameters `json:"validation,omitempty" tf:"validation,omitempty"`

	// (String) The time to wait before the next event is triggered. Possible values are page_complete (wait for the page to load completely), network (wait for background network activity to complete), next_action (wait for the next action), time (wait for a specified periodof time) and validation (wait for a specific element to appear)
	// The time to wait before the next event is triggered. Possible values are `page_complete` (wait for the page to load completely), `network` (wait for background network activity to complete), `next_action` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
	// +kubebuilder:validation:Optional
	WaitFor *string `json:"waitFor" tf:"wait_for,omitempty"`
}

type WaitValidationInitParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []WaitValidationTargetInitParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type WaitValidationObservation struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	Target []WaitValidationTargetObservation `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type WaitValidationParameters struct {

	// (Boolean) The condition of the validation. false means the validation succeeds if the specified content/element is found. true means the validation fails if the specified content/element is found
	// The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
	// +kubebuilder:validation:Optional
	FailIfFound *bool `json:"failIfFound,omitempty" tf:"fail_if_found,omitempty"`

	// (String) The content to look for on the page.
	// Regular expressions are allowed. In that case set isRegex as true. Required for content_match, optional for element_match.
	// The content to look for on the page.
	// Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `content_match`, optional for `element_match`.
	// +kubebuilder:validation:Optional
	Match *string `json:"match,omitempty" tf:"match,omitempty"`

	// (Boolean) Defines whether match is plain text (false) or a regular expression (true)
	// Defines whether `match` is plain text (`false`) or a regular expression (`true`)
	// +kubebuilder:validation:Optional
	Regex *bool `json:"regex,omitempty" tf:"regex,omitempty"`

	// (Block List, Max: 1) The tab on which the page should open (see below for nested schema)
	// The elemnt to look for on the page
	// +kubebuilder:validation:Optional
	Target []WaitValidationTargetParameters `json:"target,omitempty" tf:"target,omitempty"`

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// The goal of the validation. `content_match` (check page for the specific content. Not allowed for validation inside of wait condition), `element_match` (check page for the specific element).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type WaitValidationTargetInitParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []ValidationTargetLocatorsInitParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type WaitValidationTargetLocatorsInitParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []ValidationTargetLocatorsLocatorInitParameters `json:"locator,omitempty" tf:"locator,omitempty"`
}

type WaitValidationTargetLocatorsLocatorInitParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type WaitValidationTargetLocatorsLocatorObservation struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type WaitValidationTargetLocatorsLocatorParameters struct {

	// (String) The type of the threshold: TOTAL (total loading time) or ACTION (action loading time)
	// Defines where to look for an element. `css` (CSS Selector) or `dom` (Javascript code)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) The value of the cookie. The following symbols are not allowed: ;, ,, \ and ".
	// The name of the element to be found
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type WaitValidationTargetLocatorsObservation struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	Locator []ValidationTargetLocatorsLocatorObservation `json:"locator,omitempty" tf:"locator,omitempty"`
}

type WaitValidationTargetLocatorsParameters struct {

	// (Block List, Min: 1) A locator dentifyies the desired element (see below for nested schema)
	// A locator dentifyies the desired element
	// +kubebuilder:validation:Optional
	Locator []ValidationTargetLocatorsLocatorParameters `json:"locator" tf:"locator,omitempty"`
}

type WaitValidationTargetObservation struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	Locators []ValidationTargetLocatorsObservation `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

type WaitValidationTargetParameters struct {

	// (Block List) The list of locators identifying the desired element (see below for nested schema)
	// The list of locators identifying the desired element
	// +kubebuilder:validation:Optional
	Locators []ValidationTargetLocatorsParameters `json:"locators,omitempty" tf:"locators,omitempty"`

	// (String) The tab of the target
	// The tab of the target
	// +kubebuilder:validation:Optional
	Window *string `json:"window,omitempty" tf:"window,omitempty"`
}

// BrowserMonitorSpec defines the desired state of BrowserMonitor
type BrowserMonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BrowserMonitorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BrowserMonitorInitParameters `json:"initProvider,omitempty"`
}

// BrowserMonitorStatus defines the observed state of BrowserMonitor.
type BrowserMonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BrowserMonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BrowserMonitor is the Schema for the BrowserMonitors API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type BrowserMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frequency) || (has(self.initProvider) && has(self.initProvider.frequency))",message="spec.forProvider.frequency is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keyPerformanceMetrics) || (has(self.initProvider) && has(self.initProvider.keyPerformanceMetrics))",message="spec.forProvider.keyPerformanceMetrics is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   BrowserMonitorSpec   `json:"spec"`
	Status BrowserMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BrowserMonitorList contains a list of BrowserMonitors
type BrowserMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BrowserMonitor `json:"items"`
}

// Repository type metadata.
var (
	BrowserMonitor_Kind             = "BrowserMonitor"
	BrowserMonitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BrowserMonitor_Kind}.String()
	BrowserMonitor_KindAPIVersion   = BrowserMonitor_Kind + "." + CRDGroupVersion.String()
	BrowserMonitor_GroupVersionKind = CRDGroupVersion.WithKind(BrowserMonitor_Kind)
)

func init() {
	SchemeBuilder.Register(&BrowserMonitor{}, &BrowserMonitorList{})
}
