// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AliasQueueInitParameters struct {

	// (String) The name of the alias queue
	// The name of the alias queue
	AliasQueueName *string `json:"aliasQueueName,omitempty" tf:"alias_queue_name,omitempty"`

	// (String) The name of the base queue
	// The name of the base queue
	BaseQueueName *string `json:"baseQueueName,omitempty" tf:"base_queue_name,omitempty"`

	// (Set of String) Name of the cluster(s) this alias should be visible in
	// Name of the cluster(s) this alias should be visible in
	// +listType=set
	ClusterVisibility []*string `json:"clusterVisibility,omitempty" tf:"cluster_visibility,omitempty"`
}

type AliasQueueObservation struct {

	// (String) The name of the alias queue
	// The name of the alias queue
	AliasQueueName *string `json:"aliasQueueName,omitempty" tf:"alias_queue_name,omitempty"`

	// (String) The name of the base queue
	// The name of the base queue
	BaseQueueName *string `json:"baseQueueName,omitempty" tf:"base_queue_name,omitempty"`

	// (Set of String) Name of the cluster(s) this alias should be visible in
	// Name of the cluster(s) this alias should be visible in
	// +listType=set
	ClusterVisibility []*string `json:"clusterVisibility,omitempty" tf:"cluster_visibility,omitempty"`
}

type AliasQueueParameters struct {

	// (String) The name of the alias queue
	// The name of the alias queue
	// +kubebuilder:validation:Optional
	AliasQueueName *string `json:"aliasQueueName" tf:"alias_queue_name,omitempty"`

	// (String) The name of the base queue
	// The name of the base queue
	// +kubebuilder:validation:Optional
	BaseQueueName *string `json:"baseQueueName" tf:"base_queue_name,omitempty"`

	// (Set of String) Name of the cluster(s) this alias should be visible in
	// Name of the cluster(s) this alias should be visible in
	// +kubebuilder:validation:Optional
	// +listType=set
	ClusterVisibility []*string `json:"clusterVisibility,omitempty" tf:"cluster_visibility,omitempty"`
}

type AliasQueuesInitParameters struct {

	// (Block List) Alias queue definitions for queue manager (see below for nested schema)
	// Alias queue definitions for queue manager
	AliasQueue []AliasQueueInitParameters `json:"aliasQueue,omitempty" tf:"alias_queue,omitempty"`
}

type AliasQueuesObservation struct {

	// (Block List) Alias queue definitions for queue manager (see below for nested schema)
	// Alias queue definitions for queue manager
	AliasQueue []AliasQueueObservation `json:"aliasQueue,omitempty" tf:"alias_queue,omitempty"`
}

type AliasQueuesParameters struct {

	// (Block List) Alias queue definitions for queue manager (see below for nested schema)
	// Alias queue definitions for queue manager
	// +kubebuilder:validation:Optional
	AliasQueue []AliasQueueParameters `json:"aliasQueue,omitempty" tf:"alias_queue,omitempty"`
}

type ClusterQueueInitParameters struct {

	// (Set of String) Name of the cluster(s) this alias should be visible in
	// Name of the cluster(s) this local queue should be visible in
	// +listType=set
	ClusterVisibility []*string `json:"clusterVisibility,omitempty" tf:"cluster_visibility,omitempty"`

	// (String) The name of the local queue
	// The name of the local queue
	LocalQueueName *string `json:"localQueueName,omitempty" tf:"local_queue_name,omitempty"`
}

type ClusterQueueObservation struct {

	// (Set of String) Name of the cluster(s) this alias should be visible in
	// Name of the cluster(s) this local queue should be visible in
	// +listType=set
	ClusterVisibility []*string `json:"clusterVisibility,omitempty" tf:"cluster_visibility,omitempty"`

	// (String) The name of the local queue
	// The name of the local queue
	LocalQueueName *string `json:"localQueueName,omitempty" tf:"local_queue_name,omitempty"`
}

type ClusterQueueParameters struct {

	// (Set of String) Name of the cluster(s) this alias should be visible in
	// Name of the cluster(s) this local queue should be visible in
	// +kubebuilder:validation:Optional
	// +listType=set
	ClusterVisibility []*string `json:"clusterVisibility,omitempty" tf:"cluster_visibility,omitempty"`

	// (String) The name of the local queue
	// The name of the local queue
	// +kubebuilder:validation:Optional
	LocalQueueName *string `json:"localQueueName" tf:"local_queue_name,omitempty"`
}

type ClusterQueuesInitParameters struct {

	// (Block List) Cluster queue definitions for queue manager (see below for nested schema)
	// Cluster queue definitions for queue manager
	ClusterQueue []ClusterQueueInitParameters `json:"clusterQueue,omitempty" tf:"cluster_queue,omitempty"`
}

type ClusterQueuesObservation struct {

	// (Block List) Cluster queue definitions for queue manager (see below for nested schema)
	// Cluster queue definitions for queue manager
	ClusterQueue []ClusterQueueObservation `json:"clusterQueue,omitempty" tf:"cluster_queue,omitempty"`
}

type ClusterQueuesParameters struct {

	// (Block List) Cluster queue definitions for queue manager (see below for nested schema)
	// Cluster queue definitions for queue manager
	// +kubebuilder:validation:Optional
	ClusterQueue []ClusterQueueParameters `json:"clusterQueue,omitempty" tf:"cluster_queue,omitempty"`
}

type QueueManagerInitParameters_2 struct {

	// (Block List) The alias queues in the queue manager (see below for nested schema)
	// The alias queues in the queue manager
	AliasQueues []AliasQueuesInitParameters `json:"aliasQueues,omitempty" tf:"alias_queues,omitempty"`

	// (Block List) The alias queues in the queue manager (see below for nested schema)
	// The alias queues in the queue manager
	ClusterQueues []ClusterQueuesInitParameters `json:"clusterQueues,omitempty" tf:"cluster_queues,omitempty"`

	// (Set of String) Name of the cluster(s) this queue manager is part of
	// Name of the cluster(s) this queue manager is part of
	// +listType=set
	Clusters []*string `json:"clusters,omitempty" tf:"clusters,omitempty"`

	// (String) The name of the queue manager
	// The name of the queue manager
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) The alias queues in the queue manager (see below for nested schema)
	// The alias queues in the queue manager
	RemoteQueues []RemoteQueuesInitParameters `json:"remoteQueues,omitempty" tf:"remote_queues,omitempty"`
}

type QueueManagerObservation_2 struct {

	// (Block List) The alias queues in the queue manager (see below for nested schema)
	// The alias queues in the queue manager
	AliasQueues []AliasQueuesObservation `json:"aliasQueues,omitempty" tf:"alias_queues,omitempty"`

	// (Block List) The alias queues in the queue manager (see below for nested schema)
	// The alias queues in the queue manager
	ClusterQueues []ClusterQueuesObservation `json:"clusterQueues,omitempty" tf:"cluster_queues,omitempty"`

	// (Set of String) Name of the cluster(s) this queue manager is part of
	// Name of the cluster(s) this queue manager is part of
	// +listType=set
	Clusters []*string `json:"clusters,omitempty" tf:"clusters,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the queue manager
	// The name of the queue manager
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) The alias queues in the queue manager (see below for nested schema)
	// The alias queues in the queue manager
	RemoteQueues []RemoteQueuesObservation `json:"remoteQueues,omitempty" tf:"remote_queues,omitempty"`
}

type QueueManagerParameters_2 struct {

	// (Block List) The alias queues in the queue manager (see below for nested schema)
	// The alias queues in the queue manager
	// +kubebuilder:validation:Optional
	AliasQueues []AliasQueuesParameters `json:"aliasQueues,omitempty" tf:"alias_queues,omitempty"`

	// (Block List) The alias queues in the queue manager (see below for nested schema)
	// The alias queues in the queue manager
	// +kubebuilder:validation:Optional
	ClusterQueues []ClusterQueuesParameters `json:"clusterQueues,omitempty" tf:"cluster_queues,omitempty"`

	// (Set of String) Name of the cluster(s) this queue manager is part of
	// Name of the cluster(s) this queue manager is part of
	// +kubebuilder:validation:Optional
	// +listType=set
	Clusters []*string `json:"clusters,omitempty" tf:"clusters,omitempty"`

	// (String) The name of the queue manager
	// The name of the queue manager
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) The alias queues in the queue manager (see below for nested schema)
	// The alias queues in the queue manager
	// +kubebuilder:validation:Optional
	RemoteQueues []RemoteQueuesParameters `json:"remoteQueues,omitempty" tf:"remote_queues,omitempty"`
}

type RemoteQueueInitParameters struct {

	// (Set of String) Name of the cluster(s) this alias should be visible in
	// Name of the cluster(s) this local definition of the remote queue should be visible in
	// +listType=set
	ClusterVisibility []*string `json:"clusterVisibility,omitempty" tf:"cluster_visibility,omitempty"`

	// (String) The name of the local queue
	// The name of the local queue
	LocalQueueName *string `json:"localQueueName,omitempty" tf:"local_queue_name,omitempty"`

	// (String) The name of the remote queue manager
	// The name of the remote queue manager
	RemoteQueueManager *string `json:"remoteQueueManager,omitempty" tf:"remote_queue_manager,omitempty"`

	// (String) The name of the remote queue
	// The name of the remote queue
	RemoteQueueName *string `json:"remoteQueueName,omitempty" tf:"remote_queue_name,omitempty"`
}

type RemoteQueueObservation struct {

	// (Set of String) Name of the cluster(s) this alias should be visible in
	// Name of the cluster(s) this local definition of the remote queue should be visible in
	// +listType=set
	ClusterVisibility []*string `json:"clusterVisibility,omitempty" tf:"cluster_visibility,omitempty"`

	// (String) The name of the local queue
	// The name of the local queue
	LocalQueueName *string `json:"localQueueName,omitempty" tf:"local_queue_name,omitempty"`

	// (String) The name of the remote queue manager
	// The name of the remote queue manager
	RemoteQueueManager *string `json:"remoteQueueManager,omitempty" tf:"remote_queue_manager,omitempty"`

	// (String) The name of the remote queue
	// The name of the remote queue
	RemoteQueueName *string `json:"remoteQueueName,omitempty" tf:"remote_queue_name,omitempty"`
}

type RemoteQueueParameters struct {

	// (Set of String) Name of the cluster(s) this alias should be visible in
	// Name of the cluster(s) this local definition of the remote queue should be visible in
	// +kubebuilder:validation:Optional
	// +listType=set
	ClusterVisibility []*string `json:"clusterVisibility,omitempty" tf:"cluster_visibility,omitempty"`

	// (String) The name of the local queue
	// The name of the local queue
	// +kubebuilder:validation:Optional
	LocalQueueName *string `json:"localQueueName" tf:"local_queue_name,omitempty"`

	// (String) The name of the remote queue manager
	// The name of the remote queue manager
	// +kubebuilder:validation:Optional
	RemoteQueueManager *string `json:"remoteQueueManager" tf:"remote_queue_manager,omitempty"`

	// (String) The name of the remote queue
	// The name of the remote queue
	// +kubebuilder:validation:Optional
	RemoteQueueName *string `json:"remoteQueueName" tf:"remote_queue_name,omitempty"`
}

type RemoteQueuesInitParameters struct {

	// (Block List) Remote queue definitions for queue manager (see below for nested schema)
	// Remote queue definitions for queue manager
	RemoteQueue []RemoteQueueInitParameters `json:"remoteQueue,omitempty" tf:"remote_queue,omitempty"`
}

type RemoteQueuesObservation struct {

	// (Block List) Remote queue definitions for queue manager (see below for nested schema)
	// Remote queue definitions for queue manager
	RemoteQueue []RemoteQueueObservation `json:"remoteQueue,omitempty" tf:"remote_queue,omitempty"`
}

type RemoteQueuesParameters struct {

	// (Block List) Remote queue definitions for queue manager (see below for nested schema)
	// Remote queue definitions for queue manager
	// +kubebuilder:validation:Optional
	RemoteQueue []RemoteQueueParameters `json:"remoteQueue,omitempty" tf:"remote_queue,omitempty"`
}

// QueueManagerSpec defines the desired state of QueueManager
type QueueManagerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueueManagerParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QueueManagerInitParameters_2 `json:"initProvider,omitempty"`
}

// QueueManagerStatus defines the observed state of QueueManager.
type QueueManagerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueueManagerObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// QueueManager is the Schema for the QueueManagers API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type QueueManager struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   QueueManagerSpec   `json:"spec"`
	Status QueueManagerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueueManagerList contains a list of QueueManagers
type QueueManagerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QueueManager `json:"items"`
}

// Repository type metadata.
var (
	QueueManager_Kind             = "QueueManager"
	QueueManager_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QueueManager_Kind}.String()
	QueueManager_KindAPIVersion   = QueueManager_Kind + "." + CRDGroupVersion.String()
	QueueManager_GroupVersionKind = CRDGroupVersion.WithKind(QueueManager_Kind)
)

func init() {
	SchemeBuilder.Register(&QueueManager{}, &QueueManagerList{})
}
