// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImsBridgesInitParameters struct {

	// (String) The name of the IMS bridge
	// The name of the IMS bridge
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) Queue manager(s) that belong to the IMS bridge (see below for nested schema)
	// Queue manager(s) that belong to the IMS bridge
	QueueManagers []QueueManagersInitParameters `json:"queueManagers,omitempty" tf:"queue_managers,omitempty"`
}

type ImsBridgesObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the IMS bridge
	// The name of the IMS bridge
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) Queue manager(s) that belong to the IMS bridge (see below for nested schema)
	// Queue manager(s) that belong to the IMS bridge
	QueueManagers []QueueManagersObservation `json:"queueManagers,omitempty" tf:"queue_managers,omitempty"`
}

type ImsBridgesParameters struct {

	// (String) The name of the IMS bridge
	// The name of the IMS bridge
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List) Queue manager(s) that belong to the IMS bridge (see below for nested schema)
	// Queue manager(s) that belong to the IMS bridge
	// +kubebuilder:validation:Optional
	QueueManagers []QueueManagersParameters `json:"queueManagers,omitempty" tf:"queue_managers,omitempty"`
}

type QueueManagerInitParameters struct {

	// (String) The name of the IMS bridge
	// The name of the queue manager
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) Queue(s) that belong to the queue manager
	// Queue(s) that belong to the queue manager
	// +listType=set
	QueueManagerQueue []*string `json:"queueManagerQueue,omitempty" tf:"queue_manager_queue,omitempty"`
}

type QueueManagerObservation struct {

	// (String) The name of the IMS bridge
	// The name of the queue manager
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) Queue(s) that belong to the queue manager
	// Queue(s) that belong to the queue manager
	// +listType=set
	QueueManagerQueue []*string `json:"queueManagerQueue,omitempty" tf:"queue_manager_queue,omitempty"`
}

type QueueManagerParameters struct {

	// (String) The name of the IMS bridge
	// The name of the queue manager
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (Set of String) Queue(s) that belong to the queue manager
	// Queue(s) that belong to the queue manager
	// +kubebuilder:validation:Optional
	// +listType=set
	QueueManagerQueue []*string `json:"queueManagerQueue,omitempty" tf:"queue_manager_queue,omitempty"`
}

type QueueManagersInitParameters struct {

	// (Block List) Queue manager definition for IMS bridge (see below for nested schema)
	// Queue manager definition for IMS bridge
	QueueManager []QueueManagerInitParameters `json:"queueManager,omitempty" tf:"queue_manager,omitempty"`
}

type QueueManagersObservation struct {

	// (Block List) Queue manager definition for IMS bridge (see below for nested schema)
	// Queue manager definition for IMS bridge
	QueueManager []QueueManagerObservation `json:"queueManager,omitempty" tf:"queue_manager,omitempty"`
}

type QueueManagersParameters struct {

	// (Block List) Queue manager definition for IMS bridge (see below for nested schema)
	// Queue manager definition for IMS bridge
	// +kubebuilder:validation:Optional
	QueueManager []QueueManagerParameters `json:"queueManager,omitempty" tf:"queue_manager,omitempty"`
}

// ImsBridgesSpec defines the desired state of ImsBridges
type ImsBridgesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImsBridgesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImsBridgesInitParameters `json:"initProvider,omitempty"`
}

// ImsBridgesStatus defines the observed state of ImsBridges.
type ImsBridgesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImsBridgesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ImsBridges is the Schema for the ImsBridgess API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ImsBridges struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ImsBridgesSpec   `json:"spec"`
	Status ImsBridgesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImsBridgesList contains a list of ImsBridgess
type ImsBridgesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImsBridges `json:"items"`
}

// Repository type metadata.
var (
	ImsBridges_Kind             = "ImsBridges"
	ImsBridges_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImsBridges_Kind}.String()
	ImsBridges_KindAPIVersion   = ImsBridges_Kind + "." + CRDGroupVersion.String()
	ImsBridges_GroupVersionKind = CRDGroupVersion.WithKind(ImsBridges_Kind)
)

func init() {
	SchemeBuilder.Register(&ImsBridges{}, &ImsBridgesList{})
}
