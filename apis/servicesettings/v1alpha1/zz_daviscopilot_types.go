// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BlocklistEntrieInitParameters struct {

	// (String) no documentation available
	// no documentation available
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible Values: BUCKET, TABLE
	// Possible Values: `BUCKET`, `TABLE`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BlocklistEntrieObservation struct {

	// (String) no documentation available
	// no documentation available
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Possible Values: BUCKET, TABLE
	// Possible Values: `BUCKET`, `TABLE`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BlocklistEntrieParameters struct {

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) Possible Values: BUCKET, TABLE
	// Possible Values: `BUCKET`, `TABLE`
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type BlocklistEntriesInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	BlocklistEntrie []BlocklistEntrieInitParameters `json:"blocklistEntrie,omitempty" tf:"blocklist_entrie,omitempty"`
}

type BlocklistEntriesObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	BlocklistEntrie []BlocklistEntrieObservation `json:"blocklistEntrie,omitempty" tf:"blocklist_entrie,omitempty"`
}

type BlocklistEntriesParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	BlocklistEntrie []BlocklistEntrieParameters `json:"blocklistEntrie" tf:"blocklist_entrie,omitempty"`
}

type DavisCopilotInitParameters struct {

	// (Block List, Max: 1) You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about configuring data access. (see below for nested schema)
	// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q "Davis CoPilot data access").
	BlocklistEntries []BlocklistEntriesInitParameters `json:"blocklistEntries,omitempty" tf:"blocklist_entries,omitempty"`

	// (Boolean) Please note that once enabled, you still need to assign permissions to the relevant user groups.
	// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn "Davis CoPilot permissions") to the relevant user groups.
	EnableCopilot *bool `json:"enableCopilot,omitempty" tf:"enable_copilot,omitempty"`

	// aware queries.
	// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7 "Davis CoPilot environment aware queries").
	EnableTenantAwareDataMining *bool `json:"enableTenantAwareDataMining,omitempty" tf:"enable_tenant_aware_data_mining,omitempty"`
}

type DavisCopilotObservation struct {

	// (Block List, Max: 1) You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about configuring data access. (see below for nested schema)
	// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q "Davis CoPilot data access").
	BlocklistEntries []BlocklistEntriesObservation `json:"blocklistEntries,omitempty" tf:"blocklist_entries,omitempty"`

	// (Boolean) Please note that once enabled, you still need to assign permissions to the relevant user groups.
	// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn "Davis CoPilot permissions") to the relevant user groups.
	EnableCopilot *bool `json:"enableCopilot,omitempty" tf:"enable_copilot,omitempty"`

	// aware queries.
	// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7 "Davis CoPilot environment aware queries").
	EnableTenantAwareDataMining *bool `json:"enableTenantAwareDataMining,omitempty" tf:"enable_tenant_aware_data_mining,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DavisCopilotParameters struct {

	// (Block List, Max: 1) You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about configuring data access. (see below for nested schema)
	// You can exclude specific data buckets and tables from the Davis CoPilot semantic index. Learn more about [configuring data access](https://dt-url.net/lc62i1q "Davis CoPilot data access").
	// +kubebuilder:validation:Optional
	BlocklistEntries []BlocklistEntriesParameters `json:"blocklistEntries,omitempty" tf:"blocklist_entries,omitempty"`

	// (Boolean) Please note that once enabled, you still need to assign permissions to the relevant user groups.
	// Please note that once enabled, you still need to [assign permissions](https://dt-url.net/rh22idn "Davis CoPilot permissions") to the relevant user groups.
	// +kubebuilder:validation:Optional
	EnableCopilot *bool `json:"enableCopilot,omitempty" tf:"enable_copilot,omitempty"`

	// aware queries.
	// You can enrich Davis CoPilot with your environment data. This lets you generate more accurate queries that identify and reference relevant entities, events, spans, logs, and metrics from your environment. Once enabled, Davis CoPilot periodically scans your Grail data to create its own semantic index. Please note, it can take up to 24 hours to reflect changes. Learn more about [environment-aware queries](https://dt-url.net/4g42iu7 "Davis CoPilot environment aware queries").
	// +kubebuilder:validation:Optional
	EnableTenantAwareDataMining *bool `json:"enableTenantAwareDataMining,omitempty" tf:"enable_tenant_aware_data_mining,omitempty"`
}

// DavisCopilotSpec defines the desired state of DavisCopilot
type DavisCopilotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DavisCopilotParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DavisCopilotInitParameters `json:"initProvider,omitempty"`
}

// DavisCopilotStatus defines the observed state of DavisCopilot.
type DavisCopilotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DavisCopilotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DavisCopilot is the Schema for the DavisCopilots API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type DavisCopilot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enableCopilot) || (has(self.initProvider) && has(self.initProvider.enableCopilot))",message="spec.forProvider.enableCopilot is a required parameter"
	Spec   DavisCopilotSpec   `json:"spec"`
	Status DavisCopilotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DavisCopilotList contains a list of DavisCopilots
type DavisCopilotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DavisCopilot `json:"items"`
}

// Repository type metadata.
var (
	DavisCopilot_Kind             = "DavisCopilot"
	DavisCopilot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DavisCopilot_Kind}.String()
	DavisCopilot_KindAPIVersion   = DavisCopilot_Kind + "." + CRDGroupVersion.String()
	DavisCopilot_GroupVersionKind = CRDGroupVersion.WithKind(DavisCopilot_Kind)
)

func init() {
	SchemeBuilder.Register(&DavisCopilot{}, &DavisCopilotList{})
}
