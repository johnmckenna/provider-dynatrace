// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserSettingsInitParameters struct {

	// Language - use browser default
	AutoLanguage *bool `json:"autoLanguage,omitempty" tf:"auto_language,omitempty"`

	// Region - use browser default
	AutoRegion *bool `json:"autoRegion,omitempty" tf:"auto_region,omitempty"`

	// Theme - use browser default
	AutoTheme *bool `json:"autoTheme,omitempty" tf:"auto_theme,omitempty"`

	// Timezone - use browser default
	AutoTimezone *bool `json:"autoTimezone,omitempty" tf:"auto_timezone,omitempty"`

	// Possible Values: `En`, `Ja`
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// Region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The scope of this setting (user, userdefaults)
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Possible Values: `Dark`, `Light`
	Theme *string `json:"theme,omitempty" tf:"theme,omitempty"`

	// Timezone
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type UserSettingsObservation struct {

	// Language - use browser default
	AutoLanguage *bool `json:"autoLanguage,omitempty" tf:"auto_language,omitempty"`

	// Region - use browser default
	AutoRegion *bool `json:"autoRegion,omitempty" tf:"auto_region,omitempty"`

	// Theme - use browser default
	AutoTheme *bool `json:"autoTheme,omitempty" tf:"auto_theme,omitempty"`

	// Timezone - use browser default
	AutoTimezone *bool `json:"autoTimezone,omitempty" tf:"auto_timezone,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Possible Values: `En`, `Ja`
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// Region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The scope of this setting (user, userdefaults)
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Possible Values: `Dark`, `Light`
	Theme *string `json:"theme,omitempty" tf:"theme,omitempty"`

	// Timezone
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type UserSettingsParameters struct {

	// Language - use browser default
	// +kubebuilder:validation:Optional
	AutoLanguage *bool `json:"autoLanguage,omitempty" tf:"auto_language,omitempty"`

	// Region - use browser default
	// +kubebuilder:validation:Optional
	AutoRegion *bool `json:"autoRegion,omitempty" tf:"auto_region,omitempty"`

	// Theme - use browser default
	// +kubebuilder:validation:Optional
	AutoTheme *bool `json:"autoTheme,omitempty" tf:"auto_theme,omitempty"`

	// Timezone - use browser default
	// +kubebuilder:validation:Optional
	AutoTimezone *bool `json:"autoTimezone,omitempty" tf:"auto_timezone,omitempty"`

	// Possible Values: `En`, `Ja`
	// +kubebuilder:validation:Optional
	Language *string `json:"language,omitempty" tf:"language,omitempty"`

	// Region
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The scope of this setting (user, userdefaults)
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Possible Values: `Dark`, `Light`
	// +kubebuilder:validation:Optional
	Theme *string `json:"theme,omitempty" tf:"theme,omitempty"`

	// Timezone
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

// UserSettingsSpec defines the desired state of UserSettings
type UserSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserSettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserSettingsInitParameters `json:"initProvider,omitempty"`
}

// UserSettingsStatus defines the observed state of UserSettings.
type UserSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserSettings is the Schema for the UserSettingss API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type UserSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.autoLanguage) || (has(self.initProvider) && has(self.initProvider.autoLanguage))",message="spec.forProvider.autoLanguage is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.autoRegion) || (has(self.initProvider) && has(self.initProvider.autoRegion))",message="spec.forProvider.autoRegion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.autoTheme) || (has(self.initProvider) && has(self.initProvider.autoTheme))",message="spec.forProvider.autoTheme is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.autoTimezone) || (has(self.initProvider) && has(self.initProvider.autoTimezone))",message="spec.forProvider.autoTimezone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scope) || (has(self.initProvider) && has(self.initProvider.scope))",message="spec.forProvider.scope is a required parameter"
	Spec   UserSettingsSpec   `json:"spec"`
	Status UserSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserSettingsList contains a list of UserSettingss
type UserSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserSettings `json:"items"`
}

// Repository type metadata.
var (
	UserSettings_Kind             = "UserSettings"
	UserSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserSettings_Kind}.String()
	UserSettings_KindAPIVersion   = UserSettings_Kind + "." + CRDGroupVersion.String()
	UserSettings_GroupVersionKind = CRDGroupVersion.WithKind(UserSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&UserSettings{}, &UserSettingsList{})
}
