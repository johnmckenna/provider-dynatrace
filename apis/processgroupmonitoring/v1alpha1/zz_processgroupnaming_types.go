// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be APPLICATION_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ApplicationTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be APPLICATION_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ApplicationTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be APPLICATION_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ApplicationTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ApplicationTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ApplicationTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureComputeModeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are DEDICATED or SHARED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureComputeModeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are DEDICATED or SHARED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureComputeModeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are DEDICATED or SHARED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureComputeModeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are DEDICATED or SHARED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureComputeModeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are DEDICATED or SHARED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureComputeModeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are DEDICATED or SHARED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureSkuComparisionInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be AZURE_SKU
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureSkuComparisionObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be AZURE_SKU
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureSkuComparisionParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be AZURE_SKU
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureSkuInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureSkuObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AzureSkuParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BASIC, DYNAMIC, FREE, PREMIUM, SHARED and STANDARD.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type BaseComparisonBasicInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// The type of comparison
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type BaseComparisonBasicObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// The type of comparison
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type BaseComparisonBasicParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// The type of comparison
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type BaseConditionKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Defines the actual set of fields depending on the value
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type BaseConditionKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Defines the actual set of fields depending on the value
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type BaseConditionKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Defines the actual set of fields depending on the value
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type BitnessComparisionInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be BITNESS
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are 32 and 64.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type BitnessComparisionObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be BITNESS
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are 32 and 64.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type BitnessComparisionParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be BITNESS
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are 32 and 64.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type BitnessInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are 32 and 64.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type BitnessObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are 32 and 64.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type BitnessParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are 32 and 64.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CloudTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be CLOUD_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CloudTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be CLOUD_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CloudTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be CLOUD_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CloudTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CloudTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CloudTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AZURE, EC2, GOOGLE_CLOUD_PLATFORM, OPENSTACK, ORACLE and UNRECOGNIZED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// The type of comparison
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// The type of comparison
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// The type of comparison
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionInitParameters struct {

	// (Block List) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	ApplicationType []ApplicationTypeInitParameters `json:"applicationType,omitempty" tf:"application_type,omitempty"`

	// (Block List, Deprecated) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	ApplicationTypeComparison []ApplicationTypeComparisonInitParameters `json:"applicationTypeComparison,omitempty" tf:"application_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	AzureComputeMode []AzureComputeModeInitParameters `json:"azureComputeMode,omitempty" tf:"azure_compute_mode,omitempty"`

	// (Block List) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	AzureComputeModeComparison []AzureComputeModeComparisonInitParameters `json:"azureComputeModeComparison,omitempty" tf:"azure_compute_mode_comparison,omitempty"`

	// (Block List) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	AzureSku []AzureSkuInitParameters `json:"azureSku,omitempty" tf:"azure_sku,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	AzureSkuComparision []AzureSkuComparisionInitParameters `json:"azureSkuComparision,omitempty" tf:"azure_sku_comparision,omitempty"`

	// (Block List, Deprecated) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	BaseComparisonBasic []BaseComparisonBasicInitParameters `json:"baseComparisonBasic,omitempty" tf:"base_comparison_basic,omitempty"`

	// (Block List, Deprecated) Fallback for not yet known type (see below for nested schema)
	// Fallback for not yet known type
	BaseConditionKey []BaseConditionKeyInitParameters `json:"baseConditionKey,omitempty" tf:"base_condition_key,omitempty"`

	// (Block List) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	Bitness []BitnessInitParameters `json:"bitness,omitempty" tf:"bitness,omitempty"`

	// (Block List, Deprecated) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	BitnessComparision []BitnessComparisionInitParameters `json:"bitnessComparision,omitempty" tf:"bitness_comparision,omitempty"`

	// (Block List) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	CloudType []CloudTypeInitParameters `json:"cloudType,omitempty" tf:"cloud_type,omitempty"`

	// (Block List, Deprecated) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	CloudTypeComparison []CloudTypeComparisonInitParameters `json:"cloudTypeComparison,omitempty" tf:"cloud_type_comparison,omitempty"`

	// (Block List) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	Comparison []ComparisonInitParameters `json:"comparison,omitempty" tf:"comparison,omitempty"`

	// (Block List) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	CustomApplicationType []CustomApplicationTypeInitParameters `json:"customApplicationType,omitempty" tf:"custom_application_type,omitempty"`

	// (Block List, Deprecated) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	CustomApplicationTypeComparison []CustomApplicationTypeComparisonInitParameters `json:"customApplicationTypeComparison,omitempty" tf:"custom_application_type_comparison,omitempty"`

	// (Block List) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	CustomHostMetadata []CustomHostMetadataInitParameters `json:"customHostMetadata,omitempty" tf:"custom_host_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	CustomHostMetadataConditionKey []CustomHostMetadataConditionKeyInitParameters `json:"customHostMetadataConditionKey,omitempty" tf:"custom_host_metadata_condition_key,omitempty"`

	// (Block List) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	CustomProcessMetadata []CustomProcessMetadataInitParameters `json:"customProcessMetadata,omitempty" tf:"custom_process_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	CustomProcessMetadataConditionKey []CustomProcessMetadataConditionKeyInitParameters `json:"customProcessMetadataConditionKey,omitempty" tf:"custom_process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	DatabaseTopology []DatabaseTopologyInitParameters `json:"databaseTopology,omitempty" tf:"database_topology,omitempty"`

	// (Block List, Deprecated) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	DatabaseTopologyComparison []DatabaseTopologyComparisonInitParameters `json:"databaseTopologyComparison,omitempty" tf:"database_topology_comparison,omitempty"`

	// (Block List) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	DcrumDecoder []DcrumDecoderInitParameters `json:"dcrumDecoder,omitempty" tf:"dcrum_decoder,omitempty"`

	// (Block List, Deprecated) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	DcrumDecoderComparison []DcrumDecoderComparisonInitParameters `json:"dcrumDecoderComparison,omitempty" tf:"dcrum_decoder_comparison,omitempty"`

	// (Block List) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	Entity []EntityInitParameters `json:"entity,omitempty" tf:"entity,omitempty"`

	// (Block List, Deprecated) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	EntityIDComparison []EntityIDComparisonInitParameters `json:"entityIdComparison,omitempty" tf:"entity_id_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	HostTech []HostTechInitParameters `json:"hostTech,omitempty" tf:"host_tech,omitempty"`

	// (Block List) Comparison for HYPERVISOR_TYPE attributes (see below for nested schema)
	// Comparison for `HYPERVISOR_TYPE` attributes
	Hypervisor []HypervisorInitParameters `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	// (Block List, Deprecated) hypervisor_type_comparision is deprecated. Use hypervisor instead (see below for nested schema)
	// `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
	HypervisorTypeComparision []HypervisorTypeComparisionInitParameters `json:"hypervisorTypeComparision,omitempty" tf:"hypervisor_type_comparision,omitempty"`

	// (Block List) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	IndexedName []IndexedNameInitParameters `json:"indexedName,omitempty" tf:"indexed_name,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	IndexedNameComparison []IndexedNameComparisonInitParameters `json:"indexedNameComparison,omitempty" tf:"indexed_name_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	IndexedString []IndexedStringInitParameters `json:"indexedString,omitempty" tf:"indexed_string,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	IndexedStringComparison []IndexedStringComparisonInitParameters `json:"indexedStringComparison,omitempty" tf:"indexed_string_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	IndexedTag []IndexedTagInitParameters `json:"indexedTag,omitempty" tf:"indexed_tag,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	IndexedTagComparison []IndexedTagComparisonInitParameters `json:"indexedTagComparison,omitempty" tf:"indexed_tag_comparison,omitempty"`

	// (Block List) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	Integer []IntegerInitParameters `json:"integer,omitempty" tf:"integer,omitempty"`

	// (Block List, Deprecated) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	IntegerComparison []IntegerComparisonInitParameters `json:"integerComparison,omitempty" tf:"integer_comparison,omitempty"`

	// (Block List) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	Ipaddress []IpaddressInitParameters `json:"ipaddress,omitempty" tf:"ipaddress,omitempty"`

	// (Block List, Deprecated) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	IpaddressComparison []IpaddressComparisonInitParameters `json:"ipaddressComparison,omitempty" tf:"ipaddress_comparison,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// Fallback for not yet known type
	Key []KeyInitParameters `json:"key,omitempty" tf:"key,omitempty"`

	// (Block List) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	MobilePlatform []MobilePlatformInitParameters `json:"mobilePlatform,omitempty" tf:"mobile_platform,omitempty"`

	// (Block List, Deprecated) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	MobilePlatformComparison []MobilePlatformComparisonInitParameters `json:"mobilePlatformComparison,omitempty" tf:"mobile_platform_comparison,omitempty"`

	// (Block List) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	OsArch []OsArchInitParameters `json:"osArch,omitempty" tf:"os_arch,omitempty"`

	// (Block List) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	OsType []OsTypeInitParameters `json:"osType,omitempty" tf:"os_type,omitempty"`

	// (Block List, Deprecated) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	OsarchitectureComparison []OsarchitectureComparisonInitParameters `json:"osarchitectureComparison,omitempty" tf:"osarchitecture_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	OstypeComparison []OstypeComparisonInitParameters `json:"ostypeComparison,omitempty" tf:"ostype_comparison,omitempty"`

	// (Block List) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	PaasType []PaasTypeInitParameters `json:"paasType,omitempty" tf:"paas_type,omitempty"`

	// (Block List, Deprecated) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	PaasTypeComparison []PaasTypeComparisonInitParameters `json:"paasTypeComparison,omitempty" tf:"paas_type_comparison,omitempty"`

	// (Block List) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	ProcessMetadata []ProcessMetadataInitParameters `json:"processMetadata,omitempty" tf:"process_metadata,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	ProcessMetadataConditionKey []ProcessMetadataConditionKeyInitParameters `json:"processMetadataConditionKey,omitempty" tf:"process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	ServiceTopology []ServiceTopologyInitParameters `json:"serviceTopology,omitempty" tf:"service_topology,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	ServiceTopologyComparison []ServiceTopologyComparisonInitParameters `json:"serviceTopologyComparison,omitempty" tf:"service_topology_comparison,omitempty"`

	// (Block List) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	ServiceType []ServiceTypeInitParameters `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	ServiceTypeComparison []ServiceTypeComparisonInitParameters `json:"serviceTypeComparison,omitempty" tf:"service_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	SimpleHostTechComparison []SimpleHostTechComparisonInitParameters `json:"simpleHostTechComparison,omitempty" tf:"simple_host_tech_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	SimpleTechComparison []SimpleTechComparisonInitParameters `json:"simpleTechComparison,omitempty" tf:"simple_tech_comparison,omitempty"`

	// (Block List) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	String []StringInitParameters `json:"string,omitempty" tf:"string,omitempty"`

	// (Block List, Deprecated) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	StringComparison []StringComparisonInitParameters `json:"stringComparison,omitempty" tf:"string_comparison,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	StringConditionKey []StringConditionKeyInitParameters `json:"stringConditionKey,omitempty" tf:"string_condition_key,omitempty"`

	// (Block List) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	StringKey []StringKeyInitParameters `json:"stringKey,omitempty" tf:"string_key,omitempty"`

	// (Block List) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	SyntheticEngine []SyntheticEngineInitParameters `json:"syntheticEngine,omitempty" tf:"synthetic_engine,omitempty"`

	// (Block List, Deprecated) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	SyntheticEngineTypeComparison []SyntheticEngineTypeComparisonInitParameters `json:"syntheticEngineTypeComparison,omitempty" tf:"synthetic_engine_type_comparison,omitempty"`

	// (Block List) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	Tag []TagInitParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// (Block List, Deprecated) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	TagComparison []TagComparisonInitParameters `json:"tagComparison,omitempty" tf:"tag_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	Tech []TechInitParameters `json:"tech,omitempty" tf:"tech,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionObservation struct {

	// (Block List) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	ApplicationType []ApplicationTypeObservation `json:"applicationType,omitempty" tf:"application_type,omitempty"`

	// (Block List, Deprecated) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	ApplicationTypeComparison []ApplicationTypeComparisonObservation `json:"applicationTypeComparison,omitempty" tf:"application_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	AzureComputeMode []AzureComputeModeObservation `json:"azureComputeMode,omitempty" tf:"azure_compute_mode,omitempty"`

	// (Block List) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	AzureComputeModeComparison []AzureComputeModeComparisonObservation `json:"azureComputeModeComparison,omitempty" tf:"azure_compute_mode_comparison,omitempty"`

	// (Block List) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	AzureSku []AzureSkuObservation `json:"azureSku,omitempty" tf:"azure_sku,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	AzureSkuComparision []AzureSkuComparisionObservation `json:"azureSkuComparision,omitempty" tf:"azure_sku_comparision,omitempty"`

	// (Block List, Deprecated) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	BaseComparisonBasic []BaseComparisonBasicObservation `json:"baseComparisonBasic,omitempty" tf:"base_comparison_basic,omitempty"`

	// (Block List, Deprecated) Fallback for not yet known type (see below for nested schema)
	// Fallback for not yet known type
	BaseConditionKey []BaseConditionKeyObservation `json:"baseConditionKey,omitempty" tf:"base_condition_key,omitempty"`

	// (Block List) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	Bitness []BitnessObservation `json:"bitness,omitempty" tf:"bitness,omitempty"`

	// (Block List, Deprecated) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	BitnessComparision []BitnessComparisionObservation `json:"bitnessComparision,omitempty" tf:"bitness_comparision,omitempty"`

	// (Block List) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	CloudType []CloudTypeObservation `json:"cloudType,omitempty" tf:"cloud_type,omitempty"`

	// (Block List, Deprecated) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	CloudTypeComparison []CloudTypeComparisonObservation `json:"cloudTypeComparison,omitempty" tf:"cloud_type_comparison,omitempty"`

	// (Block List) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	Comparison []ComparisonObservation `json:"comparison,omitempty" tf:"comparison,omitempty"`

	// (Block List) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	CustomApplicationType []CustomApplicationTypeObservation `json:"customApplicationType,omitempty" tf:"custom_application_type,omitempty"`

	// (Block List, Deprecated) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	CustomApplicationTypeComparison []CustomApplicationTypeComparisonObservation `json:"customApplicationTypeComparison,omitempty" tf:"custom_application_type_comparison,omitempty"`

	// (Block List) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	CustomHostMetadata []CustomHostMetadataObservation `json:"customHostMetadata,omitempty" tf:"custom_host_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	CustomHostMetadataConditionKey []CustomHostMetadataConditionKeyObservation `json:"customHostMetadataConditionKey,omitempty" tf:"custom_host_metadata_condition_key,omitempty"`

	// (Block List) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	CustomProcessMetadata []CustomProcessMetadataObservation `json:"customProcessMetadata,omitempty" tf:"custom_process_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	CustomProcessMetadataConditionKey []CustomProcessMetadataConditionKeyObservation `json:"customProcessMetadataConditionKey,omitempty" tf:"custom_process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	DatabaseTopology []DatabaseTopologyObservation `json:"databaseTopology,omitempty" tf:"database_topology,omitempty"`

	// (Block List, Deprecated) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	DatabaseTopologyComparison []DatabaseTopologyComparisonObservation `json:"databaseTopologyComparison,omitempty" tf:"database_topology_comparison,omitempty"`

	// (Block List) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	DcrumDecoder []DcrumDecoderObservation `json:"dcrumDecoder,omitempty" tf:"dcrum_decoder,omitempty"`

	// (Block List, Deprecated) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	DcrumDecoderComparison []DcrumDecoderComparisonObservation `json:"dcrumDecoderComparison,omitempty" tf:"dcrum_decoder_comparison,omitempty"`

	// (Block List) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	Entity []EntityObservation `json:"entity,omitempty" tf:"entity,omitempty"`

	// (Block List, Deprecated) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	EntityIDComparison []EntityIDComparisonObservation `json:"entityIdComparison,omitempty" tf:"entity_id_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	HostTech []HostTechObservation `json:"hostTech,omitempty" tf:"host_tech,omitempty"`

	// (Block List) Comparison for HYPERVISOR_TYPE attributes (see below for nested schema)
	// Comparison for `HYPERVISOR_TYPE` attributes
	Hypervisor []HypervisorObservation `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	// (Block List, Deprecated) hypervisor_type_comparision is deprecated. Use hypervisor instead (see below for nested schema)
	// `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
	HypervisorTypeComparision []HypervisorTypeComparisionObservation `json:"hypervisorTypeComparision,omitempty" tf:"hypervisor_type_comparision,omitempty"`

	// (Block List) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	IndexedName []IndexedNameObservation `json:"indexedName,omitempty" tf:"indexed_name,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	IndexedNameComparison []IndexedNameComparisonObservation `json:"indexedNameComparison,omitempty" tf:"indexed_name_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	IndexedString []IndexedStringObservation `json:"indexedString,omitempty" tf:"indexed_string,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	IndexedStringComparison []IndexedStringComparisonObservation `json:"indexedStringComparison,omitempty" tf:"indexed_string_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	IndexedTag []IndexedTagObservation `json:"indexedTag,omitempty" tf:"indexed_tag,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	IndexedTagComparison []IndexedTagComparisonObservation `json:"indexedTagComparison,omitempty" tf:"indexed_tag_comparison,omitempty"`

	// (Block List) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	Integer []IntegerObservation `json:"integer,omitempty" tf:"integer,omitempty"`

	// (Block List, Deprecated) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	IntegerComparison []IntegerComparisonObservation `json:"integerComparison,omitempty" tf:"integer_comparison,omitempty"`

	// (Block List) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	Ipaddress []IpaddressObservation `json:"ipaddress,omitempty" tf:"ipaddress,omitempty"`

	// (Block List, Deprecated) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	IpaddressComparison []IpaddressComparisonObservation `json:"ipaddressComparison,omitempty" tf:"ipaddress_comparison,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// Fallback for not yet known type
	Key []KeyObservation `json:"key,omitempty" tf:"key,omitempty"`

	// (Block List) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	MobilePlatform []MobilePlatformObservation `json:"mobilePlatform,omitempty" tf:"mobile_platform,omitempty"`

	// (Block List, Deprecated) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	MobilePlatformComparison []MobilePlatformComparisonObservation `json:"mobilePlatformComparison,omitempty" tf:"mobile_platform_comparison,omitempty"`

	// (Block List) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	OsArch []OsArchObservation `json:"osArch,omitempty" tf:"os_arch,omitempty"`

	// (Block List) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	OsType []OsTypeObservation `json:"osType,omitempty" tf:"os_type,omitempty"`

	// (Block List, Deprecated) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	OsarchitectureComparison []OsarchitectureComparisonObservation `json:"osarchitectureComparison,omitempty" tf:"osarchitecture_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	OstypeComparison []OstypeComparisonObservation `json:"ostypeComparison,omitempty" tf:"ostype_comparison,omitempty"`

	// (Block List) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	PaasType []PaasTypeObservation `json:"paasType,omitempty" tf:"paas_type,omitempty"`

	// (Block List, Deprecated) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	PaasTypeComparison []PaasTypeComparisonObservation `json:"paasTypeComparison,omitempty" tf:"paas_type_comparison,omitempty"`

	// (Block List) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	ProcessMetadata []ProcessMetadataObservation `json:"processMetadata,omitempty" tf:"process_metadata,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	ProcessMetadataConditionKey []ProcessMetadataConditionKeyObservation `json:"processMetadataConditionKey,omitempty" tf:"process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	ServiceTopology []ServiceTopologyObservation `json:"serviceTopology,omitempty" tf:"service_topology,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	ServiceTopologyComparison []ServiceTopologyComparisonObservation `json:"serviceTopologyComparison,omitempty" tf:"service_topology_comparison,omitempty"`

	// (Block List) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	ServiceType []ServiceTypeObservation `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	ServiceTypeComparison []ServiceTypeComparisonObservation `json:"serviceTypeComparison,omitempty" tf:"service_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	SimpleHostTechComparison []SimpleHostTechComparisonObservation `json:"simpleHostTechComparison,omitempty" tf:"simple_host_tech_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	SimpleTechComparison []SimpleTechComparisonObservation `json:"simpleTechComparison,omitempty" tf:"simple_tech_comparison,omitempty"`

	// (Block List) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	String []StringObservation `json:"string,omitempty" tf:"string,omitempty"`

	// (Block List, Deprecated) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	StringComparison []StringComparisonObservation `json:"stringComparison,omitempty" tf:"string_comparison,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	StringConditionKey []StringConditionKeyObservation `json:"stringConditionKey,omitempty" tf:"string_condition_key,omitempty"`

	// (Block List) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	StringKey []StringKeyObservation `json:"stringKey,omitempty" tf:"string_key,omitempty"`

	// (Block List) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	SyntheticEngine []SyntheticEngineObservation `json:"syntheticEngine,omitempty" tf:"synthetic_engine,omitempty"`

	// (Block List, Deprecated) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	SyntheticEngineTypeComparison []SyntheticEngineTypeComparisonObservation `json:"syntheticEngineTypeComparison,omitempty" tf:"synthetic_engine_type_comparison,omitempty"`

	// (Block List) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// (Block List, Deprecated) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	TagComparison []TagComparisonObservation `json:"tagComparison,omitempty" tf:"tag_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	Tech []TechObservation `json:"tech,omitempty" tf:"tech,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionParameters struct {

	// (Block List) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	// +kubebuilder:validation:Optional
	ApplicationType []ApplicationTypeParameters `json:"applicationType,omitempty" tf:"application_type,omitempty"`

	// (Block List, Deprecated) Comparison for APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `APPLICATION_TYPE` attributes
	// +kubebuilder:validation:Optional
	ApplicationTypeComparison []ApplicationTypeComparisonParameters `json:"applicationTypeComparison,omitempty" tf:"application_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	// +kubebuilder:validation:Optional
	AzureComputeMode []AzureComputeModeParameters `json:"azureComputeMode,omitempty" tf:"azure_compute_mode,omitempty"`

	// (Block List) Comparison for AZURE_COMPUTE_MODE attributes (see below for nested schema)
	// Comparison for `AZURE_COMPUTE_MODE` attributes
	// +kubebuilder:validation:Optional
	AzureComputeModeComparison []AzureComputeModeComparisonParameters `json:"azureComputeModeComparison,omitempty" tf:"azure_compute_mode_comparison,omitempty"`

	// (Block List) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	// +kubebuilder:validation:Optional
	AzureSku []AzureSkuParameters `json:"azureSku,omitempty" tf:"azure_sku,omitempty"`

	// (Block List, Deprecated) Comparison for AZURE_SKU attributes (see below for nested schema)
	// Comparison for `AZURE_SKU` attributes
	// +kubebuilder:validation:Optional
	AzureSkuComparision []AzureSkuComparisionParameters `json:"azureSkuComparision,omitempty" tf:"azure_sku_comparision,omitempty"`

	// (Block List, Deprecated) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	// +kubebuilder:validation:Optional
	BaseComparisonBasic []BaseComparisonBasicParameters `json:"baseComparisonBasic,omitempty" tf:"base_comparison_basic,omitempty"`

	// (Block List, Deprecated) Fallback for not yet known type (see below for nested schema)
	// Fallback for not yet known type
	// +kubebuilder:validation:Optional
	BaseConditionKey []BaseConditionKeyParameters `json:"baseConditionKey,omitempty" tf:"base_condition_key,omitempty"`

	// (Block List) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	// +kubebuilder:validation:Optional
	Bitness []BitnessParameters `json:"bitness,omitempty" tf:"bitness,omitempty"`

	// (Block List, Deprecated) Comparison for BITNESS attributes (see below for nested schema)
	// Comparison for `BITNESS` attributes
	// +kubebuilder:validation:Optional
	BitnessComparision []BitnessComparisionParameters `json:"bitnessComparision,omitempty" tf:"bitness_comparision,omitempty"`

	// (Block List) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	// +kubebuilder:validation:Optional
	CloudType []CloudTypeParameters `json:"cloudType,omitempty" tf:"cloud_type,omitempty"`

	// (Block List, Deprecated) Comparison for CLOUD_TYPE attributes (see below for nested schema)
	// Comparison for `CLOUD_TYPE` attributes
	// +kubebuilder:validation:Optional
	CloudTypeComparison []CloudTypeComparisonParameters `json:"cloudTypeComparison,omitempty" tf:"cloud_type_comparison,omitempty"`

	// (Block List) A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property. (see below for nested schema)
	// A comparison that's yet unknown to the provider. Operator and Value need to be encoded using the 'unknowns' property.
	// +kubebuilder:validation:Optional
	Comparison []ComparisonParameters `json:"comparison,omitempty" tf:"comparison,omitempty"`

	// (Block List) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	// +kubebuilder:validation:Optional
	CustomApplicationType []CustomApplicationTypeParameters `json:"customApplicationType,omitempty" tf:"custom_application_type,omitempty"`

	// (Block List, Deprecated) Comparison for CUSTOM_APPLICATION_TYPE attributes (see below for nested schema)
	// Comparison for `CUSTOM_APPLICATION_TYPE` attributes
	// +kubebuilder:validation:Optional
	CustomApplicationTypeComparison []CustomApplicationTypeComparisonParameters `json:"customApplicationTypeComparison,omitempty" tf:"custom_application_type_comparison,omitempty"`

	// (Block List) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	// +kubebuilder:validation:Optional
	CustomHostMetadata []CustomHostMetadataParameters `json:"customHostMetadata,omitempty" tf:"custom_host_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Host Metadata (see below for nested schema)
	// Key for Custom Host Metadata
	// +kubebuilder:validation:Optional
	CustomHostMetadataConditionKey []CustomHostMetadataConditionKeyParameters `json:"customHostMetadataConditionKey,omitempty" tf:"custom_host_metadata_condition_key,omitempty"`

	// (Block List) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	// +kubebuilder:validation:Optional
	CustomProcessMetadata []CustomProcessMetadataParameters `json:"customProcessMetadata,omitempty" tf:"custom_process_metadata,omitempty"`

	// (Block List, Deprecated) Key for Custom Process Metadata (see below for nested schema)
	// Key for Custom Process Metadata
	// +kubebuilder:validation:Optional
	CustomProcessMetadataConditionKey []CustomProcessMetadataConditionKeyParameters `json:"customProcessMetadataConditionKey,omitempty" tf:"custom_process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	// +kubebuilder:validation:Optional
	DatabaseTopology []DatabaseTopologyParameters `json:"databaseTopology,omitempty" tf:"database_topology,omitempty"`

	// (Block List, Deprecated) Comparison for DATABASE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `DATABASE_TOPOLOGY` attributes
	// +kubebuilder:validation:Optional
	DatabaseTopologyComparison []DatabaseTopologyComparisonParameters `json:"databaseTopologyComparison,omitempty" tf:"database_topology_comparison,omitempty"`

	// (Block List) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	// +kubebuilder:validation:Optional
	DcrumDecoder []DcrumDecoderParameters `json:"dcrumDecoder,omitempty" tf:"dcrum_decoder,omitempty"`

	// (Block List, Deprecated) Comparison for DCRUM_DECODER_TYPE attributes (see below for nested schema)
	// Comparison for `DCRUM_DECODER_TYPE` attributes
	// +kubebuilder:validation:Optional
	DcrumDecoderComparison []DcrumDecoderComparisonParameters `json:"dcrumDecoderComparison,omitempty" tf:"dcrum_decoder_comparison,omitempty"`

	// (Block List) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	// +kubebuilder:validation:Optional
	Entity []EntityParameters `json:"entity,omitempty" tf:"entity,omitempty"`

	// (Block List, Deprecated) Comparison for ENTITY_ID attributes (see below for nested schema)
	// Comparison for `ENTITY_ID` attributes
	// +kubebuilder:validation:Optional
	EntityIDComparison []EntityIDComparisonParameters `json:"entityIdComparison,omitempty" tf:"entity_id_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	// +kubebuilder:validation:Optional
	HostTech []HostTechParameters `json:"hostTech,omitempty" tf:"host_tech,omitempty"`

	// (Block List) Comparison for HYPERVISOR_TYPE attributes (see below for nested schema)
	// Comparison for `HYPERVISOR_TYPE` attributes
	// +kubebuilder:validation:Optional
	Hypervisor []HypervisorParameters `json:"hypervisor,omitempty" tf:"hypervisor,omitempty"`

	// (Block List, Deprecated) hypervisor_type_comparision is deprecated. Use hypervisor instead (see below for nested schema)
	// `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
	// +kubebuilder:validation:Optional
	HypervisorTypeComparision []HypervisorTypeComparisionParameters `json:"hypervisorTypeComparision,omitempty" tf:"hypervisor_type_comparision,omitempty"`

	// (Block List) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	// +kubebuilder:validation:Optional
	IndexedName []IndexedNameParameters `json:"indexedName,omitempty" tf:"indexed_name,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_NAME attributes (see below for nested schema)
	// Comparison for `INDEXED_NAME` attributes
	// +kubebuilder:validation:Optional
	IndexedNameComparison []IndexedNameComparisonParameters `json:"indexedNameComparison,omitempty" tf:"indexed_name_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	// +kubebuilder:validation:Optional
	IndexedString []IndexedStringParameters `json:"indexedString,omitempty" tf:"indexed_string,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_STRING attributes (see below for nested schema)
	// Comparison for `INDEXED_STRING` attributes
	// +kubebuilder:validation:Optional
	IndexedStringComparison []IndexedStringComparisonParameters `json:"indexedStringComparison,omitempty" tf:"indexed_string_comparison,omitempty"`

	// (Block List) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	// +kubebuilder:validation:Optional
	IndexedTag []IndexedTagParameters `json:"indexedTag,omitempty" tf:"indexed_tag,omitempty"`

	// (Block List, Deprecated) Comparison for INDEXED_TAG attributes (see below for nested schema)
	// Comparison for `INDEXED_TAG` attributes
	// +kubebuilder:validation:Optional
	IndexedTagComparison []IndexedTagComparisonParameters `json:"indexedTagComparison,omitempty" tf:"indexed_tag_comparison,omitempty"`

	// (Block List) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	// +kubebuilder:validation:Optional
	Integer []IntegerParameters `json:"integer,omitempty" tf:"integer,omitempty"`

	// (Block List, Deprecated) Comparison for INTEGER attributes (see below for nested schema)
	// Comparison for `INTEGER` attributes
	// +kubebuilder:validation:Optional
	IntegerComparison []IntegerComparisonParameters `json:"integerComparison,omitempty" tf:"integer_comparison,omitempty"`

	// (Block List) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	// +kubebuilder:validation:Optional
	Ipaddress []IpaddressParameters `json:"ipaddress,omitempty" tf:"ipaddress,omitempty"`

	// (Block List, Deprecated) Comparison for IP_ADDRESS attributes (see below for nested schema)
	// Comparison for `IP_ADDRESS` attributes
	// +kubebuilder:validation:Optional
	IpaddressComparison []IpaddressComparisonParameters `json:"ipaddressComparison,omitempty" tf:"ipaddress_comparison,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// Fallback for not yet known type
	// +kubebuilder:validation:Optional
	Key []KeyParameters `json:"key,omitempty" tf:"key,omitempty"`

	// (Block List) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	// +kubebuilder:validation:Optional
	MobilePlatform []MobilePlatformParameters `json:"mobilePlatform,omitempty" tf:"mobile_platform,omitempty"`

	// (Block List, Deprecated) Comparison for MOBILE_PLATFORM attributes (see below for nested schema)
	// Comparison for `MOBILE_PLATFORM` attributes
	// +kubebuilder:validation:Optional
	MobilePlatformComparison []MobilePlatformComparisonParameters `json:"mobilePlatformComparison,omitempty" tf:"mobile_platform_comparison,omitempty"`

	// (Block List) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	// +kubebuilder:validation:Optional
	OsArch []OsArchParameters `json:"osArch,omitempty" tf:"os_arch,omitempty"`

	// (Block List) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	// +kubebuilder:validation:Optional
	OsType []OsTypeParameters `json:"osType,omitempty" tf:"os_type,omitempty"`

	// (Block List, Deprecated) Comparison for OS_ARCHITECTURE attributes (see below for nested schema)
	// Comparison for `OS_ARCHITECTURE` attributes
	// +kubebuilder:validation:Optional
	OsarchitectureComparison []OsarchitectureComparisonParameters `json:"osarchitectureComparison,omitempty" tf:"osarchitecture_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for OS_TYPE attributes (see below for nested schema)
	// Comparison for `OS_TYPE` attributes
	// +kubebuilder:validation:Optional
	OstypeComparison []OstypeComparisonParameters `json:"ostypeComparison,omitempty" tf:"ostype_comparison,omitempty"`

	// (Block List) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	// +kubebuilder:validation:Optional
	PaasType []PaasTypeParameters `json:"paasType,omitempty" tf:"paas_type,omitempty"`

	// (Block List, Deprecated) Comparison for PAAS_TYPE attributes (see below for nested schema)
	// Comparison for `PAAS_TYPE` attributes
	// +kubebuilder:validation:Optional
	PaasTypeComparison []PaasTypeComparisonParameters `json:"paasTypeComparison,omitempty" tf:"paas_type_comparison,omitempty"`

	// (Block List) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	// +kubebuilder:validation:Optional
	ProcessMetadata []ProcessMetadataParameters `json:"processMetadata,omitempty" tf:"process_metadata,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the PROCESS_PREDEFINED_METADATA_KEY type (see below for nested schema)
	// The key for dynamic attributes of the `PROCESS_PREDEFINED_METADATA_KEY` type
	// +kubebuilder:validation:Optional
	ProcessMetadataConditionKey []ProcessMetadataConditionKeyParameters `json:"processMetadataConditionKey,omitempty" tf:"process_metadata_condition_key,omitempty"`

	// (Block List) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	// +kubebuilder:validation:Optional
	ServiceTopology []ServiceTopologyParameters `json:"serviceTopology,omitempty" tf:"service_topology,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TOPOLOGY attributes (see below for nested schema)
	// Comparison for `SERVICE_TOPOLOGY` attributes
	// +kubebuilder:validation:Optional
	ServiceTopologyComparison []ServiceTopologyComparisonParameters `json:"serviceTopologyComparison,omitempty" tf:"service_topology_comparison,omitempty"`

	// (Block List) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	// +kubebuilder:validation:Optional
	ServiceType []ServiceTypeParameters `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// (Block List, Deprecated) Comparison for SERVICE_TYPE attributes (see below for nested schema)
	// Comparison for `SERVICE_TYPE` attributes
	// +kubebuilder:validation:Optional
	ServiceTypeComparison []ServiceTypeComparisonParameters `json:"serviceTypeComparison,omitempty" tf:"service_type_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_HOST_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_HOST_TECH` attributes
	// +kubebuilder:validation:Optional
	SimpleHostTechComparison []SimpleHostTechComparisonParameters `json:"simpleHostTechComparison,omitempty" tf:"simple_host_tech_comparison,omitempty"`

	// (Block List, Deprecated) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	// +kubebuilder:validation:Optional
	SimpleTechComparison []SimpleTechComparisonParameters `json:"simpleTechComparison,omitempty" tf:"simple_tech_comparison,omitempty"`

	// (Block List) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	// +kubebuilder:validation:Optional
	String []StringParameters `json:"string,omitempty" tf:"string,omitempty"`

	// (Block List, Deprecated) Comparison for STRING attributes (see below for nested schema)
	// Comparison for `STRING` attributes
	// +kubebuilder:validation:Optional
	StringComparison []StringComparisonParameters `json:"stringComparison,omitempty" tf:"string_comparison,omitempty"`

	// (Block List, Deprecated) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	// +kubebuilder:validation:Optional
	StringConditionKey []StringConditionKeyParameters `json:"stringConditionKey,omitempty" tf:"string_condition_key,omitempty"`

	// (Block List) The key for dynamic attributes of the STRING type (see below for nested schema)
	// The key for dynamic attributes of the `STRING` type
	// +kubebuilder:validation:Optional
	StringKey []StringKeyParameters `json:"stringKey,omitempty" tf:"string_key,omitempty"`

	// (Block List) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	// +kubebuilder:validation:Optional
	SyntheticEngine []SyntheticEngineParameters `json:"syntheticEngine,omitempty" tf:"synthetic_engine,omitempty"`

	// (Block List, Deprecated) Comparison for SYNTHETIC_ENGINE_TYPE attributes (see below for nested schema)
	// Comparison for `SYNTHETIC_ENGINE_TYPE` attributes
	// +kubebuilder:validation:Optional
	SyntheticEngineTypeComparison []SyntheticEngineTypeComparisonParameters `json:"syntheticEngineTypeComparison,omitempty" tf:"synthetic_engine_type_comparison,omitempty"`

	// (Block List) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// (Block List, Deprecated) Comparison for TAG attributes (see below for nested schema)
	// Comparison for `TAG` attributes
	// +kubebuilder:validation:Optional
	TagComparison []TagComparisonParameters `json:"tagComparison,omitempty" tf:"tag_comparison,omitempty"`

	// (Block List) Comparison for SIMPLE_TECH attributes (see below for nested schema)
	// Comparison for `SIMPLE_TECH` attributes
	// +kubebuilder:validation:Optional
	Tech []TechParameters `json:"tech,omitempty" tf:"tech,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ConditionsInitParameters struct {

	// (Block List) A conditions for the metric usage (see below for nested schema)
	// A conditions for the metric usage
	Condition []ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`
}

type ConditionsObservation struct {

	// (Block List) A conditions for the metric usage (see below for nested schema)
	// A conditions for the metric usage
	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`
}

type ConditionsParameters struct {

	// (Block List) A conditions for the metric usage (see below for nested schema)
	// A conditions for the metric usage
	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`
}

type CustomApplicationTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be CUSTOM_APPLICATION_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomApplicationTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be CUSTOM_APPLICATION_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomApplicationTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be CUSTOM_APPLICATION_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomApplicationTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomApplicationTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomApplicationTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AMAZON_ECHO, DESKTOP, EMBEDDED, IOT, MICROSOFT_HOLOLENS and UFO.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomHostMetadataConditionKeyDynamicKeyInitParameters struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomHostMetadataConditionKeyDynamicKeyObservation struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomHostMetadataConditionKeyDynamicKeyParameters struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomHostMetadataConditionKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []CustomHostMetadataConditionKeyDynamicKeyInitParameters `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be HOST_CUSTOM_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomHostMetadataConditionKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []CustomHostMetadataConditionKeyDynamicKeyObservation `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be HOST_CUSTOM_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomHostMetadataConditionKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	// +kubebuilder:validation:Optional
	DynamicKey []CustomHostMetadataConditionKeyDynamicKeyParameters `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be HOST_CUSTOM_METADATA_KEY
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomHostMetadataInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []DynamicKeyInitParameters `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomHostMetadataObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []DynamicKeyObservation `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomHostMetadataParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	// +kubebuilder:validation:Optional
	DynamicKey []DynamicKeyParameters `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataConditionKeyDynamicKeyInitParameters struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataConditionKeyDynamicKeyObservation struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataConditionKeyDynamicKeyParameters struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataConditionKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []CustomProcessMetadataConditionKeyDynamicKeyInitParameters `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataConditionKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []CustomProcessMetadataConditionKeyDynamicKeyObservation `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataConditionKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	// +kubebuilder:validation:Optional
	DynamicKey []CustomProcessMetadataConditionKeyDynamicKeyParameters `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be PROCESS_CUSTOM_METADATA_KEY
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataDynamicKeyInitParameters struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataDynamicKeyObservation struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataDynamicKeyParameters struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are CLOUD_FOUNDRY, ENVIRONMENT, GOOGLE_CLOUD, KUBERNETES and PLUGIN
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []CustomProcessMetadataDynamicKeyInitParameters `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	DynamicKey []CustomProcessMetadataDynamicKeyObservation `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type CustomProcessMetadataParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key
	// +kubebuilder:validation:Optional
	DynamicKey []CustomProcessMetadataDynamicKeyParameters `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DatabaseTopologyComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be DATABASE_TOPOLOGY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DatabaseTopologyComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be DATABASE_TOPOLOGY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DatabaseTopologyComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be DATABASE_TOPOLOGY
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DatabaseTopologyInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DatabaseTopologyObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DatabaseTopologyParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLUSTER, EMBEDDED, FAILOVER, IPC, LOAD_BALANCING, SINGLE_SERVER and UNSPECIFIED.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DcrumDecoderComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be DCRUM_DECODER_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DcrumDecoderComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be DCRUM_DECODER_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DcrumDecoderComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be DCRUM_DECODER_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DcrumDecoderInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DcrumDecoderObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DcrumDecoderParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ALL_OTHER, CITRIX_APPFLOW, CITRIX_ICA, CITRIX_ICA_OVER_SSL, DB2_DRDA, HTTP, HTTPS, HTTP_EXPRESS, INFORMIX, MYSQL, ORACLE, SAP_GUI, SAP_GUI_OVER_HTTP, SAP_GUI_OVER_HTTPS, SAP_HANA_DB, SAP_RFC, SSL and TDS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DynamicKeyInitParameters struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DynamicKeyObservation struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type DynamicKeyParameters struct {

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The actual key of the custom metadata
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// The source of the custom metadata. Possible values are ENVIRONMENT, GOOGLE_COMPUTE_ENGINE and PLUGIN
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type EntityIDComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be ENTITY_ID
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EntityIDComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be ENTITY_ID
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EntityIDComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be ENTITY_ID
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EntityInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EntityObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EntityParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Currently only EQUALS is supported. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HostTechInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value []ValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type HostTechObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value []ValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type HostTechParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value []ValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type HypervisorInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HypervisorObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HypervisorParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HypervisorTypeComparisionInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be HYPERVISOR_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HypervisorTypeComparisionObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be HYPERVISOR_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HypervisorTypeComparisionParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be HYPERVISOR_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AHV, HYPER_V, KVM, LPAR, QEMU, VIRTUAL_BOX, VMWARE, WPAR and XEN.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedNameComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INDEXED_NAME
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedNameComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INDEXED_NAME
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedNameComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INDEXED_NAME
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedNameInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedNameObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedNameParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS, CONTAINS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedStringComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INDEXED_STRING
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedStringComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INDEXED_STRING
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedStringComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INDEXED_STRING
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedStringInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedStringObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedStringParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INDEXED_TAG
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	Value []IndexedTagComparisonValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INDEXED_TAG
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	Value []IndexedTagComparisonValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INDEXED_TAG
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	// +kubebuilder:validation:Optional
	Value []IndexedTagComparisonValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagComparisonValueInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagComparisonValueObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagComparisonValueParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	Value []IndexedTagValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	Value []IndexedTagValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns EQUALS into DOES NOT EQUAL
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Either EQUALS or EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	// +kubebuilder:validation:Optional
	Value []IndexedTagValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagValueInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagValueObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IndexedTagValueParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IntegerComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INTEGER
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type IntegerComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INTEGER
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type IntegerComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be INTEGER
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type IntegerInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type IntegerObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type IntegerParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS, EXISTS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LOWER_THAN and LOWER_THAN_OR_EQUAL. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type IpaddressComparisonInitParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be IP_ADDRESS
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpaddressComparisonObservation struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be IP_ADDRESS
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpaddressComparisonParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	// +kubebuilder:validation:Optional
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be IP_ADDRESS
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpaddressInitParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpaddressObservation struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpaddressParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	// +kubebuilder:validation:Optional
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS, IS_IP_IN_RANGE and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type KeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Defines the actual set of fields depending on the value
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type KeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Defines the actual set of fields depending on the value
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type KeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Defines the actual set of fields depending on the value
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type MobilePlatformComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be MOBILE_PLATFORM
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MobilePlatformComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be MOBILE_PLATFORM
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MobilePlatformComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be MOBILE_PLATFORM
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MobilePlatformInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MobilePlatformObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MobilePlatformParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ANDROID, IOS, LINUX, MAC_OS, OTHER, TVOS and WINDOWS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OsArchInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OsArchObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OsArchParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OsTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OsTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OsTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OsarchitectureComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be OS_ARCHITECTURE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OsarchitectureComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be OS_ARCHITECTURE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OsarchitectureComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be OS_ARCHITECTURE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are ARM, IA64, PARISC, PPC, PPCLE, S390, SPARC, X86 and ZOS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OstypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be OS_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OstypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be OS_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type OstypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be OS_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AIX, DARWIN, HPUX, LINUX, SOLARIS, WINDOWS and ZOS.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PaasTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be PAAS_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PaasTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be PAAS_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PaasTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be PAAS_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PaasTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PaasTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PaasTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are AWS_ECS_EC2, AWS_ECS_FARGATE, AWS_LAMBDA, AZURE_FUNCTIONS, AZURE_WEBSITES, CLOUD_FOUNDRY, GOOGLE_APP_ENGINE, HEROKU, KUBERNETES and OPENSHIFT.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ProcessMetadataConditionKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ProcessMetadataConditionKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ProcessMetadataConditionKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	// +kubebuilder:validation:Optional
	DynamicKey *string `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be PROCESS_PREDEFINED_METADATA_KEY
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ProcessMetadataInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ProcessMetadataObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ProcessMetadataParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are AMAZON_ECR_IMAGE_ACCOUNT_ID,AMAZON_ECR_IMAGE_REGION, AMAZON_LAMBDA_FUNCTION_NAME, AMAZON_REGION, APACHE_CONFIG_PATH, APACHE_SPARK_MASTER_IP_ADDRESS, ASP_DOT_NET_CORE_APPLICATION_PATH, AWS_ECS_CLUSTER, AWS_ECS_CONTAINERNAME, AWS_ECS_FAMILY, AWS_ECS_REVISION, CASSANDRA_CLUSTER_NAME, CATALINA_BASE, CATALINA_HOME, CLOUD_FOUNDRY_APP_ID, CLOUD_FOUNDRY_APP_NAME, CLOUD_FOUNDRY_INSTANCE_INDEX, CLOUD_FOUNDRY_SPACE_ID, CLOUD_FOUNDRY_SPACE_NAME, COLDFUSION_JVM_CONFIG_FILE, COLDFUSION_SERVICE_NAME, COMMAND_LINE_ARGS, DOTNET_COMMAND, DOTNET_COMMAND_PATH, DYNATRACE_CLUSTER_ID, DYNATRACE_NODE_ID, ELASTICSEARCH_CLUSTER_NAME, ELASTICSEARCH_NODE_NAME, EQUINOX_CONFIG_PATH, EXE_NAME, EXE_PATH, GLASS_FISH_DOMAIN_NAME, GLASS_FISH_INSTANCE_NAME, GOOGLE_APP_ENGINE_INSTANCE, GOOGLE_APP_ENGINE_SERVICE, GOOGLE_CLOUD_PROJECT, HYBRIS_BIN_DIRECTORY, HYBRIS_CONFIG_DIRECTORY, HYBRIS_DATA_DIRECTORY, IBM_CICS_REGION, IBM_CTG_NAME, IBM_IMS_CONNECT_REGION, IBM_IMS_CONTROL_REGION, IBM_IMS_MESSAGE_PROCESSING_REGION, IBM_IMS_SOAP_GW_NAME, IBM_INTEGRATION_NODE_NAME, IBM_INTEGRATION_SERVER_NAME, IIS_APP_POOL, IIS_ROLE_NAME, JAVA_JAR_FILE, JAVA_JAR_PATH, JAVA_MAIN_CLASS, JAVA_MAIN_MODULE, JBOSS_HOME, JBOSS_MODE, JBOSS_SERVER_NAME, KUBERNETES_BASE_POD_NAME, KUBERNETES_CONTAINER_NAME, KUBERNETES_FULL_POD_NAME, KUBERNETES_NAMESPACE, KUBERNETES_POD_UID, MSSQL_INSTANCE_NAME, NODE_JS_APP_BASE_DIRECTORY, NODE_JS_APP_NAME, NODE_JS_SCRIPT_NAME, ORACLE_SID, PG_ID_CALC_INPUT_KEY_LINKAGE, PHP_SCRIPT_PATH, PHP_WORKING_DIRECTORY, RUBY_APP_ROOT_PATH, RUBY_SCRIPT_PATH, RULE_RESULT, SOFTWAREAG_INSTALL_ROOT, SOFTWAREAG_PRODUCTPROPNAME, SPRINGBOOT_APP_NAME, SPRINGBOOT_PROFILE_NAME, SPRINGBOOT_STARTUP_CLASS, TIBCO_BUSINESSWORKS_CE_APP_NAME, TIBCO_BUSINESSWORKS_CE_VERSION, TIBCO_BUSINESS_WORKS_APP_NODE_NAME, TIBCO_BUSINESS_WORKS_APP_SPACE_NAME, TIBCO_BUSINESS_WORKS_DOMAIN_NAME, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE, TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH, TIBCO_BUSINESS_WORKS_HOME, VARNISH_INSTANCE_NAME, WEB_LOGIC_CLUSTER_NAME, WEB_LOGIC_DOMAIN_NAME, WEB_LOGIC_HOME, WEB_LOGIC_NAME, WEB_SPHERE_CELL_NAME, WEB_SPHERE_CLUSTER_NAME, WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME
	// +kubebuilder:validation:Optional
	DynamicKey *string `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ProcessgroupNamingInitParameters struct {

	// (Block List) A list of matching conditions of the rule.  The rule applies only if all conditions are fulfilled (see below for nested schema)
	// A list of matching conditions of the rule.  The rule applies only if **all** conditions are fulfilled
	Conditions []ConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The name to be assigned to matching entities. You can use the following placeholders here:  * {AwsAutoScalingGroup:Name}  * {AwsAvailabilityZone:Name}  * {AwsElasticLoadBalancer:Name}  * {AwsRelationalDatabaseService:DBName}  * {AwsRelationalDatabaseService:Endpoint}  * {AwsRelationalDatabaseService:Engine}  * {AwsRelationalDatabaseService:InstanceClass}  * {AwsRelationalDatabaseService:Name}  * {AwsRelationalDatabaseService:Port}  * {AzureRegion:Name}  * {AzureScaleSet:Name}  * {AzureVm:Name}  * {CloudFoundryOrganization:Name}  * {CustomDevice:DetectedName}  * {CustomDevice:DnsName}  * {CustomDevice:IpAddress}  * {CustomDevice:Port}  * {DockerContainerGroupInstance:ContainerName}  * {DockerContainerGroupInstance:FullImageName}  * {DockerContainerGroupInstance:ImageVersion}  * {DockerContainerGroupInstance:StrippedImageName}  * {ESXIHost:HardwareModel}  * {ESXIHost:HardwareVendor}  * {ESXIHost:Name}  * {ESXIHost:ProductName}  * {ESXIHost:ProductVersion}  * {Ec2Instance:AmiId}  * {Ec2Instance:BeanstalkEnvironmentName}  * {Ec2Instance:InstanceId}  * {Ec2Instance:InstanceType}  * {Ec2Instance:LocalHostName}  * {Ec2Instance:Name}  * {Ec2Instance:PublicHostName}  * {Ec2Instance:SecurityGroup}  * {GoogleComputeInstance:Id}  * {GoogleComputeInstance:IpAddresses}  * {GoogleComputeInstance:MachineType}  * {GoogleComputeInstance:Name}  * {GoogleComputeInstance:ProjectId}  * {GoogleComputeInstance:Project}  * {Host:AWSNameTag}  * {Host:AixLogicalCpuCount}  * {Host:AzureHostName}  * {Host:AzureSiteName}  * {Host:BoshDeploymentId}  * {Host:BoshInstanceId}  * {Host:BoshInstanceName}  * {Host:BoshName}  * {Host:BoshStemcellVersion}  * {Host:CpuCores}  * {Host:DetectedName}  * {Host:Environment:AppName}  * {Host:Environment:BoshReleaseVersion}  * {Host:Environment:Environment}  * {Host:Environment:Link}  * {Host:Environment:Organization}  * {Host:Environment:Owner}  * {Host:Environment:Support}  * {Host:IpAddress}  * {Host:LogicalCpuCores}  * {Host:OneAgentCustomHostName}  * {Host:OperatingSystemVersion}  * {Host:PaasMemoryLimit}  * {HostGroup:Name}  * {KubernetesCluster:Name}  * {KubernetesNode:DetectedName}  * {OpenstackAvailabilityZone:Name}  * {OpenstackZone:Name}  * {OpenstackComputeNode:Name}  * {OpenstackProject:Name}  * {OpenstackVm:InstanceType}  * {OpenstackVm:Name}  * {OpenstackVm:SecurityGroup}  * {ProcessGroup:AmazonECRImageAccountId}  * {ProcessGroup:AmazonECRImageRegion}  * {ProcessGroup:AmazonECSCluster}  * {ProcessGroup:AmazonECSContainerName}  * {ProcessGroup:AmazonECSFamily}  * {ProcessGroup:AmazonECSRevision}  * {ProcessGroup:AmazonLambdaFunctionName}  * {ProcessGroup:AmazonRegion}  * {ProcessGroup:ApacheConfigPath}  * {ProcessGroup:ApacheSparkMasterIpAddress}  * {ProcessGroup:AspDotNetCoreApplicationPath}  * {ProcessGroup:AspDotNetCoreApplicationPath}  * {ProcessGroup:AzureHostName}  * {ProcessGroup:AzureSiteName}  * {ProcessGroup:CassandraClusterName}  * {ProcessGroup:CatalinaBase}  * {ProcessGroup:CatalinaHome}  * {ProcessGroup:CloudFoundryAppId}  * {ProcessGroup:CloudFoundryAppName}  * {ProcessGroup:CloudFoundryInstanceIndex}  * {ProcessGroup:CloudFoundrySpaceId}  * {ProcessGroup:CloudFoundrySpaceName}  * {ProcessGroup:ColdFusionJvmConfigFile}  * {ProcessGroup:ColdFusionServiceName}  * {ProcessGroup:CommandLineArgs}  * {ProcessGroup:DetectedName}  * {ProcessGroup:DotNetCommandPath}  * {ProcessGroup:DotNetCommand}  * {ProcessGroup:DotNetClusterId}  * {ProcessGroup:DotNetNodeId}  * {ProcessGroup:ElasticsearchClusterName}  * {ProcessGroup:ElasticsearchNodeName}  * {ProcessGroup:EquinoxConfigPath}  * {ProcessGroup:ExeName}  * {ProcessGroup:ExePath}  * {ProcessGroup:GlassFishDomainName}  * {ProcessGroup:GlassFishInstanceName}  * {ProcessGroup:GoogleAppEngineInstance}  * {ProcessGroup:GoogleAppEngineService}  * {ProcessGroup:GoogleCloudProject}  * {ProcessGroup:HybrisBinDirectory}  * {ProcessGroup:HybrisConfigDirectory}  * {ProcessGroup:HybrisConfigDirectory}  * {ProcessGroup:HybrisDataDirectory}  * {ProcessGroup:IBMCicsRegion}  * {ProcessGroup:IBMCtgName}  * {ProcessGroup:IBMImsConnectRegion}  * {ProcessGroup:IBMImsControlRegion}  * {ProcessGroup:IBMImsMessageProcessingRegion}  * {ProcessGroup:IBMImsSoapGwName}  * {ProcessGroup:IBMIntegrationNodeName}  * {ProcessGroup:IBMIntegrationServerName}  * {ProcessGroup:IISAppPool}  * {ProcessGroup:IISRoleName}  * {ProcessGroup:JbossHome}  * {ProcessGroup:JbossMode}  * {ProcessGroup:JbossServerName}  * {ProcessGroup:JavaJarFile}  * {ProcessGroup:JavaJarPath}  * {ProcessGroup:JavaMainCLass}  * {ProcessGroup:KubernetesBasePodName}  * {ProcessGroup:KubernetesContainerName}  * {ProcessGroup:KubernetesFullPodName}  * {ProcessGroup:KubernetesNamespace}  * {ProcessGroup:KubernetesPodUid}  * {ProcessGroup:MssqlInstanceName}  * {ProcessGroup:NodeJsAppBaseDirectory}  * {ProcessGroup:NodeJsAppName}  * {ProcessGroup:NodeJsScriptName}  * {ProcessGroup:OracleSid}  * {ProcessGroup:PHPScriptPath}  * {ProcessGroup:PHPWorkingDirectory}  * {ProcessGroup:Ports}  * {ProcessGroup:RubyAppRootPath}  * {ProcessGroup:RubyScriptPath}  * {ProcessGroup:SoftwareAGInstallRoot}  * {ProcessGroup:SoftwareAGProductPropertyName}  * {ProcessGroup:SpringBootAppName}  * {ProcessGroup:SpringBootProfileName}  * {ProcessGroup:SpringBootStartupClass}  * {ProcessGroup:TIBCOBusinessWorksAppNodeName}  * {ProcessGroup:TIBCOBusinessWorksAppSpaceName}  * {ProcessGroup:TIBCOBusinessWorksCeAppName}  * {ProcessGroup:TIBCOBusinessWorksCeVersion}  * {ProcessGroup:TIBCOBusinessWorksDomainName}  * {ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}  * {ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}  * {ProcessGroup:TIBCOBusinessWorksHome}  * {ProcessGroup:VarnishInstanceName}  * {ProcessGroup:WebLogicClusterName}  * {ProcessGroup:WebLogicDomainName}  * {ProcessGroup:WebLogicHome}  * {ProcessGroup:WebLogicName}  * {ProcessGroup:WebSphereCellName}  * {ProcessGroup:WebSphereClusterName}  * {ProcessGroup:WebSphereNodeName}  * {ProcessGroup:WebSphereServerName}  * {ProcessGroup:ActorSystem}  * {Service:STGServerName}  * {Service:DatabaseHostName}  * {Service:DatabaseName}  * {Service:DatabaseVendor}  * {Service:DetectedName}  * {Service:EndpointPath}  * {Service:EndpointPathGatewayUrl}  * {Service:IIBApplicationName}  * {Service:MessageListenerClassName}  * {Service:Port}  * {Service:PublicDomainName}  * {Service:RemoteEndpoint}  * {Service:RemoteName}  * {Service:WebApplicationId}  * {Service:WebContextRoot}  * {Service:WebServerName}  * {Service:WebServiceNamespace}  * {Service:WebServiceName}  * {VmwareDatacenter:Name}  * `{VmwareVm:Name}
	// The name to be assigned to matching entities. You can use the following placeholders here:  * `{AwsAutoScalingGroup:Name}`  * `{AwsAvailabilityZone:Name}`  * `{AwsElasticLoadBalancer:Name}`  * `{AwsRelationalDatabaseService:DBName}`  * `{AwsRelationalDatabaseService:Endpoint}`  * `{AwsRelationalDatabaseService:Engine}`  * `{AwsRelationalDatabaseService:InstanceClass}`  * `{AwsRelationalDatabaseService:Name}`  * `{AwsRelationalDatabaseService:Port}`  * `{AzureRegion:Name}`  * `{AzureScaleSet:Name}`  * `{AzureVm:Name}`  * `{CloudFoundryOrganization:Name}`  * `{CustomDevice:DetectedName}`  * `{CustomDevice:DnsName}`  * `{CustomDevice:IpAddress}`  * `{CustomDevice:Port}`  * `{DockerContainerGroupInstance:ContainerName}`  * `{DockerContainerGroupInstance:FullImageName}`  * `{DockerContainerGroupInstance:ImageVersion}`  * `{DockerContainerGroupInstance:StrippedImageName}`  * `{ESXIHost:HardwareModel}`  * `{ESXIHost:HardwareVendor}`  * `{ESXIHost:Name}`  * `{ESXIHost:ProductName}`  * `{ESXIHost:ProductVersion}`  * `{Ec2Instance:AmiId}`  * `{Ec2Instance:BeanstalkEnvironmentName}`  * `{Ec2Instance:InstanceId}`  * `{Ec2Instance:InstanceType}`  * `{Ec2Instance:LocalHostName}`  * `{Ec2Instance:Name}`  * `{Ec2Instance:PublicHostName}`  * `{Ec2Instance:SecurityGroup}`  * `{GoogleComputeInstance:Id}`  * `{GoogleComputeInstance:IpAddresses}`  * `{GoogleComputeInstance:MachineType}`  * `{GoogleComputeInstance:Name}`  * `{GoogleComputeInstance:ProjectId}`  * `{GoogleComputeInstance:Project}`  * `{Host:AWSNameTag}`  * `{Host:AixLogicalCpuCount}`  * `{Host:AzureHostName}`  * `{Host:AzureSiteName}`  * `{Host:BoshDeploymentId}`  * `{Host:BoshInstanceId}`  * `{Host:BoshInstanceName}`  * `{Host:BoshName}`  * `{Host:BoshStemcellVersion}`  * `{Host:CpuCores}`  * `{Host:DetectedName}`  * `{Host:Environment:AppName}`  * `{Host:Environment:BoshReleaseVersion}`  * `{Host:Environment:Environment}`  * `{Host:Environment:Link}`  * `{Host:Environment:Organization}`  * `{Host:Environment:Owner}`  * `{Host:Environment:Support}`  * `{Host:IpAddress}`  * `{Host:LogicalCpuCores}`  * `{Host:OneAgentCustomHostName}`  * `{Host:OperatingSystemVersion}`  * `{Host:PaasMemoryLimit}`  * `{HostGroup:Name}`  * `{KubernetesCluster:Name}`  * `{KubernetesNode:DetectedName}`  * `{OpenstackAvailabilityZone:Name}`  * `{OpenstackZone:Name}`  * `{OpenstackComputeNode:Name}`  * `{OpenstackProject:Name}`  * `{OpenstackVm:InstanceType}`  * `{OpenstackVm:Name}`  * `{OpenstackVm:SecurityGroup}`  * `{ProcessGroup:AmazonECRImageAccountId}`  * `{ProcessGroup:AmazonECRImageRegion}`  * `{ProcessGroup:AmazonECSCluster}`  * `{ProcessGroup:AmazonECSContainerName}`  * `{ProcessGroup:AmazonECSFamily}`  * `{ProcessGroup:AmazonECSRevision}`  * `{ProcessGroup:AmazonLambdaFunctionName}`  * `{ProcessGroup:AmazonRegion}`  * `{ProcessGroup:ApacheConfigPath}`  * `{ProcessGroup:ApacheSparkMasterIpAddress}`  * `{ProcessGroup:AspDotNetCoreApplicationPath}`  * `{ProcessGroup:AspDotNetCoreApplicationPath}`  * `{ProcessGroup:AzureHostName}`  * `{ProcessGroup:AzureSiteName}`  * `{ProcessGroup:CassandraClusterName}`  * `{ProcessGroup:CatalinaBase}`  * `{ProcessGroup:CatalinaHome}`  * `{ProcessGroup:CloudFoundryAppId}`  * `{ProcessGroup:CloudFoundryAppName}`  * `{ProcessGroup:CloudFoundryInstanceIndex}`  * `{ProcessGroup:CloudFoundrySpaceId}`  * `{ProcessGroup:CloudFoundrySpaceName}`  * `{ProcessGroup:ColdFusionJvmConfigFile}`  * `{ProcessGroup:ColdFusionServiceName}`  * `{ProcessGroup:CommandLineArgs}`  * `{ProcessGroup:DetectedName}`  * `{ProcessGroup:DotNetCommandPath}`  * `{ProcessGroup:DotNetCommand}`  * `{ProcessGroup:DotNetClusterId}`  * `{ProcessGroup:DotNetNodeId}`  * `{ProcessGroup:ElasticsearchClusterName}`  * `{ProcessGroup:ElasticsearchNodeName}`  * `{ProcessGroup:EquinoxConfigPath}`  * `{ProcessGroup:ExeName}`  * `{ProcessGroup:ExePath}`  * `{ProcessGroup:GlassFishDomainName}`  * `{ProcessGroup:GlassFishInstanceName}`  * `{ProcessGroup:GoogleAppEngineInstance}`  * `{ProcessGroup:GoogleAppEngineService}`  * `{ProcessGroup:GoogleCloudProject}`  * `{ProcessGroup:HybrisBinDirectory}`  * `{ProcessGroup:HybrisConfigDirectory}`  * `{ProcessGroup:HybrisConfigDirectory}`  * `{ProcessGroup:HybrisDataDirectory}`  * `{ProcessGroup:IBMCicsRegion}`  * `{ProcessGroup:IBMCtgName}`  * `{ProcessGroup:IBMImsConnectRegion}`  * `{ProcessGroup:IBMImsControlRegion}`  * `{ProcessGroup:IBMImsMessageProcessingRegion}`  * `{ProcessGroup:IBMImsSoapGwName}`  * `{ProcessGroup:IBMIntegrationNodeName}`  * `{ProcessGroup:IBMIntegrationServerName}`  * `{ProcessGroup:IISAppPool}`  * `{ProcessGroup:IISRoleName}`  * `{ProcessGroup:JbossHome}`  * `{ProcessGroup:JbossMode}`  * `{ProcessGroup:JbossServerName}`  * `{ProcessGroup:JavaJarFile}`  * `{ProcessGroup:JavaJarPath}`  * `{ProcessGroup:JavaMainCLass}`  * `{ProcessGroup:KubernetesBasePodName}`  * `{ProcessGroup:KubernetesContainerName}`  * `{ProcessGroup:KubernetesFullPodName}`  * `{ProcessGroup:KubernetesNamespace}`  * `{ProcessGroup:KubernetesPodUid}`  * `{ProcessGroup:MssqlInstanceName}`  * `{ProcessGroup:NodeJsAppBaseDirectory}`  * `{ProcessGroup:NodeJsAppName}`  * `{ProcessGroup:NodeJsScriptName}`  * `{ProcessGroup:OracleSid}`  * `{ProcessGroup:PHPScriptPath}`  * `{ProcessGroup:PHPWorkingDirectory}`  * `{ProcessGroup:Ports}`  * `{ProcessGroup:RubyAppRootPath}`  * `{ProcessGroup:RubyScriptPath}`  * `{ProcessGroup:SoftwareAGInstallRoot}`  * `{ProcessGroup:SoftwareAGProductPropertyName}`  * `{ProcessGroup:SpringBootAppName}`  * `{ProcessGroup:SpringBootProfileName}`  * `{ProcessGroup:SpringBootStartupClass}`  * `{ProcessGroup:TIBCOBusinessWorksAppNodeName}`  * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}`  * `{ProcessGroup:TIBCOBusinessWorksCeAppName}`  * `{ProcessGroup:TIBCOBusinessWorksCeVersion}`  * `{ProcessGroup:TIBCOBusinessWorksDomainName}`  * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}`  * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}`  * `{ProcessGroup:TIBCOBusinessWorksHome}`  * `{ProcessGroup:VarnishInstanceName}`  * `{ProcessGroup:WebLogicClusterName}`  * `{ProcessGroup:WebLogicDomainName}`  * `{ProcessGroup:WebLogicHome}`  * `{ProcessGroup:WebLogicName}`  * `{ProcessGroup:WebSphereCellName}`  * `{ProcessGroup:WebSphereClusterName}`  * `{ProcessGroup:WebSphereNodeName}`  * `{ProcessGroup:WebSphereServerName}`  * `{ProcessGroup:ActorSystem}`  * `{Service:STGServerName}`  * `{Service:DatabaseHostName}`  * `{Service:DatabaseName}`  * `{Service:DatabaseVendor}`  * `{Service:DetectedName}`  * `{Service:EndpointPath}`  * `{Service:EndpointPathGatewayUrl}`  * `{Service:IIBApplicationName}`  * `{Service:MessageListenerClassName}`  * `{Service:Port}`  * `{Service:PublicDomainName}`  * `{Service:RemoteEndpoint}`  * `{Service:RemoteName}`  * `{Service:WebApplicationId}`  * `{Service:WebContextRoot}`  * `{Service:WebServerName}`  * `{Service:WebServiceNamespace}`  * `{Service:WebServiceName}`  * `{VmwareDatacenter:Name}`  * `{VmwareVm:Name}
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// (String) The name of the rule
	// The name of the rule
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ProcessgroupNamingObservation struct {

	// (Block List) A list of matching conditions of the rule.  The rule applies only if all conditions are fulfilled (see below for nested schema)
	// A list of matching conditions of the rule.  The rule applies only if **all** conditions are fulfilled
	Conditions []ConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The name to be assigned to matching entities. You can use the following placeholders here:  * {AwsAutoScalingGroup:Name}  * {AwsAvailabilityZone:Name}  * {AwsElasticLoadBalancer:Name}  * {AwsRelationalDatabaseService:DBName}  * {AwsRelationalDatabaseService:Endpoint}  * {AwsRelationalDatabaseService:Engine}  * {AwsRelationalDatabaseService:InstanceClass}  * {AwsRelationalDatabaseService:Name}  * {AwsRelationalDatabaseService:Port}  * {AzureRegion:Name}  * {AzureScaleSet:Name}  * {AzureVm:Name}  * {CloudFoundryOrganization:Name}  * {CustomDevice:DetectedName}  * {CustomDevice:DnsName}  * {CustomDevice:IpAddress}  * {CustomDevice:Port}  * {DockerContainerGroupInstance:ContainerName}  * {DockerContainerGroupInstance:FullImageName}  * {DockerContainerGroupInstance:ImageVersion}  * {DockerContainerGroupInstance:StrippedImageName}  * {ESXIHost:HardwareModel}  * {ESXIHost:HardwareVendor}  * {ESXIHost:Name}  * {ESXIHost:ProductName}  * {ESXIHost:ProductVersion}  * {Ec2Instance:AmiId}  * {Ec2Instance:BeanstalkEnvironmentName}  * {Ec2Instance:InstanceId}  * {Ec2Instance:InstanceType}  * {Ec2Instance:LocalHostName}  * {Ec2Instance:Name}  * {Ec2Instance:PublicHostName}  * {Ec2Instance:SecurityGroup}  * {GoogleComputeInstance:Id}  * {GoogleComputeInstance:IpAddresses}  * {GoogleComputeInstance:MachineType}  * {GoogleComputeInstance:Name}  * {GoogleComputeInstance:ProjectId}  * {GoogleComputeInstance:Project}  * {Host:AWSNameTag}  * {Host:AixLogicalCpuCount}  * {Host:AzureHostName}  * {Host:AzureSiteName}  * {Host:BoshDeploymentId}  * {Host:BoshInstanceId}  * {Host:BoshInstanceName}  * {Host:BoshName}  * {Host:BoshStemcellVersion}  * {Host:CpuCores}  * {Host:DetectedName}  * {Host:Environment:AppName}  * {Host:Environment:BoshReleaseVersion}  * {Host:Environment:Environment}  * {Host:Environment:Link}  * {Host:Environment:Organization}  * {Host:Environment:Owner}  * {Host:Environment:Support}  * {Host:IpAddress}  * {Host:LogicalCpuCores}  * {Host:OneAgentCustomHostName}  * {Host:OperatingSystemVersion}  * {Host:PaasMemoryLimit}  * {HostGroup:Name}  * {KubernetesCluster:Name}  * {KubernetesNode:DetectedName}  * {OpenstackAvailabilityZone:Name}  * {OpenstackZone:Name}  * {OpenstackComputeNode:Name}  * {OpenstackProject:Name}  * {OpenstackVm:InstanceType}  * {OpenstackVm:Name}  * {OpenstackVm:SecurityGroup}  * {ProcessGroup:AmazonECRImageAccountId}  * {ProcessGroup:AmazonECRImageRegion}  * {ProcessGroup:AmazonECSCluster}  * {ProcessGroup:AmazonECSContainerName}  * {ProcessGroup:AmazonECSFamily}  * {ProcessGroup:AmazonECSRevision}  * {ProcessGroup:AmazonLambdaFunctionName}  * {ProcessGroup:AmazonRegion}  * {ProcessGroup:ApacheConfigPath}  * {ProcessGroup:ApacheSparkMasterIpAddress}  * {ProcessGroup:AspDotNetCoreApplicationPath}  * {ProcessGroup:AspDotNetCoreApplicationPath}  * {ProcessGroup:AzureHostName}  * {ProcessGroup:AzureSiteName}  * {ProcessGroup:CassandraClusterName}  * {ProcessGroup:CatalinaBase}  * {ProcessGroup:CatalinaHome}  * {ProcessGroup:CloudFoundryAppId}  * {ProcessGroup:CloudFoundryAppName}  * {ProcessGroup:CloudFoundryInstanceIndex}  * {ProcessGroup:CloudFoundrySpaceId}  * {ProcessGroup:CloudFoundrySpaceName}  * {ProcessGroup:ColdFusionJvmConfigFile}  * {ProcessGroup:ColdFusionServiceName}  * {ProcessGroup:CommandLineArgs}  * {ProcessGroup:DetectedName}  * {ProcessGroup:DotNetCommandPath}  * {ProcessGroup:DotNetCommand}  * {ProcessGroup:DotNetClusterId}  * {ProcessGroup:DotNetNodeId}  * {ProcessGroup:ElasticsearchClusterName}  * {ProcessGroup:ElasticsearchNodeName}  * {ProcessGroup:EquinoxConfigPath}  * {ProcessGroup:ExeName}  * {ProcessGroup:ExePath}  * {ProcessGroup:GlassFishDomainName}  * {ProcessGroup:GlassFishInstanceName}  * {ProcessGroup:GoogleAppEngineInstance}  * {ProcessGroup:GoogleAppEngineService}  * {ProcessGroup:GoogleCloudProject}  * {ProcessGroup:HybrisBinDirectory}  * {ProcessGroup:HybrisConfigDirectory}  * {ProcessGroup:HybrisConfigDirectory}  * {ProcessGroup:HybrisDataDirectory}  * {ProcessGroup:IBMCicsRegion}  * {ProcessGroup:IBMCtgName}  * {ProcessGroup:IBMImsConnectRegion}  * {ProcessGroup:IBMImsControlRegion}  * {ProcessGroup:IBMImsMessageProcessingRegion}  * {ProcessGroup:IBMImsSoapGwName}  * {ProcessGroup:IBMIntegrationNodeName}  * {ProcessGroup:IBMIntegrationServerName}  * {ProcessGroup:IISAppPool}  * {ProcessGroup:IISRoleName}  * {ProcessGroup:JbossHome}  * {ProcessGroup:JbossMode}  * {ProcessGroup:JbossServerName}  * {ProcessGroup:JavaJarFile}  * {ProcessGroup:JavaJarPath}  * {ProcessGroup:JavaMainCLass}  * {ProcessGroup:KubernetesBasePodName}  * {ProcessGroup:KubernetesContainerName}  * {ProcessGroup:KubernetesFullPodName}  * {ProcessGroup:KubernetesNamespace}  * {ProcessGroup:KubernetesPodUid}  * {ProcessGroup:MssqlInstanceName}  * {ProcessGroup:NodeJsAppBaseDirectory}  * {ProcessGroup:NodeJsAppName}  * {ProcessGroup:NodeJsScriptName}  * {ProcessGroup:OracleSid}  * {ProcessGroup:PHPScriptPath}  * {ProcessGroup:PHPWorkingDirectory}  * {ProcessGroup:Ports}  * {ProcessGroup:RubyAppRootPath}  * {ProcessGroup:RubyScriptPath}  * {ProcessGroup:SoftwareAGInstallRoot}  * {ProcessGroup:SoftwareAGProductPropertyName}  * {ProcessGroup:SpringBootAppName}  * {ProcessGroup:SpringBootProfileName}  * {ProcessGroup:SpringBootStartupClass}  * {ProcessGroup:TIBCOBusinessWorksAppNodeName}  * {ProcessGroup:TIBCOBusinessWorksAppSpaceName}  * {ProcessGroup:TIBCOBusinessWorksCeAppName}  * {ProcessGroup:TIBCOBusinessWorksCeVersion}  * {ProcessGroup:TIBCOBusinessWorksDomainName}  * {ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}  * {ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}  * {ProcessGroup:TIBCOBusinessWorksHome}  * {ProcessGroup:VarnishInstanceName}  * {ProcessGroup:WebLogicClusterName}  * {ProcessGroup:WebLogicDomainName}  * {ProcessGroup:WebLogicHome}  * {ProcessGroup:WebLogicName}  * {ProcessGroup:WebSphereCellName}  * {ProcessGroup:WebSphereClusterName}  * {ProcessGroup:WebSphereNodeName}  * {ProcessGroup:WebSphereServerName}  * {ProcessGroup:ActorSystem}  * {Service:STGServerName}  * {Service:DatabaseHostName}  * {Service:DatabaseName}  * {Service:DatabaseVendor}  * {Service:DetectedName}  * {Service:EndpointPath}  * {Service:EndpointPathGatewayUrl}  * {Service:IIBApplicationName}  * {Service:MessageListenerClassName}  * {Service:Port}  * {Service:PublicDomainName}  * {Service:RemoteEndpoint}  * {Service:RemoteName}  * {Service:WebApplicationId}  * {Service:WebContextRoot}  * {Service:WebServerName}  * {Service:WebServiceNamespace}  * {Service:WebServiceName}  * {VmwareDatacenter:Name}  * `{VmwareVm:Name}
	// The name to be assigned to matching entities. You can use the following placeholders here:  * `{AwsAutoScalingGroup:Name}`  * `{AwsAvailabilityZone:Name}`  * `{AwsElasticLoadBalancer:Name}`  * `{AwsRelationalDatabaseService:DBName}`  * `{AwsRelationalDatabaseService:Endpoint}`  * `{AwsRelationalDatabaseService:Engine}`  * `{AwsRelationalDatabaseService:InstanceClass}`  * `{AwsRelationalDatabaseService:Name}`  * `{AwsRelationalDatabaseService:Port}`  * `{AzureRegion:Name}`  * `{AzureScaleSet:Name}`  * `{AzureVm:Name}`  * `{CloudFoundryOrganization:Name}`  * `{CustomDevice:DetectedName}`  * `{CustomDevice:DnsName}`  * `{CustomDevice:IpAddress}`  * `{CustomDevice:Port}`  * `{DockerContainerGroupInstance:ContainerName}`  * `{DockerContainerGroupInstance:FullImageName}`  * `{DockerContainerGroupInstance:ImageVersion}`  * `{DockerContainerGroupInstance:StrippedImageName}`  * `{ESXIHost:HardwareModel}`  * `{ESXIHost:HardwareVendor}`  * `{ESXIHost:Name}`  * `{ESXIHost:ProductName}`  * `{ESXIHost:ProductVersion}`  * `{Ec2Instance:AmiId}`  * `{Ec2Instance:BeanstalkEnvironmentName}`  * `{Ec2Instance:InstanceId}`  * `{Ec2Instance:InstanceType}`  * `{Ec2Instance:LocalHostName}`  * `{Ec2Instance:Name}`  * `{Ec2Instance:PublicHostName}`  * `{Ec2Instance:SecurityGroup}`  * `{GoogleComputeInstance:Id}`  * `{GoogleComputeInstance:IpAddresses}`  * `{GoogleComputeInstance:MachineType}`  * `{GoogleComputeInstance:Name}`  * `{GoogleComputeInstance:ProjectId}`  * `{GoogleComputeInstance:Project}`  * `{Host:AWSNameTag}`  * `{Host:AixLogicalCpuCount}`  * `{Host:AzureHostName}`  * `{Host:AzureSiteName}`  * `{Host:BoshDeploymentId}`  * `{Host:BoshInstanceId}`  * `{Host:BoshInstanceName}`  * `{Host:BoshName}`  * `{Host:BoshStemcellVersion}`  * `{Host:CpuCores}`  * `{Host:DetectedName}`  * `{Host:Environment:AppName}`  * `{Host:Environment:BoshReleaseVersion}`  * `{Host:Environment:Environment}`  * `{Host:Environment:Link}`  * `{Host:Environment:Organization}`  * `{Host:Environment:Owner}`  * `{Host:Environment:Support}`  * `{Host:IpAddress}`  * `{Host:LogicalCpuCores}`  * `{Host:OneAgentCustomHostName}`  * `{Host:OperatingSystemVersion}`  * `{Host:PaasMemoryLimit}`  * `{HostGroup:Name}`  * `{KubernetesCluster:Name}`  * `{KubernetesNode:DetectedName}`  * `{OpenstackAvailabilityZone:Name}`  * `{OpenstackZone:Name}`  * `{OpenstackComputeNode:Name}`  * `{OpenstackProject:Name}`  * `{OpenstackVm:InstanceType}`  * `{OpenstackVm:Name}`  * `{OpenstackVm:SecurityGroup}`  * `{ProcessGroup:AmazonECRImageAccountId}`  * `{ProcessGroup:AmazonECRImageRegion}`  * `{ProcessGroup:AmazonECSCluster}`  * `{ProcessGroup:AmazonECSContainerName}`  * `{ProcessGroup:AmazonECSFamily}`  * `{ProcessGroup:AmazonECSRevision}`  * `{ProcessGroup:AmazonLambdaFunctionName}`  * `{ProcessGroup:AmazonRegion}`  * `{ProcessGroup:ApacheConfigPath}`  * `{ProcessGroup:ApacheSparkMasterIpAddress}`  * `{ProcessGroup:AspDotNetCoreApplicationPath}`  * `{ProcessGroup:AspDotNetCoreApplicationPath}`  * `{ProcessGroup:AzureHostName}`  * `{ProcessGroup:AzureSiteName}`  * `{ProcessGroup:CassandraClusterName}`  * `{ProcessGroup:CatalinaBase}`  * `{ProcessGroup:CatalinaHome}`  * `{ProcessGroup:CloudFoundryAppId}`  * `{ProcessGroup:CloudFoundryAppName}`  * `{ProcessGroup:CloudFoundryInstanceIndex}`  * `{ProcessGroup:CloudFoundrySpaceId}`  * `{ProcessGroup:CloudFoundrySpaceName}`  * `{ProcessGroup:ColdFusionJvmConfigFile}`  * `{ProcessGroup:ColdFusionServiceName}`  * `{ProcessGroup:CommandLineArgs}`  * `{ProcessGroup:DetectedName}`  * `{ProcessGroup:DotNetCommandPath}`  * `{ProcessGroup:DotNetCommand}`  * `{ProcessGroup:DotNetClusterId}`  * `{ProcessGroup:DotNetNodeId}`  * `{ProcessGroup:ElasticsearchClusterName}`  * `{ProcessGroup:ElasticsearchNodeName}`  * `{ProcessGroup:EquinoxConfigPath}`  * `{ProcessGroup:ExeName}`  * `{ProcessGroup:ExePath}`  * `{ProcessGroup:GlassFishDomainName}`  * `{ProcessGroup:GlassFishInstanceName}`  * `{ProcessGroup:GoogleAppEngineInstance}`  * `{ProcessGroup:GoogleAppEngineService}`  * `{ProcessGroup:GoogleCloudProject}`  * `{ProcessGroup:HybrisBinDirectory}`  * `{ProcessGroup:HybrisConfigDirectory}`  * `{ProcessGroup:HybrisConfigDirectory}`  * `{ProcessGroup:HybrisDataDirectory}`  * `{ProcessGroup:IBMCicsRegion}`  * `{ProcessGroup:IBMCtgName}`  * `{ProcessGroup:IBMImsConnectRegion}`  * `{ProcessGroup:IBMImsControlRegion}`  * `{ProcessGroup:IBMImsMessageProcessingRegion}`  * `{ProcessGroup:IBMImsSoapGwName}`  * `{ProcessGroup:IBMIntegrationNodeName}`  * `{ProcessGroup:IBMIntegrationServerName}`  * `{ProcessGroup:IISAppPool}`  * `{ProcessGroup:IISRoleName}`  * `{ProcessGroup:JbossHome}`  * `{ProcessGroup:JbossMode}`  * `{ProcessGroup:JbossServerName}`  * `{ProcessGroup:JavaJarFile}`  * `{ProcessGroup:JavaJarPath}`  * `{ProcessGroup:JavaMainCLass}`  * `{ProcessGroup:KubernetesBasePodName}`  * `{ProcessGroup:KubernetesContainerName}`  * `{ProcessGroup:KubernetesFullPodName}`  * `{ProcessGroup:KubernetesNamespace}`  * `{ProcessGroup:KubernetesPodUid}`  * `{ProcessGroup:MssqlInstanceName}`  * `{ProcessGroup:NodeJsAppBaseDirectory}`  * `{ProcessGroup:NodeJsAppName}`  * `{ProcessGroup:NodeJsScriptName}`  * `{ProcessGroup:OracleSid}`  * `{ProcessGroup:PHPScriptPath}`  * `{ProcessGroup:PHPWorkingDirectory}`  * `{ProcessGroup:Ports}`  * `{ProcessGroup:RubyAppRootPath}`  * `{ProcessGroup:RubyScriptPath}`  * `{ProcessGroup:SoftwareAGInstallRoot}`  * `{ProcessGroup:SoftwareAGProductPropertyName}`  * `{ProcessGroup:SpringBootAppName}`  * `{ProcessGroup:SpringBootProfileName}`  * `{ProcessGroup:SpringBootStartupClass}`  * `{ProcessGroup:TIBCOBusinessWorksAppNodeName}`  * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}`  * `{ProcessGroup:TIBCOBusinessWorksCeAppName}`  * `{ProcessGroup:TIBCOBusinessWorksCeVersion}`  * `{ProcessGroup:TIBCOBusinessWorksDomainName}`  * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}`  * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}`  * `{ProcessGroup:TIBCOBusinessWorksHome}`  * `{ProcessGroup:VarnishInstanceName}`  * `{ProcessGroup:WebLogicClusterName}`  * `{ProcessGroup:WebLogicDomainName}`  * `{ProcessGroup:WebLogicHome}`  * `{ProcessGroup:WebLogicName}`  * `{ProcessGroup:WebSphereCellName}`  * `{ProcessGroup:WebSphereClusterName}`  * `{ProcessGroup:WebSphereNodeName}`  * `{ProcessGroup:WebSphereServerName}`  * `{ProcessGroup:ActorSystem}`  * `{Service:STGServerName}`  * `{Service:DatabaseHostName}`  * `{Service:DatabaseName}`  * `{Service:DatabaseVendor}`  * `{Service:DetectedName}`  * `{Service:EndpointPath}`  * `{Service:EndpointPathGatewayUrl}`  * `{Service:IIBApplicationName}`  * `{Service:MessageListenerClassName}`  * `{Service:Port}`  * `{Service:PublicDomainName}`  * `{Service:RemoteEndpoint}`  * `{Service:RemoteName}`  * `{Service:WebApplicationId}`  * `{Service:WebContextRoot}`  * `{Service:WebServerName}`  * `{Service:WebServiceNamespace}`  * `{Service:WebServiceName}`  * `{VmwareDatacenter:Name}`  * `{VmwareVm:Name}
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the rule
	// The name of the rule
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ProcessgroupNamingParameters struct {

	// (Block List) A list of matching conditions of the rule.  The rule applies only if all conditions are fulfilled (see below for nested schema)
	// A list of matching conditions of the rule.  The rule applies only if **all** conditions are fulfilled
	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (Boolean) The rule is enabled (true) or disabled (false)
	// The rule is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The name to be assigned to matching entities. You can use the following placeholders here:  * {AwsAutoScalingGroup:Name}  * {AwsAvailabilityZone:Name}  * {AwsElasticLoadBalancer:Name}  * {AwsRelationalDatabaseService:DBName}  * {AwsRelationalDatabaseService:Endpoint}  * {AwsRelationalDatabaseService:Engine}  * {AwsRelationalDatabaseService:InstanceClass}  * {AwsRelationalDatabaseService:Name}  * {AwsRelationalDatabaseService:Port}  * {AzureRegion:Name}  * {AzureScaleSet:Name}  * {AzureVm:Name}  * {CloudFoundryOrganization:Name}  * {CustomDevice:DetectedName}  * {CustomDevice:DnsName}  * {CustomDevice:IpAddress}  * {CustomDevice:Port}  * {DockerContainerGroupInstance:ContainerName}  * {DockerContainerGroupInstance:FullImageName}  * {DockerContainerGroupInstance:ImageVersion}  * {DockerContainerGroupInstance:StrippedImageName}  * {ESXIHost:HardwareModel}  * {ESXIHost:HardwareVendor}  * {ESXIHost:Name}  * {ESXIHost:ProductName}  * {ESXIHost:ProductVersion}  * {Ec2Instance:AmiId}  * {Ec2Instance:BeanstalkEnvironmentName}  * {Ec2Instance:InstanceId}  * {Ec2Instance:InstanceType}  * {Ec2Instance:LocalHostName}  * {Ec2Instance:Name}  * {Ec2Instance:PublicHostName}  * {Ec2Instance:SecurityGroup}  * {GoogleComputeInstance:Id}  * {GoogleComputeInstance:IpAddresses}  * {GoogleComputeInstance:MachineType}  * {GoogleComputeInstance:Name}  * {GoogleComputeInstance:ProjectId}  * {GoogleComputeInstance:Project}  * {Host:AWSNameTag}  * {Host:AixLogicalCpuCount}  * {Host:AzureHostName}  * {Host:AzureSiteName}  * {Host:BoshDeploymentId}  * {Host:BoshInstanceId}  * {Host:BoshInstanceName}  * {Host:BoshName}  * {Host:BoshStemcellVersion}  * {Host:CpuCores}  * {Host:DetectedName}  * {Host:Environment:AppName}  * {Host:Environment:BoshReleaseVersion}  * {Host:Environment:Environment}  * {Host:Environment:Link}  * {Host:Environment:Organization}  * {Host:Environment:Owner}  * {Host:Environment:Support}  * {Host:IpAddress}  * {Host:LogicalCpuCores}  * {Host:OneAgentCustomHostName}  * {Host:OperatingSystemVersion}  * {Host:PaasMemoryLimit}  * {HostGroup:Name}  * {KubernetesCluster:Name}  * {KubernetesNode:DetectedName}  * {OpenstackAvailabilityZone:Name}  * {OpenstackZone:Name}  * {OpenstackComputeNode:Name}  * {OpenstackProject:Name}  * {OpenstackVm:InstanceType}  * {OpenstackVm:Name}  * {OpenstackVm:SecurityGroup}  * {ProcessGroup:AmazonECRImageAccountId}  * {ProcessGroup:AmazonECRImageRegion}  * {ProcessGroup:AmazonECSCluster}  * {ProcessGroup:AmazonECSContainerName}  * {ProcessGroup:AmazonECSFamily}  * {ProcessGroup:AmazonECSRevision}  * {ProcessGroup:AmazonLambdaFunctionName}  * {ProcessGroup:AmazonRegion}  * {ProcessGroup:ApacheConfigPath}  * {ProcessGroup:ApacheSparkMasterIpAddress}  * {ProcessGroup:AspDotNetCoreApplicationPath}  * {ProcessGroup:AspDotNetCoreApplicationPath}  * {ProcessGroup:AzureHostName}  * {ProcessGroup:AzureSiteName}  * {ProcessGroup:CassandraClusterName}  * {ProcessGroup:CatalinaBase}  * {ProcessGroup:CatalinaHome}  * {ProcessGroup:CloudFoundryAppId}  * {ProcessGroup:CloudFoundryAppName}  * {ProcessGroup:CloudFoundryInstanceIndex}  * {ProcessGroup:CloudFoundrySpaceId}  * {ProcessGroup:CloudFoundrySpaceName}  * {ProcessGroup:ColdFusionJvmConfigFile}  * {ProcessGroup:ColdFusionServiceName}  * {ProcessGroup:CommandLineArgs}  * {ProcessGroup:DetectedName}  * {ProcessGroup:DotNetCommandPath}  * {ProcessGroup:DotNetCommand}  * {ProcessGroup:DotNetClusterId}  * {ProcessGroup:DotNetNodeId}  * {ProcessGroup:ElasticsearchClusterName}  * {ProcessGroup:ElasticsearchNodeName}  * {ProcessGroup:EquinoxConfigPath}  * {ProcessGroup:ExeName}  * {ProcessGroup:ExePath}  * {ProcessGroup:GlassFishDomainName}  * {ProcessGroup:GlassFishInstanceName}  * {ProcessGroup:GoogleAppEngineInstance}  * {ProcessGroup:GoogleAppEngineService}  * {ProcessGroup:GoogleCloudProject}  * {ProcessGroup:HybrisBinDirectory}  * {ProcessGroup:HybrisConfigDirectory}  * {ProcessGroup:HybrisConfigDirectory}  * {ProcessGroup:HybrisDataDirectory}  * {ProcessGroup:IBMCicsRegion}  * {ProcessGroup:IBMCtgName}  * {ProcessGroup:IBMImsConnectRegion}  * {ProcessGroup:IBMImsControlRegion}  * {ProcessGroup:IBMImsMessageProcessingRegion}  * {ProcessGroup:IBMImsSoapGwName}  * {ProcessGroup:IBMIntegrationNodeName}  * {ProcessGroup:IBMIntegrationServerName}  * {ProcessGroup:IISAppPool}  * {ProcessGroup:IISRoleName}  * {ProcessGroup:JbossHome}  * {ProcessGroup:JbossMode}  * {ProcessGroup:JbossServerName}  * {ProcessGroup:JavaJarFile}  * {ProcessGroup:JavaJarPath}  * {ProcessGroup:JavaMainCLass}  * {ProcessGroup:KubernetesBasePodName}  * {ProcessGroup:KubernetesContainerName}  * {ProcessGroup:KubernetesFullPodName}  * {ProcessGroup:KubernetesNamespace}  * {ProcessGroup:KubernetesPodUid}  * {ProcessGroup:MssqlInstanceName}  * {ProcessGroup:NodeJsAppBaseDirectory}  * {ProcessGroup:NodeJsAppName}  * {ProcessGroup:NodeJsScriptName}  * {ProcessGroup:OracleSid}  * {ProcessGroup:PHPScriptPath}  * {ProcessGroup:PHPWorkingDirectory}  * {ProcessGroup:Ports}  * {ProcessGroup:RubyAppRootPath}  * {ProcessGroup:RubyScriptPath}  * {ProcessGroup:SoftwareAGInstallRoot}  * {ProcessGroup:SoftwareAGProductPropertyName}  * {ProcessGroup:SpringBootAppName}  * {ProcessGroup:SpringBootProfileName}  * {ProcessGroup:SpringBootStartupClass}  * {ProcessGroup:TIBCOBusinessWorksAppNodeName}  * {ProcessGroup:TIBCOBusinessWorksAppSpaceName}  * {ProcessGroup:TIBCOBusinessWorksCeAppName}  * {ProcessGroup:TIBCOBusinessWorksCeVersion}  * {ProcessGroup:TIBCOBusinessWorksDomainName}  * {ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}  * {ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}  * {ProcessGroup:TIBCOBusinessWorksHome}  * {ProcessGroup:VarnishInstanceName}  * {ProcessGroup:WebLogicClusterName}  * {ProcessGroup:WebLogicDomainName}  * {ProcessGroup:WebLogicHome}  * {ProcessGroup:WebLogicName}  * {ProcessGroup:WebSphereCellName}  * {ProcessGroup:WebSphereClusterName}  * {ProcessGroup:WebSphereNodeName}  * {ProcessGroup:WebSphereServerName}  * {ProcessGroup:ActorSystem}  * {Service:STGServerName}  * {Service:DatabaseHostName}  * {Service:DatabaseName}  * {Service:DatabaseVendor}  * {Service:DetectedName}  * {Service:EndpointPath}  * {Service:EndpointPathGatewayUrl}  * {Service:IIBApplicationName}  * {Service:MessageListenerClassName}  * {Service:Port}  * {Service:PublicDomainName}  * {Service:RemoteEndpoint}  * {Service:RemoteName}  * {Service:WebApplicationId}  * {Service:WebContextRoot}  * {Service:WebServerName}  * {Service:WebServiceNamespace}  * {Service:WebServiceName}  * {VmwareDatacenter:Name}  * `{VmwareVm:Name}
	// The name to be assigned to matching entities. You can use the following placeholders here:  * `{AwsAutoScalingGroup:Name}`  * `{AwsAvailabilityZone:Name}`  * `{AwsElasticLoadBalancer:Name}`  * `{AwsRelationalDatabaseService:DBName}`  * `{AwsRelationalDatabaseService:Endpoint}`  * `{AwsRelationalDatabaseService:Engine}`  * `{AwsRelationalDatabaseService:InstanceClass}`  * `{AwsRelationalDatabaseService:Name}`  * `{AwsRelationalDatabaseService:Port}`  * `{AzureRegion:Name}`  * `{AzureScaleSet:Name}`  * `{AzureVm:Name}`  * `{CloudFoundryOrganization:Name}`  * `{CustomDevice:DetectedName}`  * `{CustomDevice:DnsName}`  * `{CustomDevice:IpAddress}`  * `{CustomDevice:Port}`  * `{DockerContainerGroupInstance:ContainerName}`  * `{DockerContainerGroupInstance:FullImageName}`  * `{DockerContainerGroupInstance:ImageVersion}`  * `{DockerContainerGroupInstance:StrippedImageName}`  * `{ESXIHost:HardwareModel}`  * `{ESXIHost:HardwareVendor}`  * `{ESXIHost:Name}`  * `{ESXIHost:ProductName}`  * `{ESXIHost:ProductVersion}`  * `{Ec2Instance:AmiId}`  * `{Ec2Instance:BeanstalkEnvironmentName}`  * `{Ec2Instance:InstanceId}`  * `{Ec2Instance:InstanceType}`  * `{Ec2Instance:LocalHostName}`  * `{Ec2Instance:Name}`  * `{Ec2Instance:PublicHostName}`  * `{Ec2Instance:SecurityGroup}`  * `{GoogleComputeInstance:Id}`  * `{GoogleComputeInstance:IpAddresses}`  * `{GoogleComputeInstance:MachineType}`  * `{GoogleComputeInstance:Name}`  * `{GoogleComputeInstance:ProjectId}`  * `{GoogleComputeInstance:Project}`  * `{Host:AWSNameTag}`  * `{Host:AixLogicalCpuCount}`  * `{Host:AzureHostName}`  * `{Host:AzureSiteName}`  * `{Host:BoshDeploymentId}`  * `{Host:BoshInstanceId}`  * `{Host:BoshInstanceName}`  * `{Host:BoshName}`  * `{Host:BoshStemcellVersion}`  * `{Host:CpuCores}`  * `{Host:DetectedName}`  * `{Host:Environment:AppName}`  * `{Host:Environment:BoshReleaseVersion}`  * `{Host:Environment:Environment}`  * `{Host:Environment:Link}`  * `{Host:Environment:Organization}`  * `{Host:Environment:Owner}`  * `{Host:Environment:Support}`  * `{Host:IpAddress}`  * `{Host:LogicalCpuCores}`  * `{Host:OneAgentCustomHostName}`  * `{Host:OperatingSystemVersion}`  * `{Host:PaasMemoryLimit}`  * `{HostGroup:Name}`  * `{KubernetesCluster:Name}`  * `{KubernetesNode:DetectedName}`  * `{OpenstackAvailabilityZone:Name}`  * `{OpenstackZone:Name}`  * `{OpenstackComputeNode:Name}`  * `{OpenstackProject:Name}`  * `{OpenstackVm:InstanceType}`  * `{OpenstackVm:Name}`  * `{OpenstackVm:SecurityGroup}`  * `{ProcessGroup:AmazonECRImageAccountId}`  * `{ProcessGroup:AmazonECRImageRegion}`  * `{ProcessGroup:AmazonECSCluster}`  * `{ProcessGroup:AmazonECSContainerName}`  * `{ProcessGroup:AmazonECSFamily}`  * `{ProcessGroup:AmazonECSRevision}`  * `{ProcessGroup:AmazonLambdaFunctionName}`  * `{ProcessGroup:AmazonRegion}`  * `{ProcessGroup:ApacheConfigPath}`  * `{ProcessGroup:ApacheSparkMasterIpAddress}`  * `{ProcessGroup:AspDotNetCoreApplicationPath}`  * `{ProcessGroup:AspDotNetCoreApplicationPath}`  * `{ProcessGroup:AzureHostName}`  * `{ProcessGroup:AzureSiteName}`  * `{ProcessGroup:CassandraClusterName}`  * `{ProcessGroup:CatalinaBase}`  * `{ProcessGroup:CatalinaHome}`  * `{ProcessGroup:CloudFoundryAppId}`  * `{ProcessGroup:CloudFoundryAppName}`  * `{ProcessGroup:CloudFoundryInstanceIndex}`  * `{ProcessGroup:CloudFoundrySpaceId}`  * `{ProcessGroup:CloudFoundrySpaceName}`  * `{ProcessGroup:ColdFusionJvmConfigFile}`  * `{ProcessGroup:ColdFusionServiceName}`  * `{ProcessGroup:CommandLineArgs}`  * `{ProcessGroup:DetectedName}`  * `{ProcessGroup:DotNetCommandPath}`  * `{ProcessGroup:DotNetCommand}`  * `{ProcessGroup:DotNetClusterId}`  * `{ProcessGroup:DotNetNodeId}`  * `{ProcessGroup:ElasticsearchClusterName}`  * `{ProcessGroup:ElasticsearchNodeName}`  * `{ProcessGroup:EquinoxConfigPath}`  * `{ProcessGroup:ExeName}`  * `{ProcessGroup:ExePath}`  * `{ProcessGroup:GlassFishDomainName}`  * `{ProcessGroup:GlassFishInstanceName}`  * `{ProcessGroup:GoogleAppEngineInstance}`  * `{ProcessGroup:GoogleAppEngineService}`  * `{ProcessGroup:GoogleCloudProject}`  * `{ProcessGroup:HybrisBinDirectory}`  * `{ProcessGroup:HybrisConfigDirectory}`  * `{ProcessGroup:HybrisConfigDirectory}`  * `{ProcessGroup:HybrisDataDirectory}`  * `{ProcessGroup:IBMCicsRegion}`  * `{ProcessGroup:IBMCtgName}`  * `{ProcessGroup:IBMImsConnectRegion}`  * `{ProcessGroup:IBMImsControlRegion}`  * `{ProcessGroup:IBMImsMessageProcessingRegion}`  * `{ProcessGroup:IBMImsSoapGwName}`  * `{ProcessGroup:IBMIntegrationNodeName}`  * `{ProcessGroup:IBMIntegrationServerName}`  * `{ProcessGroup:IISAppPool}`  * `{ProcessGroup:IISRoleName}`  * `{ProcessGroup:JbossHome}`  * `{ProcessGroup:JbossMode}`  * `{ProcessGroup:JbossServerName}`  * `{ProcessGroup:JavaJarFile}`  * `{ProcessGroup:JavaJarPath}`  * `{ProcessGroup:JavaMainCLass}`  * `{ProcessGroup:KubernetesBasePodName}`  * `{ProcessGroup:KubernetesContainerName}`  * `{ProcessGroup:KubernetesFullPodName}`  * `{ProcessGroup:KubernetesNamespace}`  * `{ProcessGroup:KubernetesPodUid}`  * `{ProcessGroup:MssqlInstanceName}`  * `{ProcessGroup:NodeJsAppBaseDirectory}`  * `{ProcessGroup:NodeJsAppName}`  * `{ProcessGroup:NodeJsScriptName}`  * `{ProcessGroup:OracleSid}`  * `{ProcessGroup:PHPScriptPath}`  * `{ProcessGroup:PHPWorkingDirectory}`  * `{ProcessGroup:Ports}`  * `{ProcessGroup:RubyAppRootPath}`  * `{ProcessGroup:RubyScriptPath}`  * `{ProcessGroup:SoftwareAGInstallRoot}`  * `{ProcessGroup:SoftwareAGProductPropertyName}`  * `{ProcessGroup:SpringBootAppName}`  * `{ProcessGroup:SpringBootProfileName}`  * `{ProcessGroup:SpringBootStartupClass}`  * `{ProcessGroup:TIBCOBusinessWorksAppNodeName}`  * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}`  * `{ProcessGroup:TIBCOBusinessWorksCeAppName}`  * `{ProcessGroup:TIBCOBusinessWorksCeVersion}`  * `{ProcessGroup:TIBCOBusinessWorksDomainName}`  * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}`  * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}`  * `{ProcessGroup:TIBCOBusinessWorksHome}`  * `{ProcessGroup:VarnishInstanceName}`  * `{ProcessGroup:WebLogicClusterName}`  * `{ProcessGroup:WebLogicDomainName}`  * `{ProcessGroup:WebLogicHome}`  * `{ProcessGroup:WebLogicName}`  * `{ProcessGroup:WebSphereCellName}`  * `{ProcessGroup:WebSphereClusterName}`  * `{ProcessGroup:WebSphereNodeName}`  * `{ProcessGroup:WebSphereServerName}`  * `{ProcessGroup:ActorSystem}`  * `{Service:STGServerName}`  * `{Service:DatabaseHostName}`  * `{Service:DatabaseName}`  * `{Service:DatabaseVendor}`  * `{Service:DetectedName}`  * `{Service:EndpointPath}`  * `{Service:EndpointPathGatewayUrl}`  * `{Service:IIBApplicationName}`  * `{Service:MessageListenerClassName}`  * `{Service:Port}`  * `{Service:PublicDomainName}`  * `{Service:RemoteEndpoint}`  * `{Service:RemoteName}`  * `{Service:WebApplicationId}`  * `{Service:WebContextRoot}`  * `{Service:WebServerName}`  * `{Service:WebServiceNamespace}`  * `{Service:WebServiceName}`  * `{VmwareDatacenter:Name}`  * `{VmwareVm:Name}
	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// (String) The name of the rule
	// The name of the rule
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ServiceTopologyComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SERVICE_TOPOLOGY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTopologyComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SERVICE_TOPOLOGY
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTopologyComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SERVICE_TOPOLOGY
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTopologyInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTopologyObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTopologyParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are EXTERNAL_SERVICE, FULLY_MONITORED and OPAQUE_SERVICE.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SERVICE_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SERVICE_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SERVICE_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTypeInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTypeObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ServiceTypeParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are BACKGROUND_ACTIVITY, CICS_SERVICE, CUSTOM_SERVICE, DATABASE_SERVICE, ENTERPRISE_SERVICE_BUS_SERVICE, EXTERNAL, IBM_INTEGRATION_BUS_SERVICE, IMS_SERVICE, MESSAGING_SERVICE, QUEUE_LISTENER_SERVICE, RMI_SERVICE, RPC_SERVICE, WEB_REQUEST_SERVICE and WEB_SERVICE.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SimpleHostTechComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SIMPLE_HOST_TECH
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value []SimpleHostTechComparisonValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type SimpleHostTechComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SIMPLE_HOST_TECH
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value []SimpleHostTechComparisonValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type SimpleHostTechComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SIMPLE_HOST_TECH
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value []SimpleHostTechComparisonValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type SimpleHostTechComparisonValueInitParameters struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type SimpleHostTechComparisonValueObservation struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type SimpleHostTechComparisonValueParameters struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	// +kubebuilder:validation:Optional
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type SimpleTechComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SIMPLE_TECH
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value []SimpleTechComparisonValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type SimpleTechComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SIMPLE_TECH
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value []SimpleTechComparisonValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type SimpleTechComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SIMPLE_TECH
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value []SimpleTechComparisonValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type SimpleTechComparisonValueInitParameters struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type SimpleTechComparisonValueObservation struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type SimpleTechComparisonValueParameters struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	// +kubebuilder:validation:Optional
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type StringComparisonInitParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be STRING
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringComparisonObservation struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be STRING
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringComparisonParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	// +kubebuilder:validation:Optional
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be STRING
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringConditionKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be `STRING`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type StringConditionKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be `STRING`
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type StringConditionKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	// +kubebuilder:validation:Optional
	DynamicKey *string `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be `STRING`
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type StringInitParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringKeyInitParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type StringKeyObservation struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	DynamicKey *string `json:"dynamicKey,omitempty" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type StringKeyParameters struct {

	// (String) The attribute to be used for comparision
	// The attribute to be used for comparision
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// (Block List, Min: 1, Max: 1) The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key (see below for nested schema)
	// The key of the attribute, which need dynamic keys. Not applicable otherwise, as the attibute itself acts as a key. Possible values are
	// - `AMAZON_ECR_IMAGE_ACCOUNT_ID`
	// - `AMAZON_ECR_IMAGE_REGION`
	// - `AMAZON_LAMBDA_FUNCTION_NAME`
	// - `AMAZON_REGION`
	// - `APACHE_CONFIG_PATH`
	// - `APACHE_SPARK_MASTER_IP_ADDRESS`
	// - `ASP_DOT_NET_CORE_APPLICATION_PATH`
	// - `AWS_ECS_CLUSTER`
	// - `AWS_ECS_CONTAINERNAME`
	// - `AWS_ECS_FAMILY`
	// - `AWS_ECS_REVISION`
	// - `CASSANDRA_CLUSTER_NAME`
	// - `CATALINA_BASE`
	// - `CATALINA_HOME`
	// - `CLOUD_FOUNDRY_APP_ID`
	// - `CLOUD_FOUNDRY_APP_NAME`
	// - `CLOUD_FOUNDRY_INSTANCE_INDEX`
	// - `CLOUD_FOUNDRY_SPACE_ID`
	// - `CLOUD_FOUNDRY_SPACE_NAME`
	// - `COLDFUSION_JVM_CONFIG_FILE`
	// - `COLDFUSION_SERVICE_NAME`
	// - `COMMAND_LINE_ARGS`
	// - `DOTNET_COMMAND`
	// - `DOTNET_COMMAND_PATH`
	// - `DYNATRACE_CLUSTER_ID`
	// - `DYNATRACE_NODE_ID`
	// - `ELASTICSEARCH_CLUSTER_NAME`
	// - `ELASTICSEARCH_NODE_NAME`
	// - `EQUINOX_CONFIG_PATH`
	// - `EXE_NAME`
	// - `EXE_PATH`
	// - `GLASS_FISH_DOMAIN_NAME`
	// - `GLASS_FISH_INSTANCE_NAME`
	// - `GOOGLE_APP_ENGINE_INSTANCE`
	// - `GOOGLE_APP_ENGINE_SERVICE`
	// - `GOOGLE_CLOUD_PROJECT`
	// - `HYBRIS_BIN_DIRECTORY`
	// - `HYBRIS_CONFIG_DIRECTORY`
	// - `HYBRIS_DATA_DIRECTORY`
	// - `IBM_CICS_REGION`
	// - `IBM_CTG_NAME`
	// - `IBM_IMS_CONNECT_REGION`
	// - `IBM_IMS_CONTROL_REGION`
	// - `IBM_IMS_MESSAGE_PROCESSING_REGION`
	// - `IBM_IMS_SOAP_GW_NAME`
	// - `IBM_INTEGRATION_NODE_NAME`
	// - `IBM_INTEGRATION_SERVER_NAME`
	// - `IIS_APP_POOL`
	// - `IIS_ROLE_NAME`
	// - `JAVA_JAR_FILE`
	// - `JAVA_JAR_PATH`
	// - `JAVA_MAIN_CLASS`
	// - `JAVA_MAIN_MODULE`
	// - `JBOSS_HOME`
	// - `JBOSS_MODE`
	// - `JBOSS_SERVER_NAME`
	// - `KUBERNETES_BASE_POD_NAME`
	// - `KUBERNETES_CONTAINER_NAME`
	// - `KUBERNETES_FULL_POD_NAME`
	// - `KUBERNETES_NAMESPACE`
	// - `KUBERNETES_POD_UID`
	// - `MSSQL_INSTANCE_NAME`
	// - `NODE_JS_APP_BASE_DIRECTORY`
	// - `NODE_JS_APP_NAME`
	// - `NODE_JS_SCRIPT_NAME`
	// - `ORACLE_SID`
	// - `PG_ID_CALC_INPUT_KEY_LINKAGE`
	// - `PHP_SCRIPT_PATH`
	// - `PHP_WORKING_DIRECTORY`
	// - `RUBY_APP_ROOT_PATH`
	// - `RUBY_SCRIPT_PATH`
	// - `RULE_RESULT`
	// - `SOFTWAREAG_INSTALL_ROOT`
	// - `SOFTWAREAG_PRODUCTPROPNAME`
	// - `SPRINGBOOT_APP_NAME`
	// - `SPRINGBOOT_PROFILE_NAME`
	// - `SPRINGBOOT_STARTUP_CLASS`
	// - `TIBCO_BUSINESSWORKS_CE_APP_NAME`
	// - `TIBCO_BUSINESSWORKS_CE_VERSION`
	// - `TIBCO_BUSINESS_WORKS_APP_NODE_NAME`
	// - `TIBCO_BUSINESS_WORKS_APP_SPACE_NAME`
	// - `TIBCO_BUSINESS_WORKS_DOMAIN_NAME`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE`
	// - `TIBCO_BUSINESS_WORKS_ENGINE_PROPERTY_FILE_PATH`
	// - `TIBCO_BUSINESS_WORKS_HOME`
	// - `VARNISH_INSTANCE_NAME`
	// - `WEB_LOGIC_CLUSTER_NAME`
	// - `WEB_LOGIC_DOMAIN_NAME`
	// - `WEB_LOGIC_HOME`
	// - `WEB_LOGIC_NAME`
	// - `WEB_SPHERE_CELL_NAME`
	// - `WEB_SPHERE_CLUSTER_NAME`
	// - `WEB_SPHERE_NODE_NAME and WEB_SPHERE_SERVER_NAME`
	// +kubebuilder:validation:Optional
	DynamicKey *string `json:"dynamicKey" tf:"dynamic_key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type StringObservation struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StringParameters struct {

	// sensitive (true) or insensitive (false)
	// The comparison is case-sensitive (`true`) or insensitive (`false`)
	// +kubebuilder:validation:Optional
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are BEGINS_WITH, CONTAINS, ENDS_WITH, EQUALS, EXISTS and REGEX_MATCHES. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SyntheticEngineInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SyntheticEngineObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SyntheticEngineParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SyntheticEngineTypeComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SYNTHETIC_ENGINE_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SyntheticEngineTypeComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SYNTHETIC_ENGINE_TYPE
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SyntheticEngineTypeComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are  EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be SYNTHETIC_ENGINE_TYPE
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to. Possible values are CLASSIC and CUSTOM
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagComparisonInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be TAG
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	Value []TagComparisonValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type TagComparisonObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be TAG
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	Value []TagComparisonValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type TagComparisonParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// if specified, needs to be TAG
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	// +kubebuilder:validation:Optional
	Value []TagComparisonValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type TagComparisonValueInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagComparisonValueObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagComparisonValueParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	Value []TagValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type TagObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	Value []TagValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type TagParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and TAG_KEY_EQUALS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// Tag of a Dynatrace entity
	// +kubebuilder:validation:Optional
	Value []TagValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type TagValueInitParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagValueObservation struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	Context *string `json:"context,omitempty" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagValueParameters struct {

	// (String) The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the CONTEXTLESS value
	// The origin of the tag, such as AWS or Cloud Foundry. Possible values are AWS, AWS_GENERIC, AZURE, CLOUD_FOUNDRY, CONTEXTLESS, ENVIRONMENT, GOOGLE_CLOUD and KUBERNETES. Custom tags use the `CONTEXTLESS` value
	// +kubebuilder:validation:Optional
	Context *string `json:"context" tf:"context,omitempty"`

	// (Block List) Fallback for not yet known type (see below for nested schema)
	// The key of the tag. Custom tags have the tag value here
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider but have meanwhile gotten introduced by a newer version of the Dynatrace REST API
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value of the tag. Not applicable to custom tags
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TechInitParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value []TechValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type TechObservation struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	Value []TechValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type TechParameters struct {

	// (Boolean) Reverses the operator. For example it turns the begins with into does not begin with
	// Reverses the operator. For example it turns the **begins with** into **does not begin with**
	// +kubebuilder:validation:Optional
	Negate *bool `json:"negate,omitempty" tf:"negate,omitempty"`

	// (String) Operator of the comparison. You can reverse it by setting negate to true
	// Operator of the comparison. Possible values are EQUALS and EXISTS. You can reverse it by setting **negate** to `true`
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// (String) The value to compare to
	// The value to compare to
	// +kubebuilder:validation:Optional
	Value []TechValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type TechValueInitParameters struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type TechValueObservation struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type TechValueParameters struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	// +kubebuilder:validation:Optional
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ValueInitParameters struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ValueObservation struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

type ValueParameters struct {

	// (String, Deprecated) if specified, needs to be APPLICATION_TYPE
	// Predefined technology, if technology is not predefined, then the verbatim type must be set. Possible values are APPARMOR, BOSH, BOSHBPM, CLOUDFOUNDRY, CONTAINERD, CRIO, DIEGO_CELL, DOCKER, GARDEN, GRSECURITY, KUBERNETES, OPENSHIFT, OPENSTACK_COMPUTE, OPENSTACK_CONTROLLER and SELINUX
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String) allows for configuring properties that are not explicitly supported by the current version of this provider
	// Any attributes that aren't yet supported by this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// predefined technology, use for custom technologies
	// Non-predefined technology, use for custom technologies
	// +kubebuilder:validation:Optional
	VerbatimType *string `json:"verbatimType,omitempty" tf:"verbatim_type,omitempty"`
}

// ProcessgroupNamingSpec defines the desired state of ProcessgroupNaming
type ProcessgroupNamingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProcessgroupNamingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProcessgroupNamingInitParameters `json:"initProvider,omitempty"`
}

// ProcessgroupNamingStatus defines the observed state of ProcessgroupNaming.
type ProcessgroupNamingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProcessgroupNamingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProcessgroupNaming is the Schema for the ProcessgroupNamings API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ProcessgroupNaming struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.format) || (has(self.initProvider) && has(self.initProvider.format))",message="spec.forProvider.format is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ProcessgroupNamingSpec   `json:"spec"`
	Status ProcessgroupNamingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProcessgroupNamingList contains a list of ProcessgroupNamings
type ProcessgroupNamingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProcessgroupNaming `json:"items"`
}

// Repository type metadata.
var (
	ProcessgroupNaming_Kind             = "ProcessgroupNaming"
	ProcessgroupNaming_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProcessgroupNaming_Kind}.String()
	ProcessgroupNaming_KindAPIVersion   = ProcessgroupNaming_Kind + "." + CRDGroupVersion.String()
	ProcessgroupNaming_GroupVersionKind = CRDGroupVersion.WithKind(ProcessgroupNaming_Kind)
)

func init() {
	SchemeBuilder.Register(&ProcessgroupNaming{}, &ProcessgroupNamingList{})
}
