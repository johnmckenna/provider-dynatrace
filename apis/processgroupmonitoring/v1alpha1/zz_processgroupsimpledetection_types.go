// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProcessGroupSimpleDetectionInitParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	GroupIdentifier *string `json:"groupIdentifier,omitempty" tf:"group_identifier,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Use a variable to identify instances within a process group.
	// Use a variable to identify instances within a process group.
	//
	// The type of variable is the same as selected in 'Property source'.
	InstanceIdentifier *string `json:"instanceIdentifier,omitempty" tf:"instance_identifier,omitempty"`

	// (String) Note: Not all types can be detected at startup.
	// Note: Not all types can be detected at startup.
	ProcessType *string `json:"processType,omitempty" tf:"process_type,omitempty"`

	// (String) Possible Values: Prop, Env
	// Possible Values: `Prop`, `Env`
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`
}

type ProcessGroupSimpleDetectionObservation struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	GroupIdentifier *string `json:"groupIdentifier,omitempty" tf:"group_identifier,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Use a variable to identify instances within a process group.
	// Use a variable to identify instances within a process group.
	//
	// The type of variable is the same as selected in 'Property source'.
	InstanceIdentifier *string `json:"instanceIdentifier,omitempty" tf:"instance_identifier,omitempty"`

	// (String) Note: Not all types can be detected at startup.
	// Note: Not all types can be detected at startup.
	ProcessType *string `json:"processType,omitempty" tf:"process_type,omitempty"`

	// (String) Possible Values: Prop, Env
	// Possible Values: `Prop`, `Env`
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`
}

type ProcessGroupSimpleDetectionParameters struct {

	// (Boolean) This setting is enabled (true) or disabled (false)
	// This setting is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	// If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more granular.
	// +kubebuilder:validation:Optional
	GroupIdentifier *string `json:"groupIdentifier,omitempty" tf:"group_identifier,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// +kubebuilder:validation:Optional
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Use a variable to identify instances within a process group.
	// Use a variable to identify instances within a process group.
	//
	// The type of variable is the same as selected in 'Property source'.
	// +kubebuilder:validation:Optional
	InstanceIdentifier *string `json:"instanceIdentifier,omitempty" tf:"instance_identifier,omitempty"`

	// (String) Note: Not all types can be detected at startup.
	// Note: Not all types can be detected at startup.
	// +kubebuilder:validation:Optional
	ProcessType *string `json:"processType,omitempty" tf:"process_type,omitempty"`

	// (String) Possible Values: Prop, Env
	// Possible Values: `Prop`, `Env`
	// +kubebuilder:validation:Optional
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`
}

// ProcessGroupSimpleDetectionSpec defines the desired state of ProcessGroupSimpleDetection
type ProcessGroupSimpleDetectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProcessGroupSimpleDetectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProcessGroupSimpleDetectionInitParameters `json:"initProvider,omitempty"`
}

// ProcessGroupSimpleDetectionStatus defines the observed state of ProcessGroupSimpleDetection.
type ProcessGroupSimpleDetectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProcessGroupSimpleDetectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ProcessGroupSimpleDetection is the Schema for the ProcessGroupSimpleDetections API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type ProcessGroupSimpleDetection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupIdentifier) || (has(self.initProvider) && has(self.initProvider.groupIdentifier))",message="spec.forProvider.groupIdentifier is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceIdentifier) || (has(self.initProvider) && has(self.initProvider.instanceIdentifier))",message="spec.forProvider.instanceIdentifier is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ruleType) || (has(self.initProvider) && has(self.initProvider.ruleType))",message="spec.forProvider.ruleType is a required parameter"
	Spec   ProcessGroupSimpleDetectionSpec   `json:"spec"`
	Status ProcessGroupSimpleDetectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProcessGroupSimpleDetectionList contains a list of ProcessGroupSimpleDetections
type ProcessGroupSimpleDetectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProcessGroupSimpleDetection `json:"items"`
}

// Repository type metadata.
var (
	ProcessGroupSimpleDetection_Kind             = "ProcessGroupSimpleDetection"
	ProcessGroupSimpleDetection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProcessGroupSimpleDetection_Kind}.String()
	ProcessGroupSimpleDetection_KindAPIVersion   = ProcessGroupSimpleDetection_Kind + "." + CRDGroupVersion.String()
	ProcessGroupSimpleDetection_GroupVersionKind = CRDGroupVersion.WithKind(ProcessGroupSimpleDetection_Kind)
)

func init() {
	SchemeBuilder.Register(&ProcessGroupSimpleDetection{}, &ProcessGroupSimpleDetectionList{})
}
