// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APIDetectionInitParameters struct {

	// (String) This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	APIColor *string `json:"apiColor,omitempty" tf:"api_color,omitempty"`

	// (String) API name
	// API name
	APIName *string `json:"apiName,omitempty" tf:"api_name,omitempty"`

	// (Block List, Max: 1) List of conditions (see below for nested schema)
	// List of conditions
	Conditions []ConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Restrict this rule to a specific technology.
	// Restrict this rule to a specific technology.
	Technology *string `json:"technology,omitempty" tf:"technology,omitempty"`

	// (Boolean) This API defines a third party library
	// This API defines a third party library
	ThirdPartyAPI *bool `json:"thirdPartyApi,omitempty" tf:"third_party_api,omitempty"`
}

type APIDetectionObservation struct {

	// (String) This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	APIColor *string `json:"apiColor,omitempty" tf:"api_color,omitempty"`

	// (String) API name
	// API name
	APIName *string `json:"apiName,omitempty" tf:"api_name,omitempty"`

	// (Block List, Max: 1) List of conditions (see below for nested schema)
	// List of conditions
	Conditions []ConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Restrict this rule to a specific technology.
	// Restrict this rule to a specific technology.
	Technology *string `json:"technology,omitempty" tf:"technology,omitempty"`

	// (Boolean) This API defines a third party library
	// This API defines a third party library
	ThirdPartyAPI *bool `json:"thirdPartyApi,omitempty" tf:"third_party_api,omitempty"`
}

type APIDetectionParameters struct {

	// (String) This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	// This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.
	// +kubebuilder:validation:Optional
	APIColor *string `json:"apiColor,omitempty" tf:"api_color,omitempty"`

	// (String) API name
	// API name
	// +kubebuilder:validation:Optional
	APIName *string `json:"apiName,omitempty" tf:"api_name,omitempty"`

	// (Block List, Max: 1) List of conditions (see below for nested schema)
	// List of conditions
	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	// +kubebuilder:validation:Optional
	InsertAfter *string `json:"insertAfter,omitempty" tf:"insert_after,omitempty"`

	// (String) Restrict this rule to a specific technology.
	// Restrict this rule to a specific technology.
	// +kubebuilder:validation:Optional
	Technology *string `json:"technology,omitempty" tf:"technology,omitempty"`

	// (Boolean) This API defines a third party library
	// This API defines a third party library
	// +kubebuilder:validation:Optional
	ThirdPartyAPI *bool `json:"thirdPartyApi,omitempty" tf:"third_party_api,omitempty"`
}

type ConditionInitParameters struct {

	// (String) Possible Values: FILE_NAME, FQCN, PACKAGE
	// Possible Values: `FILE_NAME`, `FQCN`, `PACKAGE`
	Base *string `json:"base,omitempty" tf:"base,omitempty"`

	// (String) Possible Values: BEGINS_WITH, CONTAINS
	// Possible Values: `BEGINS_WITH`, `CONTAINS`
	Matcher *string `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// (String) no documentation available
	// no documentation available
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type ConditionObservation struct {

	// (String) Possible Values: FILE_NAME, FQCN, PACKAGE
	// Possible Values: `FILE_NAME`, `FQCN`, `PACKAGE`
	Base *string `json:"base,omitempty" tf:"base,omitempty"`

	// (String) Possible Values: BEGINS_WITH, CONTAINS
	// Possible Values: `BEGINS_WITH`, `CONTAINS`
	Matcher *string `json:"matcher,omitempty" tf:"matcher,omitempty"`

	// (String) no documentation available
	// no documentation available
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`
}

type ConditionParameters struct {

	// (String) Possible Values: FILE_NAME, FQCN, PACKAGE
	// Possible Values: `FILE_NAME`, `FQCN`, `PACKAGE`
	// +kubebuilder:validation:Optional
	Base *string `json:"base" tf:"base,omitempty"`

	// (String) Possible Values: BEGINS_WITH, CONTAINS
	// Possible Values: `BEGINS_WITH`, `CONTAINS`
	// +kubebuilder:validation:Optional
	Matcher *string `json:"matcher" tf:"matcher,omitempty"`

	// (String) no documentation available
	// no documentation available
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern" tf:"pattern,omitempty"`
}

type ConditionsInitParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Condition []ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`
}

type ConditionsObservation struct {

	// (Block Set, Min: 1) (see below for nested schema)
	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`
}

type ConditionsParameters struct {

	// (Block Set, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition" tf:"condition,omitempty"`
}

// APIDetectionSpec defines the desired state of APIDetection
type APIDetectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     APIDetectionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider APIDetectionInitParameters `json:"initProvider,omitempty"`
}

// APIDetectionStatus defines the observed state of APIDetection.
type APIDetectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        APIDetectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// APIDetection is the Schema for the APIDetections API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type APIDetection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiColor) || (has(self.initProvider) && has(self.initProvider.apiColor))",message="spec.forProvider.apiColor is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.apiName) || (has(self.initProvider) && has(self.initProvider.apiName))",message="spec.forProvider.apiName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.thirdPartyApi) || (has(self.initProvider) && has(self.initProvider.thirdPartyApi))",message="spec.forProvider.thirdPartyApi is a required parameter"
	Spec   APIDetectionSpec   `json:"spec"`
	Status APIDetectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// APIDetectionList contains a list of APIDetections
type APIDetectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []APIDetection `json:"items"`
}

// Repository type metadata.
var (
	APIDetection_Kind             = "APIDetection"
	APIDetection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: APIDetection_Kind}.String()
	APIDetection_KindAPIVersion   = APIDetection_Kind + "." + CRDGroupVersion.String()
	APIDetection_GroupVersionKind = CRDGroupVersion.WithKind(APIDetection_Kind)
)

func init() {
	SchemeBuilder.Register(&APIDetection{}, &APIDetectionList{})
}
