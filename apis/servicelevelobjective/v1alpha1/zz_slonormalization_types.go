// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SLONormalizationInitParameters struct {

	// (Boolean) When set to true, the error budget left will be shown in percent of the total error budget. For more details see SLO normalization help.
	// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
	Normalize *bool `json:"normalize,omitempty" tf:"normalize,omitempty"`
}

type SLONormalizationObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) When set to true, the error budget left will be shown in percent of the total error budget. For more details see SLO normalization help.
	// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
	Normalize *bool `json:"normalize,omitempty" tf:"normalize,omitempty"`
}

type SLONormalizationParameters struct {

	// (Boolean) When set to true, the error budget left will be shown in percent of the total error budget. For more details see SLO normalization help.
	// When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO normalization help](https://dt-url.net/slo-normalize-error-budget).
	// +kubebuilder:validation:Optional
	Normalize *bool `json:"normalize,omitempty" tf:"normalize,omitempty"`
}

// SLONormalizationSpec defines the desired state of SLONormalization
type SLONormalizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SLONormalizationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SLONormalizationInitParameters `json:"initProvider,omitempty"`
}

// SLONormalizationStatus defines the observed state of SLONormalization.
type SLONormalizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SLONormalizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SLONormalization is the Schema for the SLONormalizations API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type SLONormalization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.normalize) || (has(self.initProvider) && has(self.initProvider.normalize))",message="spec.forProvider.normalize is a required parameter"
	Spec   SLONormalizationSpec   `json:"spec"`
	Status SLONormalizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SLONormalizationList contains a list of SLONormalizations
type SLONormalizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SLONormalization `json:"items"`
}

// Repository type metadata.
var (
	SLONormalization_Kind             = "SLONormalization"
	SLONormalization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SLONormalization_Kind}.String()
	SLONormalization_KindAPIVersion   = SLONormalization_Kind + "." + CRDGroupVersion.String()
	SLONormalization_GroupVersionKind = CRDGroupVersion.WithKind(SLONormalization_Kind)
)

func init() {
	SchemeBuilder.Register(&SLONormalization{}, &SLONormalizationList{})
}
