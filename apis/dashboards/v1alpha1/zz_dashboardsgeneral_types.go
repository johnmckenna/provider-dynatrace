// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DashboardsGeneralInitParameters struct {

	// (Block List, Max: 1) Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment. (see below for nested schema)
	// Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
	DefaultDashboardList []DefaultDashboardListInitParameters `json:"defaultDashboardList,omitempty" tf:"default_dashboard_list,omitempty"`

	// in will be required to view those dashboards read-only.
	// Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
	EnablePublicSharing *bool `json:"enablePublicSharing,omitempty" tf:"enable_public_sharing,omitempty"`
}

type DashboardsGeneralObservation struct {

	// (Block List, Max: 1) Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment. (see below for nested schema)
	// Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
	DefaultDashboardList []DefaultDashboardListObservation `json:"defaultDashboardList,omitempty" tf:"default_dashboard_list,omitempty"`

	// in will be required to view those dashboards read-only.
	// Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
	EnablePublicSharing *bool `json:"enablePublicSharing,omitempty" tf:"enable_public_sharing,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DashboardsGeneralParameters struct {

	// (Block List, Max: 1) Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment. (see below for nested schema)
	// Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page for this environment.
	// +kubebuilder:validation:Optional
	DefaultDashboardList []DefaultDashboardListParameters `json:"defaultDashboardList,omitempty" tf:"default_dashboard_list,omitempty"`

	// in will be required to view those dashboards read-only.
	// Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.
	// +kubebuilder:validation:Optional
	EnablePublicSharing *bool `json:"enablePublicSharing,omitempty" tf:"enable_public_sharing,omitempty"`
}

type DefaultDashboardInitParameters struct {

	// (String) Preset dashboard to show as default landing page
	// Preset dashboard to show as default landing page
	Dashboard *string `json:"dashboard,omitempty" tf:"dashboard,omitempty"`

	// (String) Show selected dashboard by default for this user group
	// Show selected dashboard by default for this user group
	UserGroup *string `json:"userGroup,omitempty" tf:"user_group,omitempty"`
}

type DefaultDashboardListInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	DefaultDashboard []DefaultDashboardInitParameters `json:"defaultDashboard,omitempty" tf:"default_dashboard,omitempty"`
}

type DefaultDashboardListObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	DefaultDashboard []DefaultDashboardObservation `json:"defaultDashboard,omitempty" tf:"default_dashboard,omitempty"`
}

type DefaultDashboardListParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	DefaultDashboard []DefaultDashboardParameters `json:"defaultDashboard" tf:"default_dashboard,omitempty"`
}

type DefaultDashboardObservation struct {

	// (String) Preset dashboard to show as default landing page
	// Preset dashboard to show as default landing page
	Dashboard *string `json:"dashboard,omitempty" tf:"dashboard,omitempty"`

	// (String) Show selected dashboard by default for this user group
	// Show selected dashboard by default for this user group
	UserGroup *string `json:"userGroup,omitempty" tf:"user_group,omitempty"`
}

type DefaultDashboardParameters struct {

	// (String) Preset dashboard to show as default landing page
	// Preset dashboard to show as default landing page
	// +kubebuilder:validation:Optional
	Dashboard *string `json:"dashboard" tf:"dashboard,omitempty"`

	// (String) Show selected dashboard by default for this user group
	// Show selected dashboard by default for this user group
	// +kubebuilder:validation:Optional
	UserGroup *string `json:"userGroup" tf:"user_group,omitempty"`
}

// DashboardsGeneralSpec defines the desired state of DashboardsGeneral
type DashboardsGeneralSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DashboardsGeneralParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DashboardsGeneralInitParameters `json:"initProvider,omitempty"`
}

// DashboardsGeneralStatus defines the observed state of DashboardsGeneral.
type DashboardsGeneralStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DashboardsGeneralObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DashboardsGeneral is the Schema for the DashboardsGenerals API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type DashboardsGeneral struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enablePublicSharing) || (has(self.initProvider) && has(self.initProvider.enablePublicSharing))",message="spec.forProvider.enablePublicSharing is a required parameter"
	Spec   DashboardsGeneralSpec   `json:"spec"`
	Status DashboardsGeneralStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardsGeneralList contains a list of DashboardsGenerals
type DashboardsGeneralList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DashboardsGeneral `json:"items"`
}

// Repository type metadata.
var (
	DashboardsGeneral_Kind             = "DashboardsGeneral"
	DashboardsGeneral_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DashboardsGeneral_Kind}.String()
	DashboardsGeneral_KindAPIVersion   = DashboardsGeneral_Kind + "." + CRDGroupVersion.String()
	DashboardsGeneral_GroupVersionKind = CRDGroupVersion.WithKind(DashboardsGeneral_Kind)
)

func init() {
	SchemeBuilder.Register(&DashboardsGeneral{}, &DashboardsGeneralList{})
}
