// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DashboardPresetsInitParameters struct {

	// (String) Dashboard preset to limit visibility for
	// Dashboard preset to limit visibility for
	DashboardPreset *string `json:"dashboardPreset,omitempty" tf:"dashboard_preset,omitempty"`

	// (String) User group to show selected dashboard preset to
	// User group to show selected dashboard preset to
	UserGroup *string `json:"userGroup,omitempty" tf:"user_group,omitempty"`
}

type DashboardPresetsListInitParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	DashboardPresets []DashboardPresetsInitParameters `json:"dashboardPresets,omitempty" tf:"dashboard_presets,omitempty"`
}

type DashboardPresetsListObservation struct {

	// (Block List, Min: 1) (see below for nested schema)
	DashboardPresets []DashboardPresetsObservation `json:"dashboardPresets,omitempty" tf:"dashboard_presets,omitempty"`
}

type DashboardPresetsListParameters struct {

	// (Block List, Min: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	DashboardPresets []DashboardPresetsParameters `json:"dashboardPresets" tf:"dashboard_presets,omitempty"`
}

type DashboardPresetsObservation struct {

	// (String) Dashboard preset to limit visibility for
	// Dashboard preset to limit visibility for
	DashboardPreset *string `json:"dashboardPreset,omitempty" tf:"dashboard_preset,omitempty"`

	// (String) User group to show selected dashboard preset to
	// User group to show selected dashboard preset to
	UserGroup *string `json:"userGroup,omitempty" tf:"user_group,omitempty"`
}

type DashboardPresetsParameters struct {

	// (String) Dashboard preset to limit visibility for
	// Dashboard preset to limit visibility for
	// +kubebuilder:validation:Optional
	DashboardPreset *string `json:"dashboardPreset" tf:"dashboard_preset,omitempty"`

	// (String) User group to show selected dashboard preset to
	// User group to show selected dashboard preset to
	// +kubebuilder:validation:Optional
	UserGroup *string `json:"userGroup" tf:"user_group,omitempty"`
}

type DashboardsPresetsInitParameters struct {

	// (Block List, Max: 1) Show selected preset to respective user group only. (see below for nested schema)
	// Show selected preset to respective user group only.
	DashboardPresetsList []DashboardPresetsListInitParameters `json:"dashboardPresetsList,omitempty" tf:"dashboard_presets_list,omitempty"`

	// (Boolean) Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	// Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	EnableDashboardPresets *bool `json:"enableDashboardPresets,omitempty" tf:"enable_dashboard_presets,omitempty"`
}

type DashboardsPresetsObservation struct {

	// (Block List, Max: 1) Show selected preset to respective user group only. (see below for nested schema)
	// Show selected preset to respective user group only.
	DashboardPresetsList []DashboardPresetsListObservation `json:"dashboardPresetsList,omitempty" tf:"dashboard_presets_list,omitempty"`

	// (Boolean) Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	// Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	EnableDashboardPresets *bool `json:"enableDashboardPresets,omitempty" tf:"enable_dashboard_presets,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DashboardsPresetsParameters struct {

	// (Block List, Max: 1) Show selected preset to respective user group only. (see below for nested schema)
	// Show selected preset to respective user group only.
	// +kubebuilder:validation:Optional
	DashboardPresetsList []DashboardPresetsListParameters `json:"dashboardPresetsList,omitempty" tf:"dashboard_presets_list,omitempty"`

	// (Boolean) Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	// Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt to manually limit visibility to selected user groups.
	// +kubebuilder:validation:Optional
	EnableDashboardPresets *bool `json:"enableDashboardPresets,omitempty" tf:"enable_dashboard_presets,omitempty"`
}

// DashboardsPresetsSpec defines the desired state of DashboardsPresets
type DashboardsPresetsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DashboardsPresetsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DashboardsPresetsInitParameters `json:"initProvider,omitempty"`
}

// DashboardsPresetsStatus defines the observed state of DashboardsPresets.
type DashboardsPresetsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DashboardsPresetsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DashboardsPresets is the Schema for the DashboardsPresetss API. The resource
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatrace}
type DashboardsPresets struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enableDashboardPresets) || (has(self.initProvider) && has(self.initProvider.enableDashboardPresets))",message="spec.forProvider.enableDashboardPresets is a required parameter"
	Spec   DashboardsPresetsSpec   `json:"spec"`
	Status DashboardsPresetsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardsPresetsList contains a list of DashboardsPresetss
type DashboardsPresetsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DashboardsPresets `json:"items"`
}

// Repository type metadata.
var (
	DashboardsPresets_Kind             = "DashboardsPresets"
	DashboardsPresets_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DashboardsPresets_Kind}.String()
	DashboardsPresets_KindAPIVersion   = DashboardsPresets_Kind + "." + CRDGroupVersion.String()
	DashboardsPresets_GroupVersionKind = CRDGroupVersion.WithKind(DashboardsPresets_Kind)
)

func init() {
	SchemeBuilder.Register(&DashboardsPresets{}, &DashboardsPresetsList{})
}
